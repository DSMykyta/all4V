// js/generators/generator-entities/ge-events.js

import { dom, getActiveTab } from './ge-dom.js';
import { fetchAllData } from './ge-data.js';
import { renderAllTables, showLoadingState } from './ge-render.js';
import { showToast } from '../../common/ui-toast.js';
import { deleteEntity } from './ge-data.js';
import {
    openAddCategoryModal,
    openEditCategoryModal,
    openAddCharacteristicModal,
    openEditCharacteristicModal,
    openAddOptionModal,
    openEditOptionModal
} from './ge-modal.js';

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –≤—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
 */
export function initEvents() {
    console.log('üéØ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π...');

    // –ö–Ω–æ–ø–∫–∞ "–î–æ–¥–∞—Ç–∏"
    if (dom.btnAddEntity) {
        dom.btnAddEntity.addEventListener('click', handleAddEntity);
    }

    // –ö–Ω–æ–ø–∫–∞ "–û–Ω–æ–≤–∏—Ç–∏"
    if (dom.btnReload) {
        dom.btnReload.addEventListener('click', handleReloadData);
    }

    // –î–µ–ª–µ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü—è—Ö (edit, delete)
    document.addEventListener('click', (e) => {
        if (e.target.closest('.btn-edit-entity')) {
            const btn = e.target.closest('.btn-edit-entity');
            const entityId = btn.dataset.entityId;
            handleEditEntity(entityId);
        }

        if (e.target.closest('.btn-delete-entity')) {
            const btn = e.target.closest('.btn-delete-entity');
            const entityId = btn.dataset.entityId;
            const rowIndex = parseInt(btn.dataset.rowIndex);
            handleDeleteEntity(entityId, rowIndex);
        }
    });

    console.log('‚úÖ –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
}

/**
 * –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–î–æ–¥–∞—Ç–∏"
 */
function handleAddEntity() {
    const activeTab = getActiveTab();
    console.log('‚ûï –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó —Å—É—Ç–Ω–æ—Å—Ç—ñ, –∞–∫—Ç–∏–≤–Ω–∏–π —Ç–∞–±:', activeTab);

    switch (activeTab) {
        case 'categories':
            openAddCategoryModal();
            break;
        case 'characteristics':
            openAddCharacteristicModal();
            break;
        case 'options':
            openAddOptionModal();
            break;
        // üî¥ –í–ò–î–ê–õ–ï–ù–û: case 'marketplaces':
        default:
            console.warn('‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π –∞–∫—Ç–∏–≤–Ω–∏–π —Ç–∞–±:', activeTab);
    }
}



/**
 * –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏"
 */
function handleEditEntity(entityId) {
    const activeTab = getActiveTab();
    console.log('‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å—É—Ç–Ω–æ—Å—Ç—ñ:', entityId, '—Ç–∞–±:', activeTab);

    switch (activeTab) {
        case 'categories':
            openEditCategoryModal(entityId);
            break;
        case 'characteristics':
            openEditCharacteristicModal(entityId);
            break;
        case 'options':
            openEditOptionModal(entityId);
            break;
        // üî¥ –í–ò–î–ê–õ–ï–ù–û: case 'marketplaces':
        default:
            console.warn('‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π –∞–∫—Ç–∏–≤–Ω–∏–π —Ç–∞–±:', activeTab);
    }
}



/**
 * –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–í–∏–¥–∞–ª–∏—Ç–∏"
 */
async function handleDeleteEntity(entityId, rowIndex) {
    const activeTab = getActiveTab();
    console.log('üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—É—Ç–Ω–æ—Å—Ç—ñ:', entityId, '—Ä—è–¥–æ–∫:', rowIndex);

    const confirmed = confirm(`–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å—É—Ç–Ω—ñ—Å—Ç—å ${entityId}?\n–¶—é –¥—ñ—é –Ω–µ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏.`);

    if (!confirmed) {
        console.log('‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º');
        return;
    }

    try {
        let sheetName = '';
        switch (activeTab) {
            case 'categories':
                sheetName = 'Categories';
                break;
            case 'characteristics':
                sheetName = 'Characteristics';
                break;
            case 'options':
                sheetName = 'Options';
                break;
            // üî¥ –í–ò–î–ê–õ–ï–ù–û: case 'marketplaces':
        }


        await deleteEntity(sheetName, rowIndex);
        showToast(`–°—É—Ç–Ω—ñ—Å—Ç—å ${entityId} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ`, 'success');
        renderAllTables();

    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è:', error);
        showToast('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å—É—Ç–Ω–æ—Å—Ç—ñ', 'error');
    }
}

/**
 * –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ"
 */
async function handleReloadData() {
    console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...');

    const activeTab = getActiveTab();
    let tbody = null;
    let colspan = 7;

    switch (activeTab) {
        case 'categories':
            tbody = dom.categoriesTbody;
            colspan = 7;
            break;
        case 'characteristics':
            tbody = dom.characteristicsTbody;
            colspan = 9;
            break;
        case 'options':
            tbody = dom.optionsTbody;
            colspan = 6;
            break;
    }

    if (tbody) {
        showLoadingState(tbody, colspan);
    }

    try {
        await fetchAllData();
        renderAllTables();
        showToast('–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ', 'success');
        console.log('‚úÖ –î–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:', error);
        showToast('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö', 'error');
    }
}
