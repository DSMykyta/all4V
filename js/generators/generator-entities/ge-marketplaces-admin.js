// js/generators/generator-entities/ge-marketplaces-admin.js

/**
 * ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
 * ‚ïë           –ê–î–ú–Ü–ù-–ü–ê–ù–ï–õ–¨ –ö–ï–†–£–í–ê–ù–ù–Ø –ú–ê–†–ö–ï–¢–ü–õ–ï–ô–°–ê–ú–ò                          ‚ïë
 * ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
 */

import { getMarketplacesData, createMarketplaceSheet } from './ge-data.js';
import { showToast } from '../../common/ui-toast.js';

let currentMarketplacesData = [];
let hasUnsavedChanges = false;

const SPREADSHEET_ID = '1iFOCQUbisLprSfIkfCar3Oc5f8JW12kA0dpHzjEXSsk';
const MARKETPLACE_HEADERS = ['marketplace_id', 'display_name', 'icon_svg', 'primary_color'];

/**
 * –í—ñ–¥–∫—Ä–∏–≤–∞—î –º–æ–¥–∞–ª –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ñ–≤
 */
export function openMarketplacesAdminModal() {
    console.log('üî• openMarketplacesAdminModal –≤–∏–∫–ª–∏–∫–∞–Ω–æ!');

    const modal = document.getElementById('modal-marketplaces-admin');
    
    if (!modal) {
        console.error('‚ùå –ú–æ–¥–∞–ª #modal-marketplaces-admin –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ DOM');
        alert('–ú–æ–¥–∞–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ HTML.');
        return;
    }

    // –ö–æ–ø—ñ—é—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ñ–≤
    const rawData = getMarketplacesData();
    currentMarketplacesData = JSON.parse(JSON.stringify(rawData));
    
    console.log('üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ñ–≤:', currentMarketplacesData.length);

    // –†–µ–Ω–¥–µ—Ä–∏–º–æ —Ç–∞–±–ª–∏—Ü—é
    renderMarketplacesTable();

    // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª
    modal.style.display = 'flex';

    // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    initModalEventListeners(modal);

    console.log('‚úÖ –ú–æ–¥–∞–ª –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ñ–≤ –≤—ñ–¥–∫—Ä–∏—Ç–æ');
}

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –º–æ–¥–∞–ª—É
 */
function initModalEventListeners(modal) {
    // –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—É
    const closeButtons = modal.querySelectorAll('[data-modal-close]');
    closeButtons.forEach(btn => {
        btn.onclick = () => {
            console.log('üö™ –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—É...');
            closeModal(modal);
        };
    });

    // –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ –æ–≤–µ—Ä–ª–µ—é
    const overlay = modal.querySelector('.modal-overlay');
    if (overlay) {
        overlay.onclick = () => {
            console.log('üö™ –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—É —á–µ—Ä–µ–∑ overlay...');
            closeModal(modal);
        };
    }

    // –ö–Ω–æ–ø–∫–∞ "–î–æ–¥–∞—Ç–∏"
    const btnAdd = document.getElementById('btn-add-marketplace-row');
    if (btnAdd) {
        btnAdd.onclick = addMarketplaceRow;
    }

    // –ö–Ω–æ–ø–∫–∞ "–ó–±–µ—Ä–µ–≥—Ç–∏"
    const btnSave = document.getElementById('btn-save-marketplaces');
    if (btnSave) {
        btnSave.onclick = saveMarketplaces;
    }
}

/**
 * –ó–∞–∫—Ä–∏–≤–∞—î –º–æ–¥–∞–ª
 */
function closeModal(modal) {
    if (hasUnsavedChanges) {
        const confirm = window.confirm('–Ñ –Ω–µ–∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∑–º—ñ–Ω–∏. –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –∑–∞–∫—Ä–∏—Ç–∏?');
        if (!confirm) return;
    }

    modal.style.display = 'none';
    hasUnsavedChanges = false;
    updateSaveButtonState();
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—é –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ñ–≤
 */
function renderMarketplacesTable() {
    const tbody = document.querySelector('#marketplaces-admin-table tbody');
    if (!tbody) {
        console.error('‚ùå tbody –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        return;
    }

    tbody.innerHTML = '';

    if (currentMarketplacesData.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="6" style="text-align: center; padding: 40px; color: var(--text-secondary);">
                    –ù–µ–º–∞—î –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ñ–≤. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–î–æ–¥–∞—Ç–∏ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å" —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏.
                </td>
            </tr>
        `;
        return;
    }

    currentMarketplacesData.forEach((item, index) => {
        const tr = document.createElement('tr');
        tr.dataset.index = index;

        tr.innerHTML = `
            <td>
                <input type="text" 
                       class="input-main" 
                       value="${escapeHtml(item.marketplace_id)}" 
                       data-field="marketplace_id" 
                       placeholder="rozetka" 
                       required
                       style="width: 100%;">
            </td>
            <td>
                <input type="text" 
                       class="input-main" 
                       value="${escapeHtml(item.display_name)}" 
                       data-field="display_name" 
                       placeholder="–†–æ–∑–µ—Ç–∫–∞" 
                       required
                       style="width: 100%;">
            </td>
            <td>
                <input type="text" 
                       class="input-main" 
                       value="${escapeHtml(item.icon_svg || '')}" 
                       data-field="icon_svg" 
                       placeholder="<svg>..."
                       style="width: 100%;">
            </td>
            <td>
                <input type="text" 
                       class="input-main" 
                       value="${escapeHtml(item.primary_color || '')}" 
                       data-field="primary_color" 
                       placeholder="#FF0000"
                       style="width: 100%;">
            </td>
            <td style="text-align: center;">
                <label style="display: flex; align-items: center; gap: 4px; justify-content: center;">
                    <input type="checkbox" 
                           data-field="create_sheet" 
                           ${item._createSheet ? 'checked' : ''}>
                    <span style="font-size: 12px;">–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞—Ä–∫—É—à</span>
                </label>
            </td>
            <td style="text-align: center;">
                <button class="btn-icon btn-delete-row" title="–í–∏–¥–∞–ª–∏—Ç–∏" data-index="${index}">
                    <span class="material-symbols-outlined">delete</span>
                </button>
            </td>
        `;

        tbody.appendChild(tr);
    });

    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    attachTableEventListeners(tbody);

    console.log(`‚úÖ –¢–∞–±–ª–∏—Ü—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ñ–≤ –≤—ñ–¥—Ä–µ–Ω–¥–µ—Ä–µ–Ω–∞: ${currentMarketplacesData.length} –∑–∞–ø–∏—Å—ñ–≤`);
}

/**
 * –î–æ–¥–∞—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–æ —Ç–∞–±–ª–∏—Ü—ñ
 */
function attachTableEventListeners(tbody) {
    // –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω –≤ input –ø–æ–ª—è—Ö
    tbody.addEventListener('input', (e) => {
        if (e.target.tagName === 'INPUT' && e.target.type !== 'checkbox') {
            const tr = e.target.closest('tr');
            const index = parseInt(tr.dataset.index);
            const field = e.target.dataset.field;
            const value = e.target.value;

            updateMarketplaceData(index, field, value);
        }
    });

    // –û–±—Ä–æ–±–∫–∞ —á–µ–∫–±–æ–∫—Å—ñ–≤
    tbody.addEventListener('change', (e) => {
        if (e.target.tagName === 'INPUT' && e.target.type === 'checkbox') {
            const tr = e.target.closest('tr');
            const index = parseInt(tr.dataset.index);
            const field = e.target.dataset.field;
            const value = e.target.checked;

            if (field === 'create_sheet') {
                currentMarketplacesData[index]._createSheet = value;
                setUnsavedChanges();
            }
        }
    });

    // –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    tbody.addEventListener('click', (e) => {
        const deleteBtn = e.target.closest('.btn-delete-row');
        if (deleteBtn) {
            const index = parseInt(deleteBtn.dataset.index);
            deleteMarketplaceRow(index);
        }
    });
}

/**
 * –û–Ω–æ–≤–ª—é—î –¥–∞–Ω—ñ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—É
 */
function updateMarketplaceData(index, field, value) {
    if (currentMarketplacesData[index][field] !== value) {
        currentMarketplacesData[index][field] = value;
        setUnsavedChanges();
    }
}

/**
 * –î–æ–¥–∞—î –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—É
 */
function addMarketplaceRow() {
    console.log('‚ûï –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—É...');

    currentMarketplacesData.push({
        marketplace_id: '',
        display_name: '',
        icon_svg: '',
        primary_color: '',
        _createSheet: false
    });

    setUnsavedChanges();
    renderMarketplacesTable();

    // –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä—à–µ –ø–æ–ª–µ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞
    const tbody = document.querySelector('#marketplaces-admin-table tbody');
    const newRow = tbody.querySelector('tr:last-child input[data-field="marketplace_id"]');
    if (newRow) newRow.focus();

    console.log('‚úÖ –ù–æ–≤–∏–π —Ä—è–¥–æ–∫ –¥–æ–¥–∞–Ω–æ');
}

/**
 * –í–∏–¥–∞–ª—è—î —Ä—è–¥–æ–∫ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—É
 */
function deleteMarketplaceRow(index) {
    const marketplace = currentMarketplacesData[index];
    const confirmMsg = marketplace.marketplace_id 
        ? `–í–∏–¥–∞–ª–∏—Ç–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å "${marketplace.marketplace_id}"?`
        : '–í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫?';

    if (!confirm(confirmMsg)) return;

    currentMarketplacesData.splice(index, 1);
    setUnsavedChanges();
    renderMarketplacesTable();

    console.log(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –Ω–∞ —ñ–Ω–¥–µ–∫—Å—ñ ${index}`);
}

/**
 * –ó–±–µ—Ä—ñ–≥–∞—î –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∏
 */
async function saveMarketplaces() {
    console.log('üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ñ–≤...');

    if (!hasUnsavedChanges) {
        console.log('‚ö†Ô∏è –ù–µ–º–∞—î –Ω–µ–∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∑–º—ñ–Ω');
        return;
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if (!validateMarketplaces()) {
        showToast('–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è', 'error');
        return;
    }

    const btnSave = document.getElementById('btn-save-marketplaces');
    btnSave.disabled = true;
    btnSave.innerHTML = '<span class="material-symbols-outlined">hourglass_empty</span> –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è...';

    try {
        // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è (–±–µ–∑ _createSheet)
        const dataToSave = currentMarketplacesData.map(mp => {
            const { _createSheet, _rowIndex, ...cleanData } = mp;
            return cleanData;
        });

        // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—É—î–º–æ –∞—Ä–∫—É—à Marketplaces
        await rewriteMarketplacesSheet(dataToSave);

        showToast('–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∏ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ', 'success');

        // –°—Ç–≤–æ—Ä—é—î–º–æ –∞—Ä–∫—É—à—ñ –¥–ª—è –Ω–æ–≤–∏—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ñ–≤ (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
        await createSheetsForMarketplaces();

        hasUnsavedChanges = false;
        updateSaveButtonState();

        console.log('‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ');

        // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª
        setTimeout(() => {
            const modal = document.getElementById('modal-marketplaces-admin');
            modal.style.display = 'none';
        }, 1000);

    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ñ–≤:', error);
        showToast('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: ' + error.message, 'error');
    } finally {
        btnSave.disabled = false;
        btnSave.innerHTML = '<span class="material-symbols-outlined">save</span> –ó–±–µ—Ä–µ–≥—Ç–∏';
    }
}

/**
 * –ü–µ—Ä–µ–∑–∞–ø–∏—Å—É—î –∞—Ä–∫—É—à Marketplaces
 */
async function rewriteMarketplacesSheet(data) {
    const token = gapi.client.getToken()?.access_token;
    if (!token) throw new Error('–ù–µ–º–∞—î —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó');

    console.log('üìù –ü–µ—Ä–µ–∑–∞–ø–∏—Å—É—î–º–æ –∞—Ä–∫—É—à Marketplaces...');

    // –§–æ—Ä–º—É—î–º–æ –¥–∞–Ω—ñ –∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    const values = [
        MARKETPLACE_HEADERS,
        ...data.map(mp => [
            mp.marketplace_id,
            mp.display_name,
            mp.icon_svg || '',
            mp.primary_color || ''
        ])
    ];

    const url = `https://sheets.googleapis.com/v4/spreadsheets/${SPREADSHEET_ID}/values/Marketplaces!A1:Z?valueInputOption=RAW`;

    const response = await fetch(url, {
        method: 'PUT',
        headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ values })
    });

    if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: ${response.status} - ${errorText}`);
    }

    console.log('‚úÖ –ê—Ä–∫—É—à Marketplaces –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–æ');
}

/**
 * –°—Ç–≤–æ—Ä—é—î –∞—Ä–∫—É—à—ñ –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ñ–≤
 */
async function createSheetsForMarketplaces() {
    const toCreate = currentMarketplacesData.filter(mp => mp._createSheet && mp.marketplace_id);

    if (toCreate.length === 0) {
        console.log('‚ÑπÔ∏è –ù–µ–º–∞—î –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ñ–≤ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—Ä–∫—É—à—ñ–≤');
        return;
    }

    console.log(`üìÑ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è ${toCreate.length} –∞—Ä–∫—É—à—ñ–≤...`);

    for (const mp of toCreate) {
        try {
            const { sheetTitle } = await createMarketplaceSheet(mp.marketplace_id);
            showToast(`–ê—Ä–∫—É—à "${sheetTitle}" —Å—Ç–≤–æ—Ä–µ–Ω–æ`, 'success');
            console.log(`‚úÖ –ê—Ä–∫—É—à ${sheetTitle} —Å—Ç–≤–æ—Ä–µ–Ω–æ`);
        } catch (error) {
            console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—Ä–∫—É—à–∞ –¥–ª—è ${mp.marketplace_id}:`, error);
            showToast(`–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞—Ä–∫—É—à –¥–ª—è ${mp.marketplace_id}`, 'error');
        }
    }
}

/**
 * –í–∞–ª—ñ–¥—É—î –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∏
 */
function validateMarketplaces() {
    for (const mp of currentMarketplacesData) {
        if (!mp.marketplace_id || !mp.display_name) {
            console.error('‚ùå –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞:', mp);
            return false;
        }
    }
    console.log('‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—Ä–æ–π–¥–µ–Ω–∞');
    return true;
}

/**
 * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –Ω–µ–∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∑–º—ñ–Ω
 */
function setUnsavedChanges() {
    hasUnsavedChanges = true;
    updateSaveButtonState();
}

/**
 * –û–Ω–æ–≤–ª—é—î —Å—Ç–∞–Ω –∫–Ω–æ–ø–∫–∏ "–ó–±–µ—Ä–µ–≥—Ç–∏"
 */
function updateSaveButtonState() {
    const btnSave = document.getElementById('btn-save-marketplaces');
    if (btnSave) {
        btnSave.disabled = !hasUnsavedChanges;
    }

    const status = document.getElementById('marketplaces-status');
    if (status) {
        if (hasUnsavedChanges) {
            status.innerHTML = '<span class="material-symbols-outlined">warning</span> –Ñ –Ω–µ–∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∑–º—ñ–Ω–∏';
            status.style.color = 'var(--warning, orange)';
        } else {
            status.innerHTML = '<span class="material-symbols-outlined">info</span> –†–µ–¥–∞–≥—É–π—Ç–µ –¥–∞–Ω—ñ –ø—Ä—è–º–æ –≤ —Ç–∞–±–ª–∏—Ü—ñ';
            status.style.color = 'var(--text-secondary)';
        }
    }
}

/**
 * –ï–∫—Ä–∞–Ω—É—î HTML
 */
function escapeHtml(text) {
    if (!text) return '';
    const map = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#039;'
    };
    return String(text).replace(/[&<>"']/g, m => map[m]);
}
