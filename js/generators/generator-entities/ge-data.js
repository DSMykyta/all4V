// js/generators/generator-entities/ge-data.js

const SPREADSHEET_ID = '1iFOCQUbisLprSfIkfCar3Oc5f8JW12kA0dpHzjEXSsk';

// –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –≤ –ø–∞–º'—è—Ç—ñ
let categoriesData = [];
let characteristicsData = [];
let optionsData = [];
let marketplacesData = [];

/**
 * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –≤—Å—ñ –¥–∞–Ω—ñ –∑ Google Sheets
 */
export async function fetchAllData() {
    try {
        const token = gapi.client.getToken()?.access_token;
        
        if (!token) {
            throw new Error('–ù–µ–º–∞—î —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó');
        }
        
        console.log('üì° –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ Google Sheets...');
        
        // –ü–∞—Ä–∞–ª–µ–ª—å–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ –∞—Ä–∫—É—à—ñ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
        const results = await Promise.allSettled([
            fetchSheetData('Categories', token),
            fetchSheetData('Characteristics', token),
            fetchSheetData('Options', token),
            fetchSheetData('Marketplaces', token)
        ]);

        // –û–±—Ä–æ–±–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        const names = ['Categories', 'Characteristics', 'Options', 'Marketplaces'];
        const [categories, characteristics, options, marketplaces] = results.map((result, index) => {
            if (result.status === 'rejected') {
                console.warn(`‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ ${names[index]}:`, result.reason);
                return [];
            }
            return result.value;
        });

        categoriesData = parseSheetData(categories, [
            'local_id', 'parent_local_id', 'name_uk', 'name_ru', 'category_type'
        ]);

        characteristicsData = parseSheetData(characteristics, [
            'local_id', 'name_uk', 'name_ru', 'param_type', 'unit', 'filter_type', 'is_global', 'notes'
        ]);

        optionsData = parseSheetData(options, [
            'local_id', 'char_local_id', 'name_uk', 'name_ru'
        ]);

        marketplacesData = parseSheetData(marketplaces, [
            'marketplace_id', 'display_name', 'icon_svg', 'primary_color'
        ]);

        console.log('‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:', {
            categories: categoriesData.length,
            characteristics: characteristicsData.length,
            options: optionsData.length,
            marketplaces: marketplacesData.length
        });

        return {
            categories: categoriesData,
            characteristics: characteristicsData,
            options: optionsData,
            marketplaces: marketplacesData
        };

    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:', error);
        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –º–∞—Å–∏–≤–∏ –∑–∞–º—ñ—Å—Ç—å throw
        return {
            categories: [],
            characteristics: [],
            options: [],
            marketplaces: []
        };
    }
}

/**
 * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –∑ –æ–¥–Ω–æ–≥–æ –∞—Ä–∫—É—à–∞
 */
async function fetchSheetData(sheetName, token) {
    const url = `https://sheets.googleapis.com/v4/spreadsheets/${SPREADSHEET_ID}/values/${encodeURIComponent(sheetName)}`;
    
    console.log(`üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—Ä–∫—É—à–∞: ${sheetName}`);
    
    const response = await fetch(url, {
        headers: {
            'Authorization': `Bearer ${token}`
        }
    });

    if (!response.ok) {
        const errorText = await response.text();
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è ${sheetName}:`, response.status, errorText);
        throw new Error(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—Ä–∫—É—à–∞ ${sheetName}: ${response.status}`);
    }

    const data = await response.json();
    
    console.log(`‚úÖ –ê—Ä–∫—É—à ${sheetName} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:`, data.values?.length || 0, '—Ä—è–¥–∫—ñ–≤');
    
    return data.values || [];
}

/**
 * –ü–∞—Ä—Å–∏—Ç—å –¥–∞–Ω—ñ –∑ –∞—Ä–∫—É—à–∞ –≤ –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤
 */
function parseSheetData(values, columns) {
    if (!values || values.length === 0) {
        console.warn('‚ö†Ô∏è –ê—Ä–∫—É—à –ø–æ—Ä–æ–∂–Ω—ñ–π');
        return [];
    }

    if (values.length === 1) {
        console.warn('‚ö†Ô∏è –ê—Ä–∫—É—à –º–∞—î —Ç—ñ–ª—å–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏');
        return [];
    }

    // –ü–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ - –∑–∞–≥–æ–ª–æ–≤–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
    const rows = values.slice(1);

    const parsed = rows.map((row, index) => {
        const item = { _rowIndex: index + 2 }; // +2 —Ç–æ–º—É —â–æ: 1 –∑–∞–≥–æ–ª–æ–≤–æ–∫ + 1 —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—è –∑ 1
        
        columns.forEach((col, i) => {
            item[col] = row[i] || '';
        });

        return item;
    }).filter(item => {
        // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏
        return item.local_id || item.marketplace_id || item.brand_id;
    });

    console.log(`üìä –†–æ–∑–ø–∞—Ä—Å–µ–Ω–æ ${parsed.length} –∑–∞–ø–∏—Å—ñ–≤`);
    
    return parsed;
}



/**
 * –ì–µ—Ç—Ç–µ—Ä–∏ –¥–ª—è –¥–∞–Ω–∏—Ö
 */
export function getCategoriesData() {
    return categoriesData;
}

export function getCharacteristicsData() {
    return characteristicsData;
}

export function getOptionsData() {
    return optionsData;
}

export function getMarketplacesData() {
    return marketplacesData;
}

/**
 * –î–æ–¥–∞—î –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å –≤ Google Sheets
 */
export async function addEntityToSheet(sheetName, values) {
    try {
        const token = gapi.auth.getToken().access_token;
        const range = `${sheetName}!A:Z`;

        const response = await fetch(
            `https://sheets.googleapis.com/v4/spreadsheets/${SPREADSHEET_ID}/values/${range}:append?valueInputOption=RAW`,
            {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    values: [values]
                })
            }
        );

        if (!response.ok) {
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É: ${response.statusText}`);
        }

        console.log(`‚úÖ –ó–∞–ø–∏—Å –¥–æ–¥–∞–Ω–æ –¥–æ ${sheetName}`);
        return await response.json();

    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É:', error);
        throw error;
    }
}

/**
 * –û–Ω–æ–≤–ª—é—î –∑–∞–ø–∏—Å –≤ Google Sheets
 */
export async function updateEntityInSheet(sheetName, rowIndex, values) {
    try {
        const token = gapi.auth.getToken().access_token;
        const range = `${sheetName}!A${rowIndex}:Z${rowIndex}`;

        const response = await fetch(
            `https://sheets.googleapis.com/v4/spreadsheets/${SPREADSHEET_ID}/values/${range}?valueInputOption=RAW`,
            {
                method: 'PUT',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    values: [values]
                })
            }
        );

        if (!response.ok) {
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É: ${response.statusText}`);
        }

        console.log(`‚úÖ –ó–∞–ø–∏—Å –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ ${sheetName} (—Ä—è–¥–æ–∫ ${rowIndex})`);
        return await response.json();

    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É:', error);
        throw error;
    }
}

/**
 * –í–∏–¥–∞–ª—è—î —Ä—è–¥–æ–∫ –∑ Google Sheets
 */
export async function deleteEntityFromSheet(sheetName, rowIndex) {
    try {
        const token = gapi.auth.getToken().access_token;

        // –û—Ç—Ä–∏–º—É—î–º–æ sheetId
        const spreadsheetResponse = await fetch(
            `https://sheets.googleapis.com/v4/spreadsheets/${SPREADSHEET_ID}`,
            {
                headers: { 'Authorization': `Bearer ${token}` }
            }
        );

        const spreadsheetData = await spreadsheetResponse.json();
        const sheet = spreadsheetData.sheets.find(s => s.properties.title === sheetName);
        
        if (!sheet) {
            throw new Error(`–ê—Ä–∫—É—à ${sheetName} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
        }

        const sheetId = sheet.properties.sheetId;

        // –í–∏–¥–∞–ª—è—î–º–æ —Ä—è–¥–æ–∫
        const response = await fetch(
            `https://sheets.googleapis.com/v4/spreadsheets/${SPREADSHEET_ID}:batchUpdate`,
            {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    requests: [{
                        deleteDimension: {
                            range: {
                                sheetId: sheetId,
                                dimension: 'ROWS',
                                startIndex: rowIndex - 1,
                                endIndex: rowIndex
                            }
                        }
                    }]
                })
            }
        );

        if (!response.ok) {
            throw new Error(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É: ${response.statusText}`);
        }

        console.log(`‚úÖ –ó–∞–ø–∏—Å –≤–∏–¥–∞–ª–µ–Ω–æ –∑ ${sheetName} (—Ä—è–¥–æ–∫ ${rowIndex})`);
        return await response.json();

    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É:', error);
        throw error;
    }
}
