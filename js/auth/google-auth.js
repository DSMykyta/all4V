// js/auth/google-auth.js

const CLIENT_ID = '431864072155-l006mvdsf5d67ilevfica0elcc1d0fl8.apps.googleusercontent.com';
const DISCOVERY_DOCS = ['https://sheets.googleapis.com/$discovery/rest?version=v4'];
const SCOPES = 'https://www.googleapis.com/auth/spreadsheets';

let isAuthorized = false;
let tokenClient = null;
let onAuthSuccessCallback = null;

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î Google API (–≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –æ–¥–∏–Ω —Ä–∞–∑)
 */
export function initGoogleAuth(onSuccess) {
    onAuthSuccessCallback = onSuccess;

    // –ß–µ–∫–∞—î–º–æ –ø–æ–∫–∏ gapi –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç—å—Å—è
    const checkGapi = setInterval(() => {
        if (typeof gapi !== 'undefined') {
            clearInterval(checkGapi);
            loadGapiClient();
        }
    }, 100);
}

/**
 * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î GAPI client
 */
function loadGapiClient() {
    gapi.load('client', async () => {
        await gapi.client.init({
            discoveryDocs: DISCOVERY_DOCS
        });

        console.log('‚úÖ Google API Client —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Ç–æ–∫–µ–Ω
        checkStoredToken();

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Google Identity Services –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        initTokenClient();
    });
}

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î Token Client –¥–ª—è OAuth
 */
function initTokenClient() {
    const checkGoogle = setInterval(() => {
        if (typeof google !== 'undefined' && google.accounts) {
            clearInterval(checkGoogle);

            tokenClient = google.accounts.oauth2.initTokenClient({
                client_id: CLIENT_ID,
                scope: SCOPES,
                callback: handleAuthResponse
            });

            console.log('‚úÖ Google Token Client —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            updateAllAuthButtons(false);
        }
    }, 100);
}

/**
 * –û–±—Ä–æ–±–ª—è—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
 */
function handleAuthResponse(response) {
    if (response.error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:', response);
        alert('–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
        return;
    }

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–æ–∫–µ–Ω
    const tokenData = {
        access_token: response.access_token,
        expires_at: Date.now() + (response.expires_in * 1000)
    };

    sessionStorage.setItem('google_auth_token', JSON.stringify(tokenData));
    gapi.client.setToken({ access_token: response.access_token });

    isAuthorized = true;
    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞');

    updateAllAuthButtons(true);

    // –í–∏–∫–ª–∏–∫–∞—î–º–æ callback
    if (onAuthSuccessCallback) {
        onAuthSuccessCallback();
    }
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Ç–æ–∫–µ–Ω
 */
function checkStoredToken() {
    const storedToken = sessionStorage.getItem('google_auth_token');

    if (storedToken) {
        try {
            const tokenData = JSON.parse(storedToken);

            if (tokenData.expires_at > Date.now()) {
                gapi.client.setToken({ access_token: tokenData.access_token });
                isAuthorized = true;
                
                console.log('‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Ç–æ–∫–µ–Ω');
                
                updateAllAuthButtons(true);

                if (onAuthSuccessCallback) {
                    onAuthSuccessCallback();
                }
                
                return true;
            } else {
                sessionStorage.removeItem('google_auth_token');
                console.log('‚ÑπÔ∏è –¢–æ–∫–µ–Ω –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π');
            }
        } catch (e) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É —Ç–æ–∫–µ–Ω–∞:', e);
            sessionStorage.removeItem('google_auth_token');
        }
    }

    return false;
}

/**
 * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
 */
export function signIn() {
    if (isAuthorized) {
        console.log('‚ÑπÔ∏è –í–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ');
        return;
    }

    if (!tokenClient) {
        console.error('‚ùå Token client –Ω–µ –≥–æ—Ç–æ–≤–∏–π');
        alert('Google API —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ. –ó–∞—á–µ–∫–∞–π—Ç–µ...');
        return;
    }

    tokenClient.requestAccessToken({ prompt: 'consent' });
}

/**
 * –í–∏—Ö—ñ–¥
 */
export function signOut() {
    const token = gapi.client.getToken();

    if (token) {
        google.accounts.oauth2.revoke(token.access_token);
        gapi.client.setToken(null);
    }

    sessionStorage.removeItem('google_auth_token');
    isAuthorized = false;

    console.log('‚úÖ –í–∏—Ö—ñ–¥ –≤–∏–∫–æ–Ω–∞–Ω–æ');

    updateAllAuthButtons(false);
    
    // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É
    setTimeout(() => window.location.reload(), 300);
}

/**
 * –û–Ω–æ–≤–ª—é—î –≤—Å—ñ –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
 */
function updateAllAuthButtons(authorized) {
    // –î–æ–¥–∞—î–º–æ –Ω–µ–≤–µ–ª–∏–∫—É –∑–∞—Ç—Ä–∏–º–∫—É —â–æ–± DOM –≤—Å—Ç–∏–≥ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏—Å—å
    setTimeout(() => {
        const authBtns = document.querySelectorAll('#auth-btn');
        
        console.log(`üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (–∑–Ω–∞–π–¥–µ–Ω–æ ${authBtns.length}), authorized: ${authorized}`);

        authBtns.forEach(btn => {
            const icon = btn.querySelector('.material-symbols-outlined');
            const text = btn.querySelector('.panel-item-text');

            if (authorized) {
                icon.textContent = 'logout';
                text.textContent = '–í–∏–π—Ç–∏';
                btn.onclick = signOut;
                btn.style.cursor = 'pointer';
            } else {
                icon.textContent = 'login';
                text.textContent = '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è';
                btn.onclick = signIn;
                btn.style.cursor = 'pointer';
            }
        });
    }, 100);
}


/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π
 */
export function isUserAuthorized() {
    return isAuthorized;
}

/**
 * –û—Ç—Ä–∏–º—É—î —Ç–æ–∫–µ–Ω
 */
export function getAccessToken() {
    const token = gapi.client.getToken();
    return token ? token.access_token : null;
}


function handleAuthResponse(response) {
    if (response.error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:', response);
        alert('–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
        return;
    }

    const tokenData = {
        access_token: response.access_token,
        expires_at: Date.now() + (response.expires_in * 1000)
    };

    sessionStorage.setItem('google_auth_token', JSON.stringify(tokenData));
    gapi.client.setToken({ access_token: response.access_token });

    isAuthorized = true;
    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞');

    updateAllAuthButtons(true);

    // –í–∏–∫–ª–∏–∫–∞—î–º–æ callback
    if (onAuthSuccessCallback) {
        onAuthSuccessCallback();
    }
    
    // –î–û–î–ê–ù–û: –î–∏—Å–ø–∞—Ç—á–∏–º–æ –ø–æ–¥—ñ—é –¥–ª—è —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—ñ–≤
    window.dispatchEvent(new Event('google-auth-success'));
}

// –í –∫—ñ–Ω—Ü—ñ —Ñ—É–Ω–∫—Ü—ñ—ó checkStoredToken –¥–æ–¥–∞–π—Ç–µ:
function checkStoredToken() {
    const storedToken = sessionStorage.getItem('google_auth_token');

    if (storedToken) {
        try {
            const tokenData = JSON.parse(storedToken);

            if (tokenData.expires_at > Date.now()) {
                gapi.client.setToken({ access_token: tokenData.access_token });
                isAuthorized = true;
                
                console.log('‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Ç–æ–∫–µ–Ω');
                
                updateAllAuthButtons(true);

                if (onAuthSuccessCallback) {
                    onAuthSuccessCallback();
                }
                
                // –î–û–î–ê–ù–û: –î–∏—Å–ø–∞—Ç—á–∏–º–æ –ø–æ–¥—ñ—é
                setTimeout(() => {
                    window.dispatchEvent(new Event('google-auth-success'));
                }, 100);
                
                return true;
            } else {
                sessionStorage.removeItem('google_auth_token');
                console.log('‚ÑπÔ∏è –¢–æ–∫–µ–Ω –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π');
            }
        } catch (e) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É —Ç–æ–∫–µ–Ω–∞:', e);
            sessionStorage.removeItem('google_auth_token');
        }
    }

    return false;
}
