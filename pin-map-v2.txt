<!DOCTYPE html>
<html lang="uk">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–°–∏—Å—Ç–µ–º–∞ –ö–µ—Ä—É–≤–∞–Ω–Ω—è –ö–∞—Ç–∞–ª–æ–≥–æ–º v2.0</title>
    <link rel="stylesheet" href="styles/main.css">

    <script async defer src="https://apis.google.com/js/api.js"></script>
    <script async defer src="https://accounts.google.com/gsi/client"></script>
</head>

<body class="state-loading">

    <div class="main-content">

        <header class="header">

            <div class="connected-button-group-square main-tabs requires-auth" role="group" aria-label="–°—É—Ç–Ω–æ—Å—Ç—ñ">
                <button class="segment tab-button tab-link active" data-entity="categories">
                    <div class="state-layer"><span class="label">–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó</span></div>
                </button>
                <button class="segment tab-button tab-link" data-entity="characteristics">
                    <div class="state-layer"><span class="label">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</span></div>
                </button>
                <button class="segment tab-button tab-link" data-entity="options">
                    <div class="state-layer"><span class="label">–û–ø—Ü—ñ—ó</span></div>
                </button>
                <button class="segment tab-button tab-link" data-entity="brands">
                    <div class="state-layer"><span class="label">–ë—Ä–µ–Ω–¥–∏</span></div>
                </button>
            </div>

            <div class="search-bar requires-auth">
                <div class="state-layer">
                    <div class="content">
                        <input type="search" id="search-input" class="search-input" placeholder="–ü–æ—à—É–∫...">
                    </div>
                     <button class="trailing-icon" aria-label="Search">
                         <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 0 24 24" width="24px" fill="currentColor"><path d="M0 0h24v24H0z" fill="none"/><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/></svg>
                    </button>
                </div>
            </div>


            <div class="xr-toolbar">
                <div class="toolbar">
                    
                     <button id="refresh-btn" class="toolbar-button requires-auth" title="–û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ">
                        <div class="state-layer">
                            <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 0 24 24" width="24px" fill="currentColor"><path d="M0 0h24v24H0z" fill="none"/><path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"/></svg>
                        </div>
                    </button>

                    <button id="admin-panel-btn" class="toolbar-button requires-auth" title="–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å">
                        <div class="state-layer">
                            <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 0 24 24" width="24px" fill="currentColor"><path d="M0 0h24v24H0z" fill="none"/><path d="M19.43 12.98c.04-.32.07-.64.07-.98s-.03-.66-.07-.98l2.11-1.65c.19-.15.24-.42.12-.64l-2-3.46c-.12-.22-.39-.3-.61-.22l-2.49 1c-.52-.4-1.08-.73-1.69-.98l-.38-2.65C14.46 2.18 14.25 2 14 2h-4c-.25 0-.46.18-.49.42l-.38 2.65c-.61.25-1.17.59-1.69.98l-2.49-1c-.23-.09-.49 0-.61.22l-2 3.46c-.13.22-.07.49.12.64l2.11 1.65c-.04.32-.07.65-.07.98s.03.66.07.98l-2.11 1.65c-.19.15-.24.42-.12.64l2 3.46c.12.22.39.3.61.22l2.49-1c.52.4 1.08.73 1.69.98l.38 2.65c.03.24.24.42.49.42h4c.25 0 .46-.18.49-.42l.38-2.65c.61-.25 1.17-.59 1.69-.98l2.49 1c.23.09.49 0 .61-.22l2-3.46c.12-.22.07-.49-.12-.64l-2.11-1.65zM12 15.5c-1.93 0-3.5-1.57-3.5-3.5s1.57-3.5 3.5-3.5 3.5 1.57 3.5 3.5-1.57 3.5-3.5 3.5z"/></svg>
                        </div>
                    </button>

                    <div id="gsi-button-container" class="requires-unauth">
                        </div>

                    <button id="sign-out-btn" class="toolbar-button requires-auth" title="–í–∏–π—Ç–∏">
                        <div class="state-layer">
                             <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 0 24 24" width="24px" fill="currentColor"><path d="M0 0h24v24H0z" fill="none"/><path d="M17 7l-1.41 1.41L18.17 11H8v2h10.17l-2.58 2.58L17 17l5-5zM4 5h8V3H4c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h8v-2H4V5z"/></svg>
                        </div>
                    </button>
                </div>
            </div>

             <div id="app-loader" class="progress-bar indeterminate" style="display: none;">
                <div class="progress-bar-track"></div>
                <div class="progress-bar-fill"></div>
           </div>
        </header>

        <main id="main-interface" class="requires-auth">
            
            <div class="tab-content-header">
                <div class="header-actions">
                    <button id="add-btn" class="button button-filled">‚ûï –î–æ–¥–∞—Ç–∏</button>
                    <button id="merge-btn" class="button button-tonal" disabled>üîÑ –û–±'—î–¥–Ω–∞—Ç–∏</button>
                    <button id="delete-btn" class="button button-outlined" disabled>üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏</button>
                </div>
                <div class="header-actions-cell">
                     <span id="selection-counter" class="selection-info">–í–∏–±—Ä–∞–Ω–æ: 0</span>
                </div>
            </div>

            <div id="table-container" class="table-container">
                </div>

            <div class="pagination-controls">
                <button id="prev-page-btn" class="button button-text" disabled>‚óÄ –ü–æ–ø–µ—Ä–µ–¥–Ω—è</button>
                <span id="page-info">–°—Ç–æ—Ä—ñ–Ω–∫–∞ 1 –∑ 1</span>
                <button id="next-page-btn" class="button button-text" disabled>–ù–∞—Å—Ç—É–ø–Ω–∞ ‚ñ∂</button>
                
                <div class="pagination-size-selector">
                    <label for="page-size-select">–ü–æ–∫–∞–∑—É–≤–∞—Ç–∏:</label>
                    <select id="page-size-select" class="select-dropdown">
                        <option value="25">25</option>
                        <option value="50" selected>50</option>
                        <option value="100">100</option>
                        <option value="500">500</option>
                    </select>
                </div>
            </div>

        </main>

    </div>

    <script type="module" src="scripts/main.js"></script>
</body>
</html>
<div class="modal-content admin-modal">
    <div class="modal-header">
        <h2>–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó</h2>
        <button class="modal-close">&times;</button>
    </div>
    <div class="modal-body">
        <div class="admin-tabs">
            <button class="admin-tab-link active" data-tab="marketplaces">–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∏</button>
            <button class="admin-tab-link" data-tab="fields">–ü–æ–ª—è –ü—Ä–∏–≤'—è–∑–æ–∫</button>
        </div>

        <!-- –í–º—ñ—Å—Ç –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∏" -->
        <div id="tab-marketplaces" class="admin-tab-content active">
            <div class="config-status" id="marketplaces-status">–Ñ –Ω–µ–∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∑–º—ñ–Ω–∏.</div>
            <div class="admin-table-container">
                <table class="admin-table" id="marketplaces-table">
                    <thead>
                        <tr>
                            <th>ID –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—É*</th>
                            <th>–ù–∞–∑–≤–∞ –¥–ª—è –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è*</th>
                            <th>–Ü–∫–æ–Ω–∫–∞ (SVG)</th>
                            <th>–û—Å–Ω–æ–≤–Ω–∏–π –ö–æ–ª—ñ—Ä</th>
                            <th class="action-cell">–î—ñ—ó</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- –†—è–¥–∫–∏ –≥–µ–Ω–µ—Ä—É—é—Ç—å—Å—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ -->
                    </tbody>
                </table>
            </div>
            <button id="add-marketplace-btn" class="btn-secondary">–î–æ–¥–∞—Ç–∏ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å</button>
        </div>

        <!-- –í–º—ñ—Å—Ç –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–ü–æ–ª—è –ü—Ä–∏–≤'—è–∑–æ–∫" -->
        <div id="tab-fields" class="admin-tab-content">
            <div class="config-status" id="fields-status">–Ñ –Ω–µ–∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∑–º—ñ–Ω–∏.</div>
            <div class="admin-table-container">
                <table class="admin-table" id="fields-table">
                    <thead>
                        <tr>
                            <th>ID –ü–æ–ª—è*</th>
                            <th>–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å*</th>
                            <th>–°—É—Ç–Ω—ñ—Å—Ç—å*</th>
                            <th>–ö–ª—é—á –ü–æ–ª—è*</th>
                            <th>–ù–∞–∑–≤–∞ –¥–ª—è –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è*</th>
                            <th>–¢–∏–ø –ü–æ–ª—è*</th>
                            <th>–î–∂–µ—Ä–µ–ª–æ –û–ø—Ü—ñ–π</th>
                            <th>–î–æ–∑–≤–æ–ª–∏—Ç–∏ –ú–Ω–æ–∂–∏–Ω–Ω—ñ</th>
                            <th class="action-cell">–î—ñ—ó</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- –†—è–¥–∫–∏ –≥–µ–Ω–µ—Ä—É—é—Ç—å—Å—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ -->
                    </tbody>
                </table>
            </div>
            <button id="add-field-btn" class="btn-secondary">–î–æ–¥–∞—Ç–∏ –ü–æ–ª–µ</button>
        </div>
    </div>
    <div class="modal-footer">
        <button data-action="cancel" class="btn-secondary">–°–∫–∞—Å—É–≤–∞—Ç–∏</button>
        <button id="save-admin-config-btn" class="btn-primary" disabled>–ó–±–µ—Ä–µ–≥—Ç–∏ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é</button>
    </div>
</div>
<div class="modal-content">
    <div class="modal-header">
        <h2 id="brand-form-title">–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ë—Ä–µ–Ω–¥—É</h2>
        <button class="modal-close">&times;</button>
    </div>
    <div class="modal-body">
        <form id="brand-form">
            <input type="hidden" id="brand-rowIndex" name="_rowIndex">

            <div class="form-container">
                <div class="form-section">
                    <h3>–ï—Ç–∞–ª–æ–Ω–Ω—ñ –î–∞–Ω—ñ</h3>
                    
                    <div class="form-group">
                        <label for="brand-brand_id">ID –ë—Ä–µ–Ω–¥—É*</label>
                        <input type="text" id="brand-brand_id" name="brand_id" required placeholder="–ù–∞–ø—Ä. apple">
                    </div>

                    <div class="form-group">
                        <label for="brand-name">–ù–∞–∑–≤–∞*</label>
                        <input type="text" id="brand-name" name="name" required placeholder="–ù–∞–ø—Ä. Apple">
                    </div>
                </div>

                <div class="form-section form-section-mappings">
                    <h3>–ü—Ä–∏–≤'—è–∑–∫–∏ –¥–æ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ñ–≤</h3>
                    <div id="brand-mappings-container">
                        </div>
                </div>
            </div>
        </form>
    </div>
    <div class="modal-footer">
        <button data-action="cancel" class="btn-secondary">–°–∫–∞—Å—É–≤–∞—Ç–∏</button>
        <button id="save-brand-btn" class="btn-primary" type="submit" form="brand-form">–ó–±–µ—Ä–µ–≥—Ç–∏</button>
    </div>
</div>
<div class="modal-content">
    <div class="modal-header">
        <h2 id="category-form-title">–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó</h2>
        <button class="modal-close">&times;</button>
    </div>
    <div class="modal-body">
        <form id="category-form">
            <input type="hidden" id="category-rowIndex" name="_rowIndex">

            <div class="form-container">
                <div class="form-section">
                    <h3>–ï—Ç–∞–ª–æ–Ω–Ω—ñ –î–∞–Ω—ñ</h3>
                    
                    <div class="form-group">
                        <label for="category-local_id">–õ–æ–∫–∞–ª—å–Ω–∏–π ID*</label>
                        <input type="text" id="category-local_id" name="local_id" required placeholder="–£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä">
                    </div>

                    <div class="form-group">
                        <label for="category-name_uk">–ù–∞–∑–≤–∞ (–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞)*</label>
                        <input type="text" id="category-name_uk" name="name_uk" required>
                    </div>

                    <div class="form-group">
                        <label for="category-name_ru">–ù–∞–∑–≤–∞ (–†–æ—Å—ñ–π—Å—å–∫–∞)</label>
                        <input type="text" id="category-name_ru" name="name_ru">
                    </div>

                    <div class="form-group">
                        <label for="category-parent_local_id">–ë–∞—Ç—å–∫—ñ–≤—Å—å–∫–∞ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è</label>
                        <select id="category-parent_local_id" name="parent_local_id">
                            <option value="">-- –ö–æ—Ä–µ–Ω–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è --</option>
                            </select>
                    </div>

                    <div class="form-group">
                        <label for="category-category_type">–¢–∏–ø –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó</label>
                        <input type="text" id="category-category_type" name="category_type" placeholder="–ù–∞–ø—Ä. –¢–æ–≤–∞—Ä–Ω–∞">
                    </div>
                </div>

                <div class="form-section form-section-mappings">
                    <h3>–ü—Ä–∏–≤'—è–∑–∫–∏ –¥–æ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ñ–≤</h3>
                    <div id="category-mappings-container">
                        </div>
                </div>
            </div>
        </form>
    </div>
    <div class="modal-footer">
        <button data-action="cancel" class="btn-secondary">–°–∫–∞—Å—É–≤–∞—Ç–∏</button>
        <button id="save-category-btn" class="btn-primary" type="submit" form="category-form">–ó–±–µ—Ä–µ–≥—Ç–∏</button>
    </div>
</div>
<div class="modal-content">
    <div class="modal-header">
        <h2 id="characteristic-form-title">–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h2>
        <button class="modal-close">&times;</button>
    </div>
    <div class="modal-body">
        <form id="characteristic-form">
            <input type="hidden" id="characteristic-rowIndex" name="_rowIndex">

            <div class="form-container">
                <div class="form-section">
                    <h3>–ï—Ç–∞–ª–æ–Ω–Ω—ñ –î–∞–Ω—ñ</h3>
                    
                    <div class="form-group">
                        <label for="characteristic-local_id">–õ–æ–∫–∞–ª—å–Ω–∏–π ID*</label>
                        <input type="text" id="characteristic-local_id" name="local_id" required>
                    </div>

                    <div class="form-group">
                        <label for="characteristic-name_uk">–ù–∞–∑–≤–∞ (–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞)*</label>
                        <input type="text" id="characteristic-name_uk" name="name_uk" required>
                    </div>

                    <div class="form-group">
                        <label for="characteristic-name_ru">–ù–∞–∑–≤–∞ (–†–æ—Å—ñ–π—Å—å–∫–∞)</label>
                        <input type="text" id="characteristic-name_ru" name="name_ru">
                    </div>

                    <div class="form-group">
                        <label for="characteristic-category_local_ids">–ü—Ä–∏–≤'—è–∑–∫–∞ –¥–æ –ö–∞—Ç–µ–≥–æ—Ä—ñ–π (IDs —á–µ—Ä–µ–∑ –∫–æ–º—É)</label>
                        <textarea id="characteristic-category_local_ids" name="category_local_ids" rows="3" placeholder="cat_123, cat_456"></textarea>
                        </div>

                    <div class="form-group boolean-group">
                        <input type="checkbox" id="characteristic-is_global" name="is_global">
                        <label for="characteristic-is_global">–ì–ª–æ–±–∞–ª—å–Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞</label>
                    </div>

                    <div class="form-group">
                        <label for="characteristic-param_type">–¢–∏–ø –ü–∞—Ä–∞–º–µ—Ç—Ä—É</label>
                        <input type="text" id="characteristic-param_type" name="param_type">
                    </div>

                    <div class="form-group">
                        <label for="characteristic-unit">–û–¥–∏–Ω–∏—Ü—è –í–∏–º—ñ—Ä—É</label>
                        <input type="text" id="characteristic-unit" name="unit">
                    </div>

                    <div class="form-group">
                        <label for="characteristic-filter_type">–¢–∏–ø –§—ñ–ª—å—Ç—Ä—É</label>
                        <input type="text" id="characteristic-filter_type" name="filter_type">
                    </div>
                    
                    <div class="form-group">
                        <label for="characteristic-notes">–ù–æ—Ç–∞—Ç–∫–∏</label>
                        <textarea id="characteristic-notes" name="notes" rows="2"></textarea>
                    </div>

                </div>

                <div class="form-section form-section-mappings">
                    <h3>–ü—Ä–∏–≤'—è–∑–∫–∏ –¥–æ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ñ–≤</h3>
                    <div id="characteristic-mappings-container">
                        </div>
                </div>
            </div>
        </form>
    </div>
    <div class="modal-footer">
        <button data-action="cancel" class="btn-secondary">–°–∫–∞—Å—É–≤–∞—Ç–∏</button>
        <button id="save-characteristic-btn" class="btn-primary" type="submit" form="characteristic-form">–ó–±–µ—Ä–µ–≥—Ç–∏</button>
    </div>
</div>
<div class="modal-content" style="width: 500px;">
    <div class="modal-header">
        <h2>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –í–∏–¥–∞–ª–µ–Ω–Ω—è</h2>
        <button class="modal-close">&times;</button>
    </div>
    <div class="modal-body">
        <p id="delete-confirmation-message">–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤–∏–±—Ä–∞–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏?</p>
        <p><strong>–¶—é –¥—ñ—é –Ω–µ–º–æ–∂–ª–∏–≤–æ —Å–∫–∞—Å—É–≤–∞—Ç–∏.</strong> –í—Å—ñ –ø–æ–≤'—è–∑–∞–Ω—ñ –ø—Ä–∏–≤'—è–∑–∫–∏ —Ç–∞–∫–æ–∂ –±—É–¥—É—Ç—å –≤–∏–¥–∞–ª–µ–Ω—ñ.</p>
    </div>
    <div class="connected-button-group-round modal-footer" role="group">
        <button data-action="cancel" class="segment" aria-label="–°–∫–∞—Å—É–≤–∞—Ç–∏">
            <div class="state-layer"><span class="label">–°–∫–∞—Å—É–≤–∞—Ç–∏</span></div>
        </button>
        <button id="confirm-delete-btn" class="segment" aria-label="–í–∏–¥–∞–ª–∏—Ç–∏" disabled>
            <div class="state-layer"><span class="label">–í–∏–¥–∞–ª–∏—Ç–∏</span></div>
        </button>
    </div>
</div>
<div class="modal-content" style="width: 800px;">
    <div class="modal-header">
        <h2 id="merge-form-title">–û–±'—î–¥–Ω–∞–Ω–Ω—è –ï–ª–µ–º–µ–Ω—Ç—ñ–≤</h2>
        <button class="modal-close">&times;</button>
    </div>
    <div class="modal-body">
        <p>–í–∏–±—Ä–∞–Ω–æ <strong id="merge-count">0</strong> –µ–ª–µ–º–µ–Ω—Ç—ñ–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –µ–ª–µ–º–µ–Ω—Ç, —è–∫–∏–π —Å—Ç–∞–Ω–µ **–ï—Ç–∞–ª–æ–Ω–Ω–∏–º** (Master). –í—Å—ñ —ñ–Ω—à—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –±—É–¥—É—Ç—å –æ–±'—î–¥–Ω–∞–Ω—ñ –∑ –Ω–∏–º —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω—ñ.</p>
        
        <div class="merge-table-container">
            <table class="admin-table merge-table" id="merge-selection-table">
                <thead>
                    <tr>
                        <th style="width: 100px; text-align: center;">–ï—Ç–∞–ª–æ–Ω?</th>
                        <th>ID</th>
                        <th>–ù–∞–∑–≤–∞</th>
                        <th>–î–µ—Ç–∞–ª—ñ</th>
                    </tr>
                </thead>
                <tbody>
                    </tbody>
            </table>
        </div>
        
        <div class="merge-warning">
            <h4>–©–æ –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è:</h4>
            <ul>
                <li>–í—Å—ñ –ø–æ–≤'—è–∑–∞–Ω—ñ —Å—É—Ç–Ω–æ—Å—Ç—ñ (–Ω–∞–ø—Ä., –¥–æ—á—ñ—Ä–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó, –æ–ø—Ü—ñ—ó) –±—É–¥—É—Ç—å –ø–µ—Ä–µ–ø—Ä–∏–≤'—è–∑–∞–Ω—ñ –¥–æ –ï—Ç–∞–ª–æ–Ω—É.</li>
                <li>–ü—Ä–∏–≤'—è–∑–∫–∏ (Mappings) –±—É–¥—É—Ç—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ñ –¥–æ –ï—Ç–∞–ª–æ–Ω—É. –Ø–∫—â–æ —î –∫–æ–Ω—Ñ–ª—ñ–∫—Ç (–ï—Ç–∞–ª–æ–Ω –≤–∂–µ –º–∞—î –ø—Ä–∏–≤'—è–∑–∫—É –¥–æ —Ü—å–æ–≥–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—É), –¥–∞–Ω—ñ –ï—Ç–∞–ª–æ–Ω—É –º–∞—é—Ç—å –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç.</li>
                <li>–î—É–±–ª—ñ–∫–∞—Ç–∏ –±—É–¥—É—Ç—å –æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∏–¥–∞–ª–µ–Ω—ñ. <strong>–¶—è –¥—ñ—è –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω–∞.</strong></li>
            </ul>
        </div>

    </div>
    <div class="modal-footer">
        <button data-action="cancel" class="btn-secondary">–°–∫–∞—Å—É–≤–∞—Ç–∏</button>
        <button id="confirm-merge-btn" class="btn-primary" disabled>–í–∏–∫–æ–Ω–∞—Ç–∏ –û–±'—î–¥–Ω–∞–Ω–Ω—è</button>
    </div>
</div>
<div class="modal-content">
    <div class="modal-header">
        <h2 id="option-form-title">–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –û–ø—Ü—ñ—ó</h2>
        <button class="modal-close">&times;</button>
    </div>
    <div class="modal-body">
        <form id="option-form">
            <input type="hidden" id="option-rowIndex" name="_rowIndex">

            <div class="form-container">
                <div class="form-section">
                    <h3>–ï—Ç–∞–ª–æ–Ω–Ω—ñ –î–∞–Ω—ñ</h3>
                    
                    <div class="form-group">
                        <label for="option-local_id">–õ–æ–∫–∞–ª—å–Ω–∏–π ID*</label>
                        <input type="text" id="option-local_id" name="local_id" required>
                    </div>

                    <div class="form-group">
                        <label for="option-char_local_id">–ë–∞—Ç—å–∫—ñ–≤—Å—å–∫–∞ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ (ID)*</label>
                        <input type="text" id="option-char_local_id" name="char_local_id" required placeholder="–ù–∞–ø—Ä. char_123">
                        </div>

                    <div class="form-group">
                        <label for="option-name_uk">–ó–Ω–∞—á–µ–Ω–Ω—è (–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞)*</label>
                        <input type="text" id="option-name_uk" name="name_uk" required>
                    </div>

                    <div class="form-group">
                        <label for="option-name_ru">–ó–Ω–∞—á–µ–Ω–Ω—è (–†–æ—Å—ñ–π—Å—å–∫–∞)</label>
                        <input type="text" id="option-name_ru" name="name_ru">
                    </div>
                </div>

                <div class="form-section form-section-mappings">
                    <h3>–ü—Ä–∏–≤'—è–∑–∫–∏ –¥–æ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ñ–≤</h3>
                    <div id="option-mappings-container">
                        </div>
                </div>
            </div>
        </form>
    </div>
    <div class="modal-footer">
        <button data-action="cancel" class="btn-secondary">–°–∫–∞—Å—É–≤–∞—Ç–∏</button>
        <button id="save-option-btn" class="btn-primary" type="submit" form="option-form">–ó–±–µ—Ä–µ–≥—Ç–∏</button>
    </div>
</div>
/**
 * scripts/main.js
 * 
 * –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É –¥–æ–¥–∞—Ç–∫—É. (–û–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –Ω–æ–≤–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ UI —Ç–∞ —Å—Ç–∞–Ω—É)
 */

// –Ü–º–ø–æ—Ä—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É
import { initAuth, isGapiReady } from './api/auth.js';
import { initMarketplaceEngine } from './config/marketplaceEngine.js';
import { showAdminPanel } from './components/adminPanel.js';
import { initTabs } from './components/tabs.js';
// (–ü—É–Ω–∫—Ç 5) –û–Ω–æ–≤–ª—é—î–º–æ —ñ–º–ø–æ—Ä—Ç table.js –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
import { renderActiveTable, refreshActiveTable, initializeTableCaches } from './components/table.js';
import { initPagination } from './features/pagination.js';
import { initModalTriggers } from './modals/modalManager.js';
import { initDeleteAction } from './actions/delete.js';
import { initMergeAction } from './actions/merge.js';
import { initSearch } from './features/search.js'; // (–ü—É–Ω–∫—Ç 9)


/**
 * –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–æ–¥–∞—Ç–∫—É.
 */
async function initializeApp() {
    console.log("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—É...");
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω 'loading'.
    setAppState('loading');

    try {
        // 1. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Google Auth —Ç–∞ GAPI
        // initAuth –Ω–∞–ª–∞—à—Ç—É—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≤—Ö–æ–¥—É/–≤–∏—Ö–æ–¥—É.
        await initAuth();
        
        // –ß–µ–∫–∞—î–º–æ —Å–∏–≥–Ω–∞–ª—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ (—É—Å–ø—ñ—à–Ω–æ–≥–æ –≤—Ö–æ–¥—É –∞–±–æ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–æ–∫–µ–Ω—É).
        // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å–∫–∞—Å—É—î –≤—Ö—ñ–¥, —Å–ø—Ä–∞—Ü—é—î catch –Ω–∏–∂—á–µ.
        await isGapiReady();

        console.log("Google API —Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –≥–æ—Ç–æ–≤—ñ.");
        
        // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        setLoadingState(true);

        // 2. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è "–†—É—à—ñ—è –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ñ–≤"
        await initMarketplaceEngine(false); 
        console.log("–†—É—à—ñ–π –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ñ–≤ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.");

        // 3. (–ü—É–Ω–∫—Ç 2, 5) –ü–æ–ø–µ—Ä–µ–¥–Ω—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –∫–µ—à—É–≤–∞–Ω–Ω—è —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó ID
        await initializeTableCaches();
        console.log("–ö–µ—à—ñ –¥–∞–Ω–∏—Ö —Ç–∞ ID –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.");

        // 4. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ UI —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É
        initTabs();
        // –ü–µ—Ä–µ–¥–∞—î–º–æ –∫–æ–ª–±–µ–∫ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É –≤ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é —Ç–∞ –ø–æ—à—É–∫ (false = –Ω–µ –ø—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è)
        const renderFromCache = () => renderActiveTable(false);
        initPagination(renderFromCache); 
        initSearch(renderFromCache); // (–ü—É–Ω–∫—Ç 9)
        initModalTriggers();
        initDeleteAction();
        initMergeAction();

        // 5. –ü–µ—Ä–≤–∏–Ω–Ω–∏–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –¥–∞–Ω—ñ)
        renderActiveTable(false);

        // 6. –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        setAppState('authenticated');
        initGlobalEventListeners();

    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–æ–¥–∞—Ç–∫—É:", error);
        
        if (error.message && (error.message.includes("popup_closed_by_user") || error.message.includes("access_denied"))) {
            console.log("–í—Ö—ñ–¥ —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.");
            // –°—Ç–∞–Ω 'unauthenticated' –ø–æ–∫–∞–∂–µ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥—É –∑–∞–≤–¥—è–∫–∏ CSS.
            setAppState('unauthenticated');
        } else {
             setAppState('error');
             alert("–°—Ç–∞–ª–∞—Å—è –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Å–æ–ª—å.");
        }
    } finally {
        // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è, —è–∫—â–æ –≤—ñ–Ω —â–µ –∞–∫—Ç–∏–≤–Ω–∏–π
        setLoadingState(false);
    }
}

/**
 * (–û–ù–û–í–õ–ï–ù–û) –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –¥–æ–¥–∞—Ç–∫—É.
 * @param {string} state - –°—Ç–∞–Ω ('loading', 'unauthenticated', 'authenticated', 'error').
 */
export function setAppState(state) {
    console.log(`[App State] –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ —Å—Ç–∞–Ω—É: ${state}`);
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–ª–∞—Å –Ω–∞ body. –¶–µ –∫–µ—Ä—É—î –≤–∏–¥–∏–º—ñ—Å—Ç—é –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —á–µ—Ä–µ–∑ CSS.
    document.body.className = `state-${state}`;
}

/**
 * –ö–µ—Ä—É—î –≤–∏–¥–∏–º—ñ—Å—Ç—é –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ —Ö–µ–¥–µ—Ä—ñ.
 */
export function setLoadingState(isLoading) {
    const loader = document.getElementById('app-loader');
    if (loader) {
        loader.style.display = isLoading ? 'block' : 'none';
    }
}

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –≥–ª–æ–±–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π (—è–∫—ñ –Ω–µ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è –≤ —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—è—Ö).
 */
function initGlobalEventListeners() {
    // –ö–Ω–æ–ø–∫–∞ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
    document.getElementById('admin-panel-btn')?.addEventListener('click', showAdminPanel);

    // –ö–Ω–æ–ø–∫–∞ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö (Force Refresh)
    document.getElementById('refresh-btn')?.addEventListener('click', () => {
        console.log("–ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...");
        setLoadingState(true);
        
        // –ü—Ä–∏ –ø—Ä–∏–º—É—Å–æ–≤–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –º–∏ –æ–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ –∫–µ—à—ñ, –∞ –ø–æ—Ç—ñ–º —Ä–µ–Ω–¥–µ—Ä–∏–º–æ –∞–∫—Ç–∏–≤–Ω—É —Ç–∞–±–ª–∏—Ü—é
        initializeTableCaches(true).then(() => {
            return refreshActiveTable(true);
        }).finally(() => {
            setLoadingState(false);
        });
    });
}


// –ó–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫—É –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener('DOMContentLoaded', initializeApp);
/**
 * scripts/actions/delete.js
 * 
 * –õ–æ–≥—ñ–∫–∞ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤.
 */

import { getSelectedIds, clearSelection } from '../features/selection.js';
import { getActiveEntity } from '../components/tabs.js';
// –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —É–∑–∞–≥–∞–ª—å–Ω–µ–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
import { deleteEntities } from '../api/googleSheetService.js';
import { toastSuccess, toastError } from '../features/toast.js';
import { refreshActiveTable } from '../components/table.js';
import { showModal, closeModal, loadModalTemplate } from '../modals/modalManager.js';

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è.
 */
export function initDeleteAction() {
    const deleteButton = document.getElementById('delete-btn');
    if (deleteButton) {
        deleteButton.addEventListener('click', handleDeleteClick);
    }
}

async function handleDeleteClick() {
    const selectedIds = getSelectedIds();
    const entity = getActiveEntity();

    if (selectedIds.length === 0) return;

    const confirmed = await showDeleteConfirmation(selectedIds.length);

    if (confirmed) {
        await executeDeletion(entity, selectedIds);
    }
}

/**
 * –ü–æ–∫–∞–∑—É—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è. (–ù–µ–∑–º—ñ–Ω–Ω–æ)
 */
async function showDeleteConfirmation(count) {
    const template = await loadModalTemplate('delete-confirmation');
    
    return new Promise((resolve) => {
        showModal(template, (modalElement) => {
            const messageElement = modalElement.querySelector('#delete-confirmation-message');
            messageElement.textContent = `–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ ${count} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤?`;

            const confirmButton = modalElement.querySelector('#confirm-delete-btn');
            
            const handleConfirm = () => {
                resolve(true);
                closeModal();
            };

            const handleCancel = () => {
                 resolve(false);
            };
            
            confirmButton.addEventListener('click', handleConfirm, { once: true });
            
            // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –¥–ª—è –≤–∏—Ä—ñ—à–µ–Ω–Ω—è Promise
            modalElement.querySelectorAll('.modal-close, [data-action="cancel"]').forEach(button => {
                button.addEventListener('click', handleCancel, { once: true });
            });

             // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –Ω–∞ –∫–ª—ñ–∫ –ø–æ —Ñ–æ–Ω—É
             modalElement.addEventListener('click', (event) => {
                if (event.target === modalElement) {
                    handleCancel();
                }
            }, { once: true });
        });
    });
}

/**
 * –í–∏–∫–æ–Ω—É—î —Ñ–∞–∫—Ç–∏—á–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö.
 */
async function executeDeletion(entity, ids) {
    try {
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —É–∑–∞–≥–∞–ª—å–Ω–µ–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é deleteEntities –∑ GSS
        switch (entity) {
            case 'categories':
                await deleteEntities("Categories", ids, 'local_id', "CategoryMappings", "master_category_id");
                break;
            case 'characteristics':
                // TODO: –î–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É, —á–∏ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –≤ –û–ø—Ü—ñ—è—Ö –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º!
                await deleteEntities("Characteristics", ids, 'local_id', "CharacteristicMappings", "master_char_id");
                break;
            case 'options':
                await deleteEntities("Options", ids, 'local_id', "OptionMappings", "master_option_id");
                break;
            case 'brands':
                await deleteEntities("Brands", ids, 'brand_id', "BrandMappings", "master_brand_id");
                break;
            default:
                throw new Error(`–í–∏–¥–∞–ª–µ–Ω–Ω—è –¥–ª—è —Å—É—Ç–Ω–æ—Å—Ç—ñ ${entity} –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.`);
        }

        toastSuccess(`–£—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ ${ids.length} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤.`);
        clearSelection();
        // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é. forceRefresh=false, –æ—Å–∫—ñ–ª—å–∫–∏ GSS –≤–∂–µ –æ–Ω–æ–≤–∏–≤ –∫–µ—à –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ.
        refreshActiveTable(false); 

    } catch (error) {
        console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–¥–∞–ª–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑ ${entity}:`, error);
        toastError(`–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç–∏. ${error.message}`);
    }
}
/**
 * scripts/actions/merge.js
 * 
 * –õ–æ–≥—ñ–∫–∞ –¥–ª—è –æ–±'—î–¥–Ω–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ (UI —á–∞—Å—Ç–∏–Ω–∞).
 */

import { getSelectedIds, clearSelection } from '../features/selection.js';
import { getActiveEntity } from '../components/tabs.js';
import { toastError, toastSuccess, toastInfo } from '../features/toast.js';
import { refreshActiveTable, getUIDataCache } from '../components/table.js';
import { showModal, closeModal, loadModalTemplate } from '../modals/modalManager.js';
import { performEntityMerge } from '../api/googleSheetService.js';

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–±'—î–¥–Ω–∞–Ω–Ω—è.
 */
export function initMergeAction() {
    const mergeButton = document.getElementById('merge-btn');
    if (mergeButton) {
        mergeButton.addEventListener('click', handleMergeClick);
    }
}

async function handleMergeClick() {
    const selectedIds = getSelectedIds();
    const entity = getActiveEntity();

    if (selectedIds.length < 2) return;

    // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ –≤–∏–±—Ä–∞–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑ –∫–µ—à—É UI
    const uiCache = getUIDataCache();
    const dataCache = uiCache[entity];
    if (!dataCache) return;

    const idField = entity === 'brands' ? 'brand_id' : 'local_id';
    const selectedData = dataCache.filter(item => selectedIds.includes(item[idField]));

    if (selectedData.length !== selectedIds.length) {
        toastError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤—Å—ñ –≤–∏–±—Ä–∞–Ω—ñ –¥–∞–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é.");
        return;
    }

    // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –≤–∏–±–æ—Ä—É –µ—Ç–∞–ª–æ–Ω–∞
    showMergeModal(entity, selectedData, idField);
}

async function showMergeModal(entity, data, idField) {
    const template = await loadModalTemplate('merge-form');
    
    showModal(template, (modalElement) => {
        const titleElement = modalElement.querySelector('#merge-form-title');
        const countElement = modalElement.querySelector('#merge-count');
        const tbody = modalElement.querySelector('#merge-selection-table tbody');
        const confirmButton = modalElement.querySelector('#confirm-merge-btn');

        titleElement.textContent = `–û–±'—î–¥–Ω–∞–Ω–Ω—è (${entity})`;
        countElement.textContent = data.length;

        // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫—É –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        data.forEach(item => {
            const tr = document.createElement('tr');
            const nameField = item.name_uk || item.name || 'N/A';
            const details = getDetails(entity, item);
            
            tr.innerHTML = `
                <td style="text-align: center;">
                    <input type="radio" name="masterSelection" value="${escapeHTML(item[idField])}">
                </td>
                <td>${escapeHTML(item[idField])}</td>
                <td>${escapeHTML(nameField)}</td>
                <td>${escapeHTML(details)}</td>
            `;
            tbody.appendChild(tr);
        });

        // –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É Master (–∫–ª—ñ–∫–æ–º –ø–æ —Ä—è–¥–∫—É –∞–±–æ —Ä–∞–¥—ñ–æ –∫–Ω–æ–ø—Ü—ñ)
        tbody.addEventListener('click', (event) => {
            const tr = event.target.closest('tr');
            if (tr) {
                const radio = tr.querySelector('input[type="radio"]');
                if (radio) {
                    // –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ, —â–æ —Ä–∞–¥—ñ–æ –∫–Ω–æ–ø–∫–∞ –±—É–¥–µ –≤—ñ–¥–º—ñ—á–µ–Ω–∞, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –∫–ª—ñ–∫–Ω—É–ª–∏ –Ω–µ —Ç–æ—á–Ω–æ –ø–æ –Ω—ñ–π
                    if (!radio.checked) {
                        radio.checked = true;
                    }
                    confirmButton.disabled = false;
                }
            }
        });

        // –û–±—Ä–æ–±–Ω–∏–∫ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        confirmButton.addEventListener('click', async () => {
            const selectedMasterId = modalElement.querySelector('input[name="masterSelection"]:checked')?.value;
            if (!selectedMasterId) return;

            const idsToMerge = data.map(item => item[idField]).filter(id => id !== selectedMasterId);
            
            await executeMerge(entity, selectedMasterId, idsToMerge, confirmButton);
        });
    });
}

// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü—ñ –æ–±'—î–¥–Ω–∞–Ω–Ω—è
function getDetails(entity, item) {
    switch (entity) {
        case 'categories':
            return `–ë–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π ID: ${item.parent_local_id || '–ù–µ–º–∞—î'}`;
        case 'characteristics':
            return `–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó: ${item.category_local_ids || (item.is_global === 'TRUE' ? '–ì–ª–æ–±–∞–ª—å–Ω–∞' : '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}`;
        case 'options':
            return `–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ ID: ${item.char_local_id}`;
        default:
            return '';
    }
}

/**
 * –í–∏–∫–æ–Ω—É—î —Ñ–∞–∫—Ç–∏—á–Ω–µ –æ–±'—î–¥–Ω–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö.
 */
async function executeMerge(entity, masterId, idsToMerge, button) {
    console.log(`–ü–æ—á–∞—Ç–æ–∫ –æ–±'—î–¥–Ω–∞–Ω–Ω—è –≤ ${entity}. Master: ${masterId}. Merging: ${idsToMerge.join(', ')}`);
    
    button.disabled = true;
    button.textContent = '–û–±—Ä–æ–±–∫–∞...';
    toastInfo("–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –æ–±'—î–¥–Ω–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö. –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥...");

    try {
        // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Å–∫–ª–∞–¥–Ω—É –ª–æ–≥—ñ–∫—É –≤ GSS
        await performEntityMerge(entity, masterId, idsToMerge);

        toastSuccess(`–£—Å–ø—ñ—à–Ω–æ –æ–±'—î–¥–Ω–∞–Ω–æ ${idsToMerge.length} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤ ${masterId}. –î–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ.`);
        
        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è UI
        clearSelection();
        closeModal();
        // –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ, –æ—Å–∫—ñ–ª—å–∫–∏ GSS —ñ–Ω–≤–∞–ª—ñ–¥—É–≤–∞–≤ –∫–µ—à—ñ.
        refreshActiveTable(false); 

    } catch (error) {
        console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±'—î–¥–Ω–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤ ${entity}:`, error);
        // –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É –ø–æ–º–∏–ª–∫—É, –æ—Ç—Ä–∏–º–∞–Ω—É –∑ GSS (–Ω–∞–ø—Ä. –ø—Ä–æ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç –æ–ø—Ü—ñ–π –∞–±–æ —Ü–∏–∫–ª—ñ—á–Ω—É –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å)
        toastError(`–ü–æ–º–∏–ª–∫–∞ –æ–±'—î–¥–Ω–∞–Ω–Ω—è: ${error.message}`);
        
        // –£ –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏ –∫—Ä–∞—â–µ –∑–∞–∫—Ä–∏—Ç–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —Ç–∞ –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ, 
        // –æ—Å–∫—ñ–ª—å–∫–∏ —Å—Ç–∞–Ω –≤ Google Sheets –º–æ–∂–µ –±—É—Ç–∏ —á–∞—Å—Ç–∫–æ–≤–æ –∑–º—ñ–Ω–µ–Ω–∏–º (GSS —ñ–Ω–≤–∞–ª—ñ–¥—É–≤–∞–≤ –∫–µ—à—ñ).
        closeModal();
        refreshActiveTable(false);

    } finally {
        // –ö–Ω–æ–ø–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª—é—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —â–µ –≤—ñ–¥–∫—Ä–∏—Ç–µ (—â–æ –º–∞–ª–æ–π–º–æ–≤—ñ—Ä–Ω–æ —Ç—É—Ç)
        if (button && button.isConnected) {
            button.disabled = false;
            button.textContent = '–í–∏–∫–æ–Ω–∞—Ç–∏ –û–±\'—î–¥–Ω–∞–Ω–Ω—è';
        }
    }
}

// –£—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è –µ–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è HTML
function escapeHTML(str) {
    if (str === null || str === undefined) return '';
    return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#039;');
}
/**
 * scripts/api/auth.js
 * 
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é Google (GIS) —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é GAPI.
 * (–û–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –Ω–æ–≤–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ UI - –∫–Ω–æ–ø–∫–∏ –≤ —Ö–µ–¥–µ—Ä—ñ)
 */

// !!! –í–ê–ñ–õ–ò–í–û: –ó–∞–º—ñ–Ω—ñ—Ç—å —Ü—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ –≤–∞—à—ñ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ !!!
const CLIENT_ID = 'YOUR_GOOGLE_CLIENT_ID';
export const SPREADSHEET_ID = 'YOUR_GOOGLE_SPREADSHEET_ID';
// !!! -------------------------------------------------- !!!

const DISCOVERY_DOCS = ["https://sheets.googleapis.com/$discovery/rest?version=v4"];
const SCOPES = "https://www.googleapis.com/auth/spreadsheets";

// –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥—É (–≤–∏–∑–Ω–∞—á–µ–Ω–∏–π –≤ HTML —è–∫ requires-unauth)
const GSI_BUTTON_CONTAINER_ID = 'gsi-button-container';

let gapiReadyPromise = null;
let tokenClient = null;
let gapiInited = false;

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î Google API (GAPI) —Ç–∞ Google Identity Services (GIS).
 */
export async function initAuth() {
    console.log("[Auth] –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó GAPI —Ç–∞ GIS...");

    try {
        await Promise.all([
            loadGapiClient(),
            initializeGsiClient()
        ]);
        console.log("[Auth] GAPI —Ç–∞ GIS —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.");
        // –ü—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –Ω–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å
        setupButtonListeners();
        checkAuthStatus();
    } catch (error) {
        console.error("[Auth] –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Google Services:", error);
        throw new Error("–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ Google Services.");
    }
}

// (loadGapiClient —Ç–∞ initializeGsiClient –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –∫—Ä–æ–∫—ñ–≤)

async function loadGapiClient() {
    return new Promise((resolve, reject) => {
        const intervalId = setInterval(() => {
            if (window.gapi) {
                clearInterval(intervalId);
                gapi.load('client', async () => {
                    try {
                        await gapi.client.init({
                            discoveryDocs: DISCOVERY_DOCS,
                        });
                        gapiInited = true;
                        resolve();
                    } catch (error) {
                        reject(error);
                    }
                });
            }
        }, 100);
    });
}

async function initializeGsiClient() {
    return new Promise((resolve, reject) => {
        const intervalId = setInterval(() => {
            if (window.google && window.google.accounts) {
                clearInterval(intervalId);
                try {
                    tokenClient = google.accounts.oauth2.initTokenClient({
                        client_id: CLIENT_ID,
                        scope: SCOPES,
                        callback: (response) => {
                            handleGisCallback(response);
                        },
                    });
                    resolve();
                } catch (error) {
                    reject(error);
                }
            }
        }, 100);
    });
}


/**
 * –û–±—Ä–æ–±–ª—è—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GIS –ø—ñ—Å–ª—è –∑–∞–ø–∏—Ç—É —Ç–æ–∫–µ–Ω–∞.
 */
function handleGisCallback(response) {
    if (response.error !== undefined) {
        console.error("[Auth] –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É:", response.error);
        // –Ø–∫—â–æ —î –ø–æ–º–∏–ª–∫–∞, –≤—ñ–¥—Ö–∏–ª—è—î–º–æ Promise –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ. main.js –ø–µ—Ä–µ–≤–µ–¥–µ —Å—Ç–∞–Ω –≤ 'unauthenticated'.
        if (gapiReadyPromise && gapiReadyPromise.reject) {
            gapiReadyPromise.reject(new Error(response.error));
        }
        return;
    }
    console.log("[Auth] –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø—É –æ—Ç—Ä–∏–º–∞–Ω–æ.");
    // –Ø–∫—â–æ —Ç–æ–∫–µ–Ω –æ—Ç—Ä–∏–º–∞–Ω–æ, –≤–∏—Ä—ñ—à—É—î–º–æ Promise –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ. main.js –ø—Ä–æ–¥–æ–≤–∂–∏—Ç—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.
    if (gapiReadyPromise && gapiReadyPromise.resolve) {
        gapiReadyPromise.resolve();
    }
}

/**
 * (–û–ù–û–í–õ–ï–ù–û) –ù–∞–ª–∞—à—Ç–æ–≤—É—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –í—Ö—ñ–¥/–í–∏—Ö—ñ–¥.
 */
function setupButtonListeners() {
    const gsiButtonContainer = document.getElementById(GSI_BUTTON_CONTAINER_ID);

    // –†–µ–Ω–¥–µ—Ä–∏–º–æ –∫–Ω–æ–ø–∫—É –í—Ö–æ–¥—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, —è–∫—â–æ —ó—ó —Ç–∞–º —â–µ –Ω–µ–º–∞—î.
    // –í–∏–¥–∏–º—ñ—Å—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–µ—Ä—É—î—Ç—å—Å—è —á–µ—Ä–µ–∑ CSS (requires-unauth).
    if (gsiButtonContainer && gsiButtonContainer.children.length === 0) {
        const signInButton = document.createElement('button');
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–∞—à—ñ –∫–ª–∞—Å–∏ —Å—Ç–∏–ª—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, button button-filled –∞–±–æ toolbar-button)
        signInButton.className = 'button button-filled'; 
        signInButton.textContent = '–£–≤—ñ–π—Ç–∏ —á–µ—Ä–µ–∑ Google';
        signInButton.onclick = handleAuthClick;
        gsiButtonContainer.appendChild(signInButton);
    }

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –í–∏—Ö–æ–¥—É (–≤–æ–Ω–∞ –≤–∂–µ —î –≤ HTML, –∞–ª–µ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ requires-auth)
    const signOutButton = document.getElementById('sign-out-btn');
    if (signOutButton) {
        signOutButton.addEventListener('click', signOutAndReload);
    }
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ.
 */
function checkAuthStatus() {
    const token = gapi.client.getToken();

    if (token) {
        console.log("[Auth] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π.");
        if (gapiReadyPromise && gapiReadyPromise.resolve) {
            gapiReadyPromise.resolve();
        }
    } else {
        console.log("[Auth] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π.");
        // –Ø–∫—â–æ —Ç–æ–∫–µ–Ω—É –Ω–µ–º–∞—î, –∞ Promise —â–µ –Ω–µ –≤–∏—Ä—ñ—à–µ–Ω–æ/–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ, –º–∏ –≤—ñ–¥—Ö–∏–ª—è—î–º–æ –π–æ–≥–æ.
        if (gapiReadyPromise && gapiReadyPromise.reject) {
             // –ú–∏ –Ω–µ –≤–≤–∞–∂–∞—î–º–æ —Ü–µ –∫—Ä–∏—Ç–∏—á–Ω–æ—é –ø–æ–º–∏–ª–∫–æ—é, –ø—Ä–æ—Å—Ç–æ —ñ–Ω—Ñ–æ—Ä–º—É—î–º–æ main.js, —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ —á–µ–∫–∞—Ç–∏ –≤—Ö–æ–¥—É.
             // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω—ñ–∫–æ–ª–∏ –Ω–µ —É–≤—ñ–π–¥–µ, main.js –∑–∞–ª–∏—à–∏—Ç—å—Å—è –≤ —Å—Ç–∞–Ω—ñ 'unauthenticated'.
             // –û–¥–Ω–∞–∫, –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ flow –∫—Ä–∞—â–µ –Ω–µ –≤—ñ–¥—Ö–∏–ª—è—Ç–∏, –∞ —á–µ–∫–∞—Ç–∏ –¥—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
             // –Ø–∫—â–æ –º–∏ –≤—ñ–¥—Ö–∏–ª–∏–º–æ —Ç—É—Ç, main.js –ø–µ—Ä–µ–π–¥–µ –≤ catch —ñ –∑—É–ø–∏–Ω–∏—Ç—å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é.
        }
    }
}

/**
 * –û–±—Ä–æ–±–ª—è—î –∫–ª—ñ–∫ –ø–æ –∫–Ω–æ–ø—Ü—ñ –≤—Ö–æ–¥—É (–∑–∞–ø—É—Å–∫–∞—î OAuth2 flow).
 */
function handleAuthClick() {
    if (!tokenClient) {
        console.error("[Auth] Token Client –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.");
        return;
    }

    if (gapi.client.getToken() === null) {
        console.log("[Auth] –ó–∞–ø–∏—Ç –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω—É –¥–æ—Å—Ç—É–ø—É (consent)...");
        tokenClient.requestAccessToken({ prompt: 'consent' });
    } else {
        // –¶–µ –Ω–µ –ø–æ–≤–∏–Ω–Ω–æ —Å—Ç–∞—Ç–∏—Å—è, —è–∫—â–æ –∫–Ω–æ–ø–∫–∞ –≤–∏–¥–∏–º–∞, –∞–ª–µ –¥–ª—è –±–µ–∑–ø–µ–∫–∏
        console.log("[Auth] –ó–∞–ø–∏—Ç –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É...");
        tokenClient.requestAccessToken({ prompt: '' });
    }
}

/**
 * –í–∏–∫–æ–Ω—É—î –≤–∏—Ö—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å—Ç–æ—Ä—ñ–Ω–∫—É.
 */
function signOutAndReload() {
    signOut();
    // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –¥–æ–¥–∞—Ç–∫—É
    window.location.reload();
}

/**
 * –í–∏–∫–æ–Ω—É—î –≤–∏—Ö—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É).
 */
export function signOut() {
    const token = gapi.client.getToken();
    if (token !== null) {
        console.log("[Auth] –í–∏—Ö—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...");
        google.accounts.oauth2.revoke(token.access_token, () => {
            console.log('[Auth] –¢–æ–∫–µ–Ω —Å–∫–∞—Å–æ–≤–∞–Ω–æ.');
        });
        gapi.client.setToken(null);
        gapiReadyPromise = null; 
    }
}

/**
 * –ù–∞–¥–∞—î Promise, —è–∫–∏–π –≤–∏—Ä—ñ—à—É—î—Ç—å—Å—è, –∫–æ–ª–∏ GAPI –≥–æ—Ç–æ–≤–∏–π —Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π.
 */
export function isGapiReady() {
    // –Ø–∫—â–æ Promise —â–µ –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ.
    if (!gapiReadyPromise) {
        gapiReadyPromise = {};
        gapiReadyPromise.promise = new Promise((resolve, reject) => {
            gapiReadyPromise.resolve = resolve;
            gapiReadyPromise.reject = reject;
        });

        // –Ø–∫—â–æ GAPI –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —Ç–∞ —î —Ç–æ–∫–µ–Ω, –≤–∏—Ä—ñ—à—É—î–º–æ Promise –Ω–µ–≥–∞–π–Ω–æ
        if (gapiInited && gapi.client.getToken()) {
            gapiReadyPromise.resolve();
        }
    }
    // main.js —á–µ–∫–∞—Ç–∏–º–µ –Ω–∞ —Ü–µ–π Promise.
    return gapiReadyPromise.promise;
}
/**
 * scripts/api/googleSheetService.js
 * 
 * –®–∞—Ä –¥–æ—Å—Ç—É–ø—É –¥–æ –¥–∞–Ω–∏—Ö Google Sheets (CRUD + Merge Logic).
 */

import { SPREADSHEET_ID } from './auth.js';
import { toastError } from '../features/toast.js';
import { getConfig } from '../config/marketplaceEngine.js';


const cache = {};
const CACHE_DURATION = 5 * 60 * 1000; 
let sheetMetadataCache = null;


const HEADERS = {
    "Marketplaces": [
        "marketplace_id", "display_name", "icon_svg", "primary_color",
        "multi_map_categories", "multi_map_characteristics", "multi_map_options", "multi_map_brands"
    ],
    "MarketplaceFields": ["field_id", "marketplace_id", "entity_type", "field_key", "display_name", "field_type", "options_source", "allow_multiple"],
    "Categories": ["local_id", "parent_local_id", "name_uk", "name_ru", "category_type"],
    "Characteristics": ["local_id", "name_uk", "name_ru", "category_local_ids", "triggering_option_id", "param_type", "unit", "filter_type", "is_global", "notes"],
    "Options": ["local_id", "char_local_id", "name_uk", "name_ru"],
    "Brands": ["local_id", "name"],
};


// --- –ë–∞–∑–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è (–ù–µ–∑–º—ñ–Ω–Ω—ñ) ---

async function ensureGapiReady() {
    if (typeof gapi === 'undefined' || !gapi.client || !gapi.client.sheets) {
        throw new Error("GAPI –∫–ª—ñ—î–Ω—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.");
    }
    if (!gapi.client.getToken()) {
        throw new Error("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π.");
    }
}

async function getSheetMetadata(forceRefresh = false) {
    if (sheetMetadataCache && !forceRefresh) {
        return sheetMetadataCache;
    }
    try {
        await ensureGapiReady();
        const response = await gapi.client.sheets.spreadsheets.get({
            spreadsheetId: SPREADSHEET_ID,
            fields: "sheets.properties(sheetId,title)"
        });
        
        const metadata = {};
        response.result.sheets.forEach(sheet => {
            metadata[sheet.properties.title] = sheet.properties.sheetId;
        });
        sheetMetadataCache = metadata;
        return metadata;
    } catch (error) {
        handleGapiError(error, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–µ—Ç–∞–¥–∞–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ (Sheet IDs).");
        throw error;
    }
}

async function getSheetIdByName(sheetName) {
    const metadata = await getSheetMetadata();
    const sheetId = metadata[sheetName];
    if (sheetId === undefined) {
        throw new Error(`–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ ID –¥–ª—è –∞—Ä–∫—É—à–∞ "${sheetName}". –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–∑–≤—É.`);
    }
    return sheetId;
}


// --- –§—É–Ω–∫—Ü—ñ—ó –ß–∏—Ç–∞–Ω–Ω—è –î–∞–Ω–∏—Ö (GET) (–ù–µ–∑–º—ñ–Ω–Ω—ñ) ---

export async function getSheetData(sheetName, forceRefresh = false) {
    const cacheKey = `${SPREADSHEET_ID}:${sheetName}`;
    const now = Date.now();

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ timestamp !== 0, –æ—Å–∫—ñ–ª—å–∫–∏ —ñ–Ω–≤–∞–ª—ñ–¥–∞—Ü—ñ—è –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î –π–æ–≥–æ –≤ 0
    if (!forceRefresh && cache[cacheKey] && (now - cache[cacheKey].timestamp < CACHE_DURATION) && cache[cacheKey].timestamp !== 0) {
        return JSON.parse(JSON.stringify(cache[cacheKey].data));
    }

    try {
        await ensureGapiReady();
        console.log(`[GSS] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–≤—ñ–∂–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è: ${sheetName}`);

        const response = await gapi.client.sheets.spreadsheets.values.get({
            spreadsheetId: SPREADSHEET_ID,
            range: `${sheetName}!A:Z`,
        });

        const rows = response.result.values;
        const headers = rows && rows.length > 0 ? rows[0] : [];

        if (!rows || rows.length < 2) {
             const emptyData = [];
             cache[cacheKey] = { data: emptyData, headers: headers, timestamp: now };
             return emptyData;
        }

        const data = rows.slice(1).map((row, index) => {
            let obj = { _rowIndex: index + 2 };
            headers.forEach((header, i) => {
                obj[header] = row[i] || ""; 
            });
            return obj;
        });

        cache[cacheKey] = { data, headers, timestamp: now };
        return JSON.parse(JSON.stringify(data));

    } catch (error) {
        handleGapiError(error, `–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –∑ –∞—Ä–∫—É—à–∞ "${sheetName}".`);
        throw error;
    }
}

// --- –§—É–Ω–∫—Ü—ñ—ó –ó–∞–ø–∏—Å—É –î–∞–Ω–∏—Ö (CRUD Helpers) (–ù–µ–∑–º—ñ–Ω–Ω—ñ) ---
// ... (prepareValues, rewriteSheetContent, appendRow, updateRowByRowIndex, deleteRowsByIndexes)

function prepareValues(dataObject, headers) {
    return headers.map(header => {
        if (header.startsWith('_')) return "";
        const value = dataObject[header];
        return value !== undefined && value !== null ? String(value) : "";
    });
}

export async function rewriteSheetContent(sheetName, data, headersOverride = null) {
    const headers = headersOverride || HEADERS[sheetName];
    if (!headers) throw new Error(`–ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è ${sheetName} –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ.`);

    try {
        await ensureGapiReady();
        const values = data.map(item => prepareValues(item, headers));

        await gapi.client.sheets.spreadsheets.values.clear({
            spreadsheetId: SPREADSHEET_ID,
            range: `${sheetName}!A2:Z`,
        });

        if (values.length > 0) {
            await gapi.client.sheets.spreadsheets.values.update({
                spreadsheetId: SPREADSHEET_ID,
                range: `${sheetName}!A2`,
                valueInputOption: "USER_ENTERED",
                resource: { values: values }
            });
        }

        invalidateCache(sheetName);
    } catch (error) {
        handleGapiError(error, `–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç–∏ –¥–∞–Ω—ñ –≤ "${sheetName}".`);
        throw error;
    }
}

export async function appendRow(sheetName, dataObject, headers = null) {
    const effectiveHeaders = headers || HEADERS[sheetName];
    if (!effectiveHeaders) throw new Error(`–ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è ${sheetName} –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ.`);
    
    try {
        await ensureGapiReady();
        const values = prepareValues(dataObject, effectiveHeaders);

        const response = await gapi.client.sheets.spreadsheets.values.append({
            spreadsheetId: SPREADSHEET_ID,
            range: `${sheetName}!A1`,
            valueInputOption: "USER_ENTERED",
            insertDataOption: "INSERT_ROWS",
            resource: { values: [values] }
        });

        invalidateCache(sheetName);
        return response.result;
    } catch (error) {
        handleGapiError(error, `–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å –≤ "${sheetName}".`);
        throw error;
    }
}

export async function updateRowByRowIndex(sheetName, rowIndex, dataObject) {
    const headers = HEADERS[sheetName];
    if (!headers) throw new Error(`–ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è ${sheetName} –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ.`);
    if (!rowIndex || rowIndex < 2) throw new Error("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ä—è–¥–∫–∞ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.");

    try {
        await ensureGapiReady();
        const values = prepareValues(dataObject, headers);
        const range = `${sheetName}!A${rowIndex}`;

        const response = await gapi.client.sheets.spreadsheets.values.update({
            spreadsheetId: SPREADSHEET_ID,
            range: range,
            valueInputOption: "USER_ENTERED",
            resource: { values: [values] }
        });

        invalidateCache(sheetName);
        return response.result;
    } catch (error) {
        handleGapiError(error, `–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∑–∞–ø–∏—Å –≤ "${sheetName}".`);
        throw error;
    }
}

export async function deleteRowsByIndexes(sheetName, rowIndexes) {
    if (!rowIndexes || rowIndexes.length === 0) return;

    try {
        const sheetId = await getSheetIdByName(sheetName);

        const requests = [...rowIndexes]
            .sort((a, b) => b - a)
            .map(rowIndex => ({
                deleteDimension: {
                    range: {
                        sheetId: sheetId,
                        dimension: "ROWS",
                        startIndex: rowIndex - 1,
                        endIndex: rowIndex
                    }
                }
            }));

        await gapi.client.sheets.spreadsheets.batchUpdate({
            spreadsheetId: SPREADSHEET_ID,
            resource: { requests: requests }
        });

        invalidateCache(sheetName);
    } catch (error) {
        handleGapiError(error, `–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å–∏ –∑ "${sheetName}".`);
        throw error;
    }
}


// --- –°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó CRUD (–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ –õ–æ–≥—ñ–∫–∞) (–ù–µ–∑–º—ñ–Ω–Ω—ñ) ---

export async function saveEntity(sheetName, data, isEditing, idField = 'local_id') {
    if (!data[idField]) {
        throw new Error(`ID –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –¥–ª—è –∑–∞–ø–∏—Å—É –≤ ${sheetName}.`);
   }

    if (isEditing) {
        return await updateRowByRowIndex(sheetName, data._rowIndex, data);
    } else {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ ID (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º)
        const items = await getSheetData(sheetName, true); // Force refresh
        if (items.some(item => item[idField] === data[idField])) {
            throw new Error(`ID "${data[idField]}" –≤–∂–µ —ñ—Å–Ω—É—î –≤ ${sheetName}. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ (ID –º—ñ–≥ –±—É—Ç–∏ –∑–∞–π–Ω—è—Ç–∏–π).`);
        }
        return await appendRow(sheetName, data);
    }
}

export async function deleteEntities(sheetName, ids, idField = 'local_id', mappingSheetName = null, mappingIdColumn = null) {
    // 1. –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ–Ω–¥–µ–∫—Å–∏ —Ä—è–¥–∫—ñ–≤
    const items = await getSheetData(sheetName, true); // Force refresh
    const rowIndexes = items
        .filter(item => ids.includes(item[idField]))
        .map(item => item._rowIndex);

    if (rowIndexes.length > 0) {
        // 2. –í–∏–¥–∞–ª—è—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –∑–∞–ø–∏—Å–∏
        await deleteRowsByIndexes(sheetName, rowIndexes);
        
        // 3. –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤'—è–∑–∞–Ω—ñ –ø—Ä–∏–≤'—è–∑–∫–∏ (—è–∫—â–æ –≤–æ–Ω–∏ —î)
        if (mappingSheetName && mappingIdColumn) {
            await deleteMappingsByMasterIds(mappingSheetName, ids, mappingIdColumn);
        }
    }
}

// --- –°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó CRUD (–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –°—É—Ç–Ω–æ—Å—Ç—ñ) (–ù–µ–∑–º—ñ–Ω–Ω—ñ) ---

export const getCategories = (force) => getSheetData("Categories", force);
export const getCharacteristics = (force) => getSheetData("Characteristics", force);
export const getOptions = (force) => getSheetData("Options", force);
export const getBrands = (force) => getSheetData("Brands", force);


// --- –°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó (–ü—Ä–∏–≤'—è–∑–∫–∏) (–ù–µ–∑–º—ñ–Ω–Ω—ñ) ---
// ... (synchronizeMappingHeaders, getMappingsForEntity, saveMappings, deleteMappingsByMasterIds)

async function synchronizeMappingHeaders(sheetName, requiredHeadersSet, masterIdColumn) {
    try {
        // 1. –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑ –∞—Ä–∫—É—à–∞ (A1:Z1)
        const response = await gapi.client.sheets.spreadsheets.values.get({
            spreadsheetId: SPREADSHEET_ID,
            range: `${sheetName}!1:1`, // –û—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫
        });

        const currentHeaders = (response.result.values && response.result.values[0]) || [];
        const currentHeadersSet = new Set(currentHeaders);

        // 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –Ω–æ–≤—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        let headersChanged = false;
        requiredHeadersSet.forEach(header => {
            if (!currentHeadersSet.has(header)) {
                headersChanged = true;
            }
        });

        // 3. –§–æ—Ä–º—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
        const baseHeaders = ["mapping_id", masterIdColumn, "marketplace_id"];
        const mergedHeadersSet = new Set([...currentHeadersSet, ...requiredHeadersSet]);
        
        const otherHeaders = Array.from(mergedHeadersSet).filter(h => !baseHeaders.includes(h) && !h.startsWith('_')).sort();
        const finalHeaders = [...baseHeaders, ...otherHeaders];

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ä—è–¥–∫—É
        if (!headersChanged) {
            if (currentHeaders.length !== finalHeaders.length || !currentHeaders.every((val, index) => val === finalHeaders[index])) {
                headersChanged = true;
            }
        }

        if (!headersChanged) {
            return finalHeaders;
        }

        // 4. –û–Ω–æ–≤–ª—é—î–º–æ –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ –≤ Google Sheet
        console.log(`[GSS] –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –¥–ª—è ${sheetName}...`);
        
        await gapi.client.sheets.spreadsheets.values.update({
            spreadsheetId: SPREADSHEET_ID,
            range: `${sheetName}!A1`,
            valueInputOption: "USER_ENTERED",
            resource: { values: [finalHeaders] }
        });
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
        const cacheKey = `${SPREADSHEET_ID}:${sheetName}`;
        if (cache[cacheKey]) {
            cache[cacheKey].headers = finalHeaders;
        }
        
        return finalHeaders;

    } catch (error) {
        handleGapiError(error, `–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –≤ ${sheetName}.`);
        throw error;
    }
}


export async function getMappingsForEntity(sheetName, masterId, masterIdColumn) {
    const allMappings = await getSheetData(sheetName);
    return allMappings.filter(m => m[masterIdColumn] === masterId);
}

export async function saveMappings(sheetName, masterId, masterIdColumn, mappingsData) {
    // 1. –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –ø—Ä–∏–≤'—è–∑–∫–∏
    await deleteMappingsByMasterIds(sheetName, [masterId], masterIdColumn);

    // 2. –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
    if (mappingsData.length > 0) {
        const requiredHeaders = new Set();
        mappingsData.forEach(m => Object.keys(m).forEach(key => {
            if (!key.startsWith('_')) requiredHeaders.add(key);
        }));

        const finalHeaders = await synchronizeMappingHeaders(sheetName, requiredHeaders, masterIdColumn);

        // 3. –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –∑–∞–ø–∏—Å—É
        const values = mappingsData.map(mapping => {
            if (!mapping.mapping_id) {
                mapping.mapping_id = `map_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
            }
            mapping[masterIdColumn] = masterId;
            
            return prepareValues(mapping, finalHeaders);
        });

        // 4. –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ä—è–¥–∫—ñ–≤
        try {
            await gapi.client.sheets.spreadsheets.values.append({
                spreadsheetId: SPREADSHEET_ID,
                range: `${sheetName}!A1`,
                valueInputOption: "USER_ENTERED",
                insertDataOption: "INSERT_ROWS",
                resource: { values: values }
            });
        } catch (error) {
            handleGapiError(error, `–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø—Ä–∏–≤'—è–∑–æ–∫ –≤ ${sheetName}.`);
            throw error;
        }
    }

    // 5. –Ü–Ω–≤–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–µ—à—É
    invalidateCache(sheetName);
}

async function deleteMappingsByMasterIds(sheetName, masterIds, masterIdColumn) {
    // –û—Ç—Ä–∏–º—É—î–º–æ —Å–≤—ñ–∂—ñ –¥–∞–Ω—ñ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö —ñ–Ω–¥–µ–∫—Å—ñ–≤.
    const allMappings = await getSheetData(sheetName, true); 
    const rowIndexesToDelete = allMappings
        .filter(m => masterIds.includes(m[masterIdColumn]))
        .map(m => m._rowIndex);

    if (rowIndexesToDelete.length > 0) {
        await deleteRowsByIndexes(sheetName, rowIndexesToDelete);
    }
}


// =====================================================
// –õ–û–ì–Ü–ö–ê –û–ë'–Ñ–î–ù–ê–ù–ù–Ø (MERGE LOGIC) - –ö–†–û–ö 6
// =====================================================

/**
 * –í–∏–∫–æ–Ω—É—î —Å–∫–ª–∞–¥–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é –æ–±'—î–¥–Ω–∞–Ω–Ω—è —Å—É—Ç–Ω–æ—Å—Ç–µ–π.
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø–∞–∫–µ—Ç–Ω—ñ –∑–∞–ø–∏—Ç–∏ (BatchUpdate) –¥–ª—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç–∞ –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ.
 */
export async function performEntityMerge(entityType, masterId, idsToMerge) {
    if (!masterId || !idsToMerge || idsToMerge.length === 0) {
        throw new Error("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –æ–±'—î–¥–Ω–∞–Ω–Ω—è.");
    }

    const config = getEntityConfig(entityType);

    try {
        // –ö—Ä–æ–∫ 0: –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∞ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ü–æ—Å–∏–ª–∞–Ω—å
        const referenceUpdateRequests = await validateAndGenerateReferenceUpdates(entityType, masterId, idsToMerge);

        // –ö—Ä–æ–∫ 1: –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è –ü—Ä–∏–≤'—è–∑–æ–∫ (–ü—É–Ω–∫—Ç 11: –í—Ä–∞—Ö–æ–≤—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é Multi-Mapping)
        // –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ñ–≤ –∑ —Ä—É—à—ñ—è.
        const marketplaceConfig = getConfig().marketplaces;
        const mappingUpdateRequests = await generateMappingTransferRequests(config, masterId, idsToMerge, marketplaceConfig);

        // –ö—Ä–æ–∫ 2: –í–∏–∫–æ–Ω–∞–Ω–Ω—è –≤—Å—ñ—Ö –æ–Ω–æ–≤–ª–µ–Ω—å
        const allUpdateRequests = [...referenceUpdateRequests, ...mappingUpdateRequests];

        if (allUpdateRequests.length > 0) {
            console.log(`[GSS Merge] –í–∏–∫–æ–Ω–∞–Ω–Ω—è ${allUpdateRequests.length} –æ–Ω–æ–≤–ª–µ–Ω—å (UpdateCells) –≤ –ø–∞–∫–µ—Ç–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ...`);
            await gapi.client.sheets.spreadsheets.batchUpdate({
                spreadsheetId: SPREADSHEET_ID,
                resource: { requests: allUpdateRequests }
            });
        }

        // –ö—Ä–æ–∫ 3: –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
        console.log(`[GSS Merge] –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤...`);
        await deleteEntities(config.sheet, idsToMerge, config.idField, config.mappingSheet, config.mappingIdColumn);

        // –ö—Ä–æ–∫ 4: –Ü–Ω–≤–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–µ—à—ñ–≤
        invalidateCachesForMerge(entityType);

    } catch (error) {
        console.error(`[GSS Merge] –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±'—î–¥–Ω–∞–Ω–Ω—è ${entityType}:`, error);
        invalidateCachesForMerge(entityType);
        throw error;
    }
}

/**
 * –ö—Ä–æ–∫ 0: –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω—å (UpdateCellsRequest).
 */
async function validateAndGenerateReferenceUpdates(entityType, masterId, idsToMerge) {
    switch (entityType) {
        case 'categories':
            return await validateAndMergeCategoriesRefs(masterId, idsToMerge);
        case 'characteristics':
            return await validateAndMergeCharacteristicsRefs(masterId, idsToMerge);
        case 'options':
        case 'brands':
            return []; // –ù–µ–º–∞—î –ø–æ—Å–∏–ª–∞–Ω—å –≤ –ø–æ—Ç–æ—á–Ω—ñ–π —Å—Ö–µ–º—ñ
        default:
            throw new Error(`–û–±'—î–¥–Ω–∞–Ω–Ω—è –¥–ª—è —Å—É—Ç–Ω–æ—Å—Ç—ñ ${entityType} –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.`);
    }
}

// --- –õ–æ–≥—ñ–∫–∞ –í–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ç–∞ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ü–æ—Å–∏–ª–∞–Ω—å (–°–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∞ –¥–ª—è —Å—É—Ç–Ω–æ—Å—Ç–µ–π) ---

async function validateAndMergeCategoriesRefs(masterId, idsToMerge) {
    let requests = [];
    const categories = await getCategories(true);

    // 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ü–∏–∫–ª—ñ—á–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
    // –Ø–∫—â–æ –º–∞–π–±—É—Ç–Ω—ñ–π –±–∞—Ç—å–∫–æ (masterId) —î –Ω–∞—â–∞–¥–∫–æ–º –æ–¥–Ω–æ–≥–æ –∑ idsToMerge, —Ü–µ —Å—Ç–≤–æ—Ä–∏—Ç—å —Ü–∏–∫–ª.
    for (const sourceId of idsToMerge) {
        if (isDescendant(categories, masterId, sourceId)) {
            throw new Error(`–ù–µ–º–æ–∂–ª–∏–≤–æ –æ–±'—î–¥–Ω–∞—Ç–∏. –ö–∞—Ç–µ–≥–æ—Ä—ñ—è ID ${masterId} —î –¥–æ—á—ñ—Ä–Ω—å–æ—é –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó ID ${sourceId}. –¶–µ —Å—Ç–≤–æ—Ä–∏—Ç—å —Ü–∏–∫–ª—ñ—á–Ω—É –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å.`);
        }
    }
    
    // 2. –û–Ω–æ–≤–ª–µ–Ω–Ω—è parent_local_id –≤ Categories
    requests = requests.concat(
        await generateUpdateRequestsForField("Categories", "parent_local_id", masterId, idsToMerge)
    );

    // 3. –û–Ω–æ–≤–ª–µ–Ω–Ω—è category_local_ids –≤ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö (–º–∞—Å–∏–≤ –≤ –∫–æ–º—ñ—Ä—Ü—ñ)
    requests = requests.concat(
        await generateUpdateRequestsForArrayField("Characteristics", "category_local_ids", masterId, idsToMerge)
    );

    return requests;
}

// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ—î—Ä–∞—Ä—Ö—ñ—ó
function isDescendant(categories, childId, potentialAncestorId) {
    let currentId = childId;
    while (currentId) {
        const currentCat = categories.find(c => c.local_id === currentId);
        currentId = currentCat ? currentCat.parent_local_id : null;
        if (currentId === potentialAncestorId) return true;
    }
    return false;
}

async function validateAndMergeCharacteristicsRefs(masterId, idsToMerge) {
    const options = await getOptions(true);

    // 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ —ñ–º–µ–Ω –æ–ø—Ü—ñ–π
    // –Ø–∫—â–æ –æ–ø—Ü—ñ—è –∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫, —â–æ –æ–±'—î–¥–Ω—É—é—Ç—å—Å—è, –º–∞—î —Ç–∞–∫–µ –∂ —ñ–º'—è (UK), —è–∫ –æ–ø—Ü—ñ—è –≤ –µ—Ç–∞–ª–æ–Ω–Ω—ñ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏—Ü—ñ, –æ–±'—î–¥–Ω–∞–Ω–Ω—è –Ω–µ–º–æ–∂–ª–∏–≤–µ.
    const masterOptions = options.filter(opt => opt.char_local_id === masterId);
    const masterOptionNamesUK = new Set(masterOptions.map(opt => opt.name_uk.toLowerCase()));

    const conflictingOptions = options.filter(opt => 
        idsToMerge.includes(opt.char_local_id) && 
        masterOptionNamesUK.has(opt.name_uk.toLowerCase())
    );

    if (conflictingOptions.length > 0) {
        const names = conflictingOptions.map(opt => opt.name_uk).join(', ');
        throw new Error(`–ö–æ–Ω—Ñ–ª—ñ–∫—Ç —ñ–º–µ–Ω –æ–ø—Ü—ñ–π: "${names}". –û–ø—Ü—ñ—ó –∑ —Ç–∞–∫–∏–º–∏ —ñ–º–µ–Ω–∞–º–∏ –≤–∂–µ —ñ—Å–Ω—É—é—Ç—å –≤ –µ—Ç–∞–ª–æ–Ω–Ω—ñ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏—Ü—ñ ID ${masterId}. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –æ–±'—î–¥–Ω–∞–π—Ç–µ –∞–±–æ –ø–µ—Ä–µ–π–º–µ–Ω—É–π—Ç–µ —Ü—ñ –æ–ø—Ü—ñ—ó.`);
    }

    // 2. –û–Ω–æ–≤–ª–µ–Ω–Ω—è char_local_id –≤ –û–ø—Ü—ñ—è—Ö
    return await generateUpdateRequestsForField("Options", "char_local_id", masterId, idsToMerge);
}


// --- –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∏ –ó–∞–ø–∏—Ç—ñ–≤ BatchUpdate (–£—Ç–∏–ª—ñ—Ç–∏) ---

/**
 * –ì–µ–Ω–µ—Ä—É—î UpdateCellsRequest –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–ª—è (ID –∑–≤'—è–∑–∫—É).
 */
async function generateUpdateRequestsForField(targetSheetName, targetField, newValue, oldValues) {
    const requests = [];
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–≤—ñ–∂—ñ –¥–∞–Ω—ñ, —â–æ–± –º–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ —ñ–Ω–¥–µ–∫—Å–∏ —Ä—è–¥–∫—ñ–≤ (_rowIndex) —Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const data = await getSheetData(targetSheetName, true);
    const sheetId = await getSheetIdByName(targetSheetName);
    const headers = cache[`${SPREADSHEET_ID}:${targetSheetName}`]?.headers;
    const columnIndex = headers.indexOf(targetField);

    if (columnIndex === -1) return [];

    data.forEach(item => {
        if (oldValues.includes(item[targetField])) {
            // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∫–æ–º—ñ—Ä–∫–∏
            requests.push(createUpdateCellRequest(sheetId, item._rowIndex, columnIndex, newValue));
        }
    });
    return requests;
}

/**
 * –ì–µ–Ω–µ—Ä—É—î UpdateCellsRequest –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ª—è, —â–æ –º—ñ—Å—Ç–∏—Ç—å –º–∞—Å–∏–≤ ID (—á–µ—Ä–µ–∑ –∫–æ–º—É).
 */
async function generateUpdateRequestsForArrayField(targetSheetName, targetField, newValue, oldValues) {
    const requests = [];
    const data = await getSheetData(targetSheetName, true);
    const sheetId = await getSheetIdByName(targetSheetName);
    const headers = cache[`${SPREADSHEET_ID}:${targetSheetName}`]?.headers;
    const columnIndex = headers.indexOf(targetField);

    if (columnIndex === -1) return [];

    data.forEach(item => {
        const currentFieldValue = item[targetField];
        if (!currentFieldValue) return;

        const ids = currentFieldValue.split(',').map(id => id.trim()).filter(Boolean);
        let needsUpdate = false;
        const newIds = new Set(ids);

        oldValues.forEach(oldId => {
            if (newIds.has(oldId)) {
                needsUpdate = true;
                newIds.delete(oldId);
                newIds.add(newValue); // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π ID –∑–∞–º—ñ—Å—Ç—å —Å—Ç–∞—Ä–æ–≥–æ
            }
        });

        if (needsUpdate) {
            // –°–æ—Ä—Ç—É—î–º–æ –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ —Ç–∞ —Ñ–æ—Ä–º—É—î–º–æ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫
            const updatedValue = Array.from(newIds).sort().join(', ');
            requests.push(createUpdateCellRequest(sheetId, item._rowIndex, columnIndex, updatedValue));
        }
    });
    return requests;
}

/**
 * –ö—Ä–æ–∫ 1 (–ß–∞—Å—Ç–∏–Ω–∞ 2): –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è –ø—Ä–∏–≤'—è–∑–æ–∫ (UpdateCellsRequest).
 */
async function generateMappingTransferRequests(config, masterId, idsToMerge, marketplaceConfig) {
    if (!config.mappingSheet) return [];

    const allMappings = await getSheetData(config.mappingSheet, true);
    const sheetId = await getSheetIdByName(config.mappingSheet);
    const headers = cache[`${SPREADSHEET_ID}:${config.mappingSheet}`]?.headers;
    const columnIndex = headers.indexOf(config.mappingIdColumn);

    if (columnIndex === -1) throw new Error(`–ö–æ–ª–æ–Ω–∫–∞ ${config.mappingIdColumn} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.`);

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–ª—é—á –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó Multi-Map (–Ω–∞–ø—Ä. multi_map_categories)
    const multiMapKey = `multi_map_${config.entityType}`;

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∏, —è–∫—ñ –≤–∂–µ —î —É Master (–¢—ñ–ª—å–∫–∏ —è–∫—â–æ Multi-Map –í–ò–ú–ö–ù–ï–ù–û)
    const masterMarketplaceIdsSingleMap = new Set();
    const masterMappings = allMappings.filter(m => m[config.mappingIdColumn] === masterId);

    masterMappings.forEach(mapping => {
        const mpId = mapping.marketplace_id;
        const mpInfo = marketplaceConfig[mpId];
        // –Ø–∫—â–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å —ñ—Å–Ω—É—î –Ü Multi-Map –ù–ï —É–≤—ñ–º–∫–Ω–µ–Ω–æ ('TRUE')
        if (mpInfo && String(mpInfo[multiMapKey]).toUpperCase() !== 'TRUE') {
            masterMarketplaceIdsSingleMap.add(mpId);
        }
    });

    const requests = [];
    const transferredSingleMaps = new Set([...masterMarketplaceIdsSingleMap]);

    allMappings.forEach(mapping => {
        if (idsToMerge.includes(mapping[config.mappingIdColumn])) {
            const mpId = mapping.marketplace_id;
            const mpInfo = marketplaceConfig[mpId];

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–æ Multi-Mapping –¥–ª—è —Ü—å–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—É
            const isMultiMapEnabled = mpInfo && String(mpInfo[multiMapKey]).toUpperCase() === 'TRUE';

            if (isMultiMapEnabled) {
                // –í–∏–ø–∞–¥–æ–∫ 1: Multi-Map —É–≤—ñ–º–∫–Ω–µ–Ω–æ. –ó–∞–≤–∂–¥–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ –ø—Ä–∏–≤'—è–∑–∫—É.
                requests.push(createUpdateCellRequest(sheetId, mapping._rowIndex, columnIndex, masterId));
            } else {
                // –í–∏–ø–∞–¥–æ–∫ 2: Single-Map. –ü–µ—Ä–µ–Ω–æ—Å–∏–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–µ–º–∞—î –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É (Master —â–µ –Ω–µ –º–∞—î —Ç–∞–∫–æ—ó –ø—Ä–∏–≤'—è–∑–∫–∏)
                if (!transferredSingleMaps.has(mpId)) {
                    requests.push(createUpdateCellRequest(sheetId, mapping._rowIndex, columnIndex, masterId));
                    transferredSingleMaps.add(mpId);
                }
                // –í–∏–ø–∞–¥–æ–∫ 3: –ö–æ–Ω—Ñ–ª—ñ–∫—Ç. –Ü–≥–Ω–æ—Ä—É—î–º–æ (–ø—Ä–∏–≤'—è–∑–∫–∞ –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–∞ –ø—ñ–∑–Ω—ñ—à–µ —Ä–∞–∑–æ–º —ñ–∑ —Å—É—Ç–Ω—ñ—Å—Ç—é).
            }
        }
    });

    return requests;
}


/**
 * –°—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç UpdateCellsRequest –¥–ª—è BatchUpdate.
 */
function createUpdateCellRequest(sheetId, rowIndex, columnIndex, value) {
    return {
        updateCells: {
            range: {
                sheetId: sheetId,
                startRowIndex: rowIndex - 1, // 0-based index
                endRowIndex: rowIndex,
                startColumnIndex: columnIndex,
                endColumnIndex: columnIndex + 1
            },
            rows: [{ values: [{ userEnteredValue: { stringValue: value } }] }],
            fields: "userEnteredValue"
        }
    };
}





// --- –£—Ç–∏–ª—ñ—Ç–∏ —Ç–∞ –û–±—Ä–æ–±–∫–∞ –ü–æ–º–∏–ª–æ–∫ ---

function getEntityConfig(entityType) {
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É ENTITY_CONFIGS
    const config = ENTITY_CONFIGS[entityType];
    if (!config) {
        throw new Error(`–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è —Å—É—Ç–Ω–æ—Å—Ç—ñ: ${entityType}`);
    }
    return config;
}


// ... (–ó–∞–≥–∞–ª—å–Ω—ñ Getters: getMarketplaces, getMarketplaceFields - –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω) ...
export const getMarketplaces = (force) => getSheetData("Marketplaces", force);
export const getMarketplaceFields = (force) => getSheetData("MarketplaceFields", force);


function invalidateCache(sheetName) {
    const cacheKey = `${SPREADSHEET_ID}:${sheetName}`;
    if (cache[cacheKey]) {
        // –ü–æ–∑–Ω–∞—á–∞—î–º–æ –∫–µ—à –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–º (timestamp = 0)
        cache[cacheKey].timestamp = 0; 
        console.log(`[GSS] –ö–µ—à –¥–ª—è ${sheetName} —ñ–Ω–≤–∞–ª—ñ–¥–æ–≤–∞–Ω–æ.`);
    }
}

// (–ù–æ–≤–µ) –Ü–Ω–≤–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–µ—à—ñ–≤, —â–æ –∑–∞–ª–µ–∂–∞—Ç—å –≤—ñ–¥ –æ–ø–µ—Ä–∞—Ü—ñ—ó –æ–±'—î–¥–Ω–∞–Ω–Ω—è
function invalidateCachesForMerge(entityType) {
    const config = getEntityConfig(entityType);
    invalidateCache(config.sheet);
    if (config.mappingSheet) invalidateCache(config.mappingSheet);
    
    // –Ü–Ω–≤–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–æ–≤'—è–∑–∞–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å
    if (entityType === "Categories") {
        invalidateCache("Characteristics");
    } else if (entityType === "Characteristics") {
        invalidateCache("Options");
    }
}

function handleGapiError(error, userMessage) {
    let detailMessage = userMessage;

    const gapiError = error.result && error.result.error ? error.result.error : error;

    if (gapiError.message) {
        detailMessage += ` –î–µ—Ç–∞–ª—ñ: ${gapiError.message}`;
    }
    if (gapiError.code) {
        detailMessage += ` (–ö–æ–¥: ${gapiError.code})`;
    }
        
    if (gapiError.code === 403) {
        toastError("–ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É (403). –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ —É –≤–∞—Å —î –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ü—ñ—î—ó —Ç–∞–±–ª–∏—Ü—ñ.");
    } else if (gapiError.code === 404) {
        toastError("–¢–∞–±–ª–∏—Ü—é –∞–±–æ –∞—Ä–∫—É—à –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (404). –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ SPREADSHEET_ID —Ç–∞ –Ω–∞–∑–≤–∏ –∞—Ä–∫—É—à—ñ–≤.");
    } else if (gapiError.code === 400) {
            toastError(`–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∑–∞–ø–∏—Ç (400). ${gapiError.message}`);
    } else if (gapiError.code === 429) {
        toastError("–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ Google Sheets API (429). –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
    } else {
        // –ü–æ–∫–∞–∑—É—î–º–æ –±–∞–∑–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ —Ü–µ –Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –ø–æ–º–∏–ª–∫–∞ GAPI
        toastError(userMessage);
    }
    
    console.error("[GSS Error Detail]:", detailMessage, error);
}
/**
 * scripts/components/adminPanel.js
 * 
 * –õ–æ–≥—ñ–∫–∞ –¥–ª—è –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ (–ö–µ—Ä—É–≤–∞–Ω–Ω—è –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º–∏ —Ç–∞ –ü–æ–ª—è–º–∏).
 * –†–µ–∞–ª—ñ–∑—É—î in-place editing —Ç–∞ bulk saving –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó.
 */

import { showModal, closeModal, loadModalTemplate } from '../modals/modalManager.js';
import { getMarketplaces, getMarketplaceFields, rewriteSheetContent } from '../api/googleSheetService.js';
import { toastSuccess, toastError, toastWarning } from '../features/toast.js';
import { initMarketplaceEngine } from '../config/marketplaceEngine.js';

// –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –¥–∞–Ω–∏—Ö –≤ –ø–∞–º'—è—Ç—ñ –ø—ñ–¥ —á–∞—Å —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
let currentMarketplacesData = [];
let currentFieldsData = [];
let hasUnsavedChanges = false;

// –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ (–º–∞—î —Å–ø—ñ–≤–ø–∞–¥–∞—Ç–∏ –∑ Google Sheets —Ç–∞ –¢–ó)
const MARKETPLACE_HEADERS = ["marketplace_id", "display_name", "icon_svg", "primary_color"];
const FIELD_HEADERS = ["field_id", "marketplace_id", "entity_type", "field_key", "display_name", "field_type", "options_source", "allow_multiple"];

/**
 * –ü–æ–∫–∞–∑—É—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.
 */
export async function showAdminPanel() {
    try {
        const template = await loadModalTemplate('admin-panel');
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–≤—ñ–∂—ñ –¥–∞–Ω—ñ –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ –ø–∞–Ω–µ–ª—ñ (forceRefresh=true)
        currentMarketplacesData = await getMarketplaces(true);
        currentFieldsData = await getMarketplaceFields(true);
        hasUnsavedChanges = false;

        showModal(template, initializeAdminPanelUI);
    } catch (error) {
        console.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å:", error);
        // –ü–æ–º–∏–ª–∫–∞ –≤–∂–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ–∫–∞–∑–∞–Ω–∞ –≤ googleSheetService, –∞–ª–µ –¥–æ–¥–∞–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Ç—É—Ç.
        toastError("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.");
    }
}

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞.
 */
function initializeAdminPanelUI(modalElement) {
    initTabs(modalElement);
    renderMarketplacesTable();
    renderFieldsTable();

    document.getElementById('add-marketplace-btn').addEventListener('click', addMarketplaceRow);
    document.getElementById('add-field-btn').addEventListener('click', addFieldRow);
    document.getElementById('save-admin-config-btn').addEventListener('click', saveConfiguration);

    updateUnsavedChangesStatus();
}

// --- Utility Functions ---

/**
 * –ë–µ–∑–ø–µ—á–Ω–µ –µ–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è HTML –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è XSS.
 */
function escapeHTML(str) {
    if (typeof str !== 'string') return str;
    return str.replace(/&/g, '&amp;')
              .replace(/</g, '&lt;')
              .replace(/>/g, '&gt;')
              .replace(/"/g, '&quot;')
              .replace(/'/g, '&#039;');
}


// --- –õ–æ–≥—ñ–∫–∞ –í–∫–ª–∞–¥–æ–∫ ---

function initTabs(modalElement) {
    const tabLinks = modalElement.querySelectorAll('.admin-tab-link');
    const tabContents = modalElement.querySelectorAll('.admin-tab-content');

    tabLinks.forEach(link => {
        link.addEventListener('click', () => {
            const targetTabId = `tab-${link.dataset.tab}`;

            tabLinks.forEach(l => l.classList.remove('active'));
            tabContents.forEach(c => c.classList.remove('active'));

            link.classList.add('active');
            document.getElementById(targetTabId).classList.add('active');
        });
    });
}

// --- –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –°—Ç–∞–Ω–æ–º –ó–º—ñ–Ω ---

function setUnsavedChanges() {
    hasUnsavedChanges = true;
    updateUnsavedChangesStatus();
}

function updateUnsavedChangesStatus() {
    const saveButton = document.getElementById('save-admin-config-btn');
    const marketplacesStatus = document.getElementById('marketplaces-status');
    const fieldsStatus = document.getElementById('fields-status');

    if (saveButton) saveButton.disabled = !hasUnsavedChanges;
    if (marketplacesStatus) marketplacesStatus.classList.toggle('unsaved', hasUnsavedChanges);
    if (fieldsStatus) fieldsStatus.classList.toggle('unsaved', hasUnsavedChanges);
}

// --- –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–∞ –ö–µ—Ä—É–≤–∞–Ω–Ω—è –¢–∞–±–ª–∏—Ü–µ—é –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ñ–≤ (In-place editing) ---

function renderMarketplacesTable() {
    const tbody = document.getElementById('marketplaces-table').querySelector('tbody');
    tbody.innerHTML = '';

    currentMarketplacesData.forEach((item, index) => {
        const tr = document.createElement('tr');
        tr.dataset.index = index;

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ input –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–∞ –º—ñ—Å—Ü—ñ. –î–∞–Ω—ñ –µ–∫—Ä–∞–Ω—É—é—Ç—å—Å—è.
        tr.innerHTML = `
            <td><input type="text" value="${escapeHTML(item.marketplace_id)}" data-field="marketplace_id" placeholder="–Ω–∞–ø—Ä. rozetka" required></td>
            <td><input type="text" value="${escapeHTML(item.display_name)}" data-field="display_name" placeholder="–Ω–∞–ø—Ä. Rozetka" required></td>
            <td><input type="text" value="${escapeHTML(item.icon_svg || '')}" data-field="icon_svg"></td>
            <td><input type="text" value="${escapeHTML(item.primary_color || '')}" data-field="primary_color"></td>
            <td class="action-cell">
                <button class="btn-delete-row" title="–í–∏–¥–∞–ª–∏—Ç–∏">üóëÔ∏è</button>
            </td>
        `;
        tbody.appendChild(tr);
    });

    attachTableEventListeners(tbody, updateMarketplaceData, deleteMarketplaceRow);
}

function addMarketplaceRow() {
    currentMarketplacesData.push({
        marketplace_id: '', display_name: '', icon_svg: '', primary_color: ''
    });
    setUnsavedChanges();
    renderMarketplacesTable();
    // –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä—à–µ –ø–æ–ª–µ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞
    const newRowInput = document.querySelector('#marketplaces-table tbody tr:last-child input');
    if (newRowInput) newRowInput.focus();
}

function updateMarketplaceData(index, field, value) {
    if (currentMarketplacesData[index][field] !== value) {
        currentMarketplacesData[index][field] = value;
        setUnsavedChanges();
    }
}

function deleteMarketplaceRow(index) {
    const marketplaceId = currentMarketplacesData[index].marketplace_id;
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ü–µ–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –≤ –ø–æ–ª—è—Ö (—è–∫—â–æ ID –≤–∂–µ –±—É–ª–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)
    if (marketplaceId && currentFieldsData.some(field => field.marketplace_id === marketplaceId)) {
        toastWarning(`–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ "${marketplaceId}". –í—ñ–Ω –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ —Ç–∞–±–ª–∏—Ü—ñ "–ü–æ–ª—è –ü—Ä–∏–≤'—è–∑–æ–∫".`);
        return;
    }

    currentMarketplacesData.splice(index, 1);
    setUnsavedChanges();
    renderMarketplacesTable();
}

// --- –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–∞ –ö–µ—Ä—É–≤–∞–Ω–Ω—è –¢–∞–±–ª–∏—Ü–µ—é –ü–æ–ª—ñ–≤ (In-place editing) ---

function renderFieldsTable() {
    const tbody = document.getElementById('fields-table').querySelector('tbody');
    tbody.innerHTML = '';

    currentFieldsData.forEach((item, index) => {
        const tr = document.createElement('tr');
        tr.dataset.index = index;

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ input —Ç–∞ select –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–∞ –º—ñ—Å—Ü—ñ. –î–∞–Ω—ñ –µ–∫—Ä–∞–Ω—É—é—Ç—å—Å—è.
        tr.innerHTML = `
            <td><input type="text" value="${escapeHTML(item.field_id)}" data-field="field_id" required></td>
            <td>${createMarketplaceSelect(item.marketplace_id)}</td>
            <td>${createEntitySelect(item.entity_type)}</td>
            <td><input type="text" value="${escapeHTML(item.field_key)}" data-field="field_key" placeholder="–Ω–∞–ø—Ä. mp_id" required></td>
            <td><input type="text" value="${escapeHTML(item.display_name)}" data-field="display_name" placeholder="–Ω–∞–ø—Ä. ID –Ω–∞ Rozetka" required></td>
            <td>${createFieldTypeSelect(item.field_type)}</td>
            <td><input type="text" value="${escapeHTML(item.options_source || '')}" data-field="options_source"></td>
            <td>${createBooleanSelect(item.allow_multiple)}</td>
            <td class="action-cell">
                <button class="btn-delete-row" title="–í–∏–¥–∞–ª–∏—Ç–∏">üóëÔ∏è</button>
            </td>
        `;
        tbody.appendChild(tr);
    });

    attachTableEventListeners(tbody, updateFieldData, deleteFieldRow);
}

function addFieldRow() {
    // –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è
    const newFieldId = `temp_field_${Date.now()}`;
    currentFieldsData.push({
        field_id: newFieldId,
        marketplace_id: '',
        entity_type: 'categories',
        field_key: '',
        display_name: '',
        field_type: 'text',
        options_source: '',
        allow_multiple: 'FALSE'
    });
    setUnsavedChanges();
    renderFieldsTable();
     // –§–æ–∫—É—Å –Ω–∞ –¥—Ä—É–≥–µ –ø–æ–ª–µ (–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å), –æ—Å–∫—ñ–ª—å–∫–∏ ID –≤–∂–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ
     const newRowSelect = document.querySelector('#fields-table tbody tr:last-child select[data-field="marketplace_id"]');
     if (newRowSelect) newRowSelect.focus();
}

function updateFieldData(index, field, value) {
    if (currentFieldsData[index][field] !== value) {
        currentFieldsData[index][field] = value;
        setUnsavedChanges();
    }
}

function deleteFieldRow(index) {
    currentFieldsData.splice(index, 1);
    setUnsavedChanges();
    renderFieldsTable();
}

// --- –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –°–µ–ª–µ–∫—Ç—ñ–≤ (–¥–ª—è in-place editing) ---

function createSelect(options, selectedValue, dataField) {
    let html = `<select data-field="${dataField}">`;
    options.forEach(option => {
        const value = typeof option === 'object' ? option.value : option;
        const label = typeof option === 'object' ? option.label : option;
        const selected = value === selectedValue ? 'selected' : '';
        // –ï–∫—Ä–∞–Ω—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∞ –Ω–∞–∑–≤–∏ –æ–ø—Ü—ñ–π
        html += `<option value="${escapeHTML(value)}" ${selected}>${escapeHTML(label)}</option>`;
    });
    html += '</select>';
    return html;
}

function createMarketplaceSelect(selectedValue) {
    const options = [{ value: '', label: '-- –û–±–µ—Ä—ñ—Ç—å --' }];
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ñ–≤ (–≤–∫–ª—é—á–∞—é—á–∏ —â–µ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ)
    currentMarketplacesData.forEach(mp => {
        if (mp.marketplace_id) {
            options.push({ value: mp.marketplace_id, label: mp.display_name || mp.marketplace_id });
        }
    });
    return createSelect(options, selectedValue, 'marketplace_id');
}

function createEntitySelect(selectedValue) {
    const options = ['categories', 'characteristics', 'options', 'brands'];
    return createSelect(options, selectedValue, 'entity_type');
}

function createFieldTypeSelect(selectedValue) {
    const options = ['text', 'select', 'textarea', 'boolean'];
    return createSelect(options, selectedValue, 'field_type');
}

function createBooleanSelect(selectedValue) {
    const options = ['TRUE', 'FALSE'];
    const normalizedValue = String(selectedValue).toUpperCase() === 'TRUE' ? 'TRUE' : 'FALSE';
    return createSelect(options, normalizedValue, 'allow_multiple');
}


// --- –ó–∞–≥–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π —Ç–∞–±–ª–∏—Ü—å (–¥–ª—è in-place editing) ---

function attachTableEventListeners(tbody, updateCallback, deleteCallback) {
    // –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω (–¥–ª—è select —Ç–∞ —Ñ—ñ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó input)
    tbody.addEventListener('change', (event) => {
        const target = event.target;
        if (target.tagName === 'INPUT' || target.tagName === 'SELECT') {
            const tr = target.closest('tr');
            const index = parseInt(tr.dataset.index);
            const field = target.dataset.field;
            const value = target.value;
            updateCallback(index, field, value);
        }
    });

    // –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è (–º–∏—Ç—Ç—î–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è input)
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ input –¥–ª—è –º–∏—Ç—Ç—î–≤–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∫–Ω–æ–ø–∫–∏ –ó–±–µ—Ä–µ–≥—Ç–∏
    tbody.addEventListener('input', (event) => {
        if (event.target.tagName === 'INPUT' && event.target.type === 'text') {
            const tr = event.target.closest('tr');
            const index = parseInt(tr.dataset.index);
            const field = event.target.dataset.field;
            const value = event.target.value;
            updateCallback(index, field, value);
        }
    });

    // –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    tbody.addEventListener('click', (event) => {
        if (event.target.classList.contains('btn-delete-row')) {
            const tr = event.target.closest('tr');
            const index = parseInt(tr.dataset.index);
            deleteCallback(index);
        }
    });
}

// --- –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó (Bulk Save) ---

async function saveConfiguration() {
    if (!hasUnsavedChanges) return;

    // 1. –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º
    if (!validateConfiguration()) {
        toastError("–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –º—ñ—Å—Ç–∏—Ç—å –ø–æ–º–∏–ª–∫–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–ø—Ä–∞–≤—Ç–µ –ø—ñ–¥—Å–≤—ñ—á–µ–Ω—ñ –ø–æ–ª—è –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º.");
        return;
    }

    const saveButton = document.getElementById('save-admin-config-btn');
    saveButton.disabled = true;
    saveButton.textContent = '–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è...';

    try {
        // 2. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ–±–æ—Ö –∞—Ä–∫—É—à—ñ–≤ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
        await Promise.all([
            rewriteSheetContent("Marketplaces", currentMarketplacesData, MARKETPLACE_HEADERS),
            rewriteSheetContent("MarketplaceFields", currentFieldsData, FIELD_HEADERS)
        ]);

        // 3. –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
        hasUnsavedChanges = false;
        updateUnsavedChangesStatus();
        toastSuccess("–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!");

        // 4. –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –†—É—à—ñ—è –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ñ–≤
        console.log("–ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Marketplace Engine...");
        await initMarketplaceEngine(true); // Force refresh
        
        // 5. –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
        closeModal();

    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó:", error);
        toastError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Å–æ–ª—å —Ç–∞ –¥–æ—Å—Ç—É–ø –¥–æ Google Sheets.");
    } finally {
        // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É, —è–∫—â–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —â–µ –≤—ñ–¥–∫—Ä–∏—Ç–µ (—É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏)
        if (saveButton) {
            saveButton.disabled = false;
            saveButton.textContent = '–ó–±–µ—Ä–µ–≥—Ç–∏ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é';
            // –Ø–∫—â–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–º—ñ–Ω, —â–æ–± –∫–Ω–æ–ø–∫–∞ –∑–Ω–æ–≤—É —Å—Ç–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ—é
            if (hasUnsavedChanges) {
                 updateUnsavedChangesStatus();
            }
        }
    }
}

/**
 * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º.
 * –¢–∞–∫–æ–∂ –ø—ñ–¥—Å–≤—ñ—á—É—î –ø–æ–º–∏–ª–∫–æ–≤—ñ –ø–æ–ª—è –≤ UI.
 */
function validateConfiguration() {
    let isValid = true;
    const marketplaceIds = new Set();
    const fieldIds = new Set();
    const fieldKeys = new Set(); // –î–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ –∫–ª—é—á—ñ–≤ –≤ –º–µ–∂–∞—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—É+—Å—É—Ç–Ω–æ—Å—Ç—ñ

    // –û—á–∏—â–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –ø–æ–º–∏–ª–æ–∫ –≤ UI
    document.querySelectorAll('.admin-table input, .admin-table select').forEach(el => el.classList.remove('error'));

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ñ–≤
    currentMarketplacesData.forEach((mp, index) => {
        const rowSelector = `#marketplaces-table tr[data-index="${index}"]`;
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
        if (!mp.marketplace_id || !mp.display_name) {
            if (!mp.marketplace_id) document.querySelector(`${rowSelector} [data-field="marketplace_id"]`).classList.add('error');
            if (!mp.display_name) document.querySelector(`${rowSelector} [data-field="display_name"]`).classList.add('error');
            isValid = false;
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ ID
        if (mp.marketplace_id && marketplaceIds.has(mp.marketplace_id)) {
            toastWarning(`ID –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—É "${mp.marketplace_id}" –¥—É–±–ª—é—î—Ç—å—Å—è.`);
            document.querySelector(`${rowSelector} [data-field="marketplace_id"]`).classList.add('error');
            isValid = false;
        }
        if (mp.marketplace_id) {
            marketplaceIds.add(mp.marketplace_id);
        }
    });

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ü–æ–ª—ñ–≤
    currentFieldsData.forEach((field, index) => {
        const rowSelector = `#fields-table tr[data-index="${index}"]`;

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
        if (!field.field_id || !field.marketplace_id || !field.entity_type || !field.field_key || !field.display_name) {
            if (!field.field_id) document.querySelector(`${rowSelector} [data-field="field_id"]`).classList.add('error');
            if (!field.marketplace_id) document.querySelector(`${rowSelector} [data-field="marketplace_id"]`).classList.add('error');
            if (!field.field_key) document.querySelector(`${rowSelector} [data-field="field_key"]`).classList.add('error');
            if (!field.display_name) document.querySelector(`${rowSelector} [data-field="display_name"]`).classList.add('error');
            isValid = false;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—É (–≤–∞–∂–ª–∏–≤–æ, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–¥–∞–ª–∏–≤ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å, –∞–ª–µ –∑–∞–ª–∏—à–∏–≤ –ø–æ–ª–µ)
        if (field.marketplace_id && !marketplaceIds.has(field.marketplace_id)) {
            toastWarning(`–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å "${field.marketplace_id}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—ñ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ñ–≤.`);
            document.querySelector(`${rowSelector} [data-field="marketplace_id"]`).classList.add('error');
            isValid = false;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ ID –ü–æ–ª—è
        if (field.field_id && fieldIds.has(field.field_id)) {
            toastWarning(`ID –ü–æ–ª—è "${field.field_id}" –¥—É–±–ª—é—î—Ç—å—Å—è.`);
            document.querySelector(`${rowSelector} [data-field="field_id"]`).classList.add('error');
            isValid = false;
        }
        if (field.field_id) {
            fieldIds.add(field.field_id);
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ –ö–ª—é—á–∞ –ü–æ–ª—è –≤ –º–µ–∂–∞—Ö –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—É+–°—É—Ç–Ω–æ—Å—Ç—ñ
        const uniqueKey = `${field.marketplace_id}:${field.entity_type}:${field.field_key}`;
        if (field.field_key && fieldKeys.has(uniqueKey)) {
            toastWarning(`–ö–ª—é—á "${field.field_key}" –¥—É–±–ª—é—î—Ç—å—Å—è –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—É "${field.marketplace_id}" —Ç–∞ —Å—É—Ç–Ω–æ—Å—Ç—ñ "${field.entity_type}".`);
            document.querySelector(`${rowSelector} [data-field="field_key"]`).classList.add('error');
            isValid = false;
        }
        if (field.field_key) {
            fieldKeys.add(uniqueKey);
        }
    });

    return isValid;
}
/**
 * scripts/components/multiselect.js
 * 
 * (–ü—É–Ω–∫—Ç 6) –ü—Ä–æ—Å—Ç–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –º—É–ª—å—Ç–∏—Å–µ–ª–µ–∫—Ç—É –∑ –ø–æ—à—É–∫–æ–º —Ç–∞ —Ç–µ–≥–∞–º–∏ (—á—ñ–ø–∞–º–∏).
 */

export class Multiselect {
    constructor(containerElement, options, initialValues = [], onChangeCallback = null) {
        this.container = containerElement;
        // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –æ–ø—Ü—ñ—ó, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ—Ö –∑–Ω–∞—á–µ–Ω—å
        this.options = options ? options.filter(o => o.value && o.label) : [];
        this.selectedValues = new Set(initialValues.map(String));
        this.onChange = onChangeCallback;
        this.isDisabled = false;
        this.render();
    }

    render() {
        if (!this.container) return;
        this.container.innerHTML = '';
        this.container.classList.add('multiselect-container');

        // –ü–æ–±—É–¥–æ–≤–∞ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        this.container.innerHTML = `
            <div class="multiselect-control ${this.isDisabled ? 'disabled' : ''}">
                <div class="multiselect-selected-items"></div>
                <input type="text" class="multiselect-search" placeholder="${this.isDisabled ? '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ' : '–ü–æ—à—É–∫ –∞–±–æ –≤–∏–±—ñ—Ä...'}">
            </div>
            <div class="multiselect-dropdown" style="display: none;">
                <ul class="multiselect-options"></ul>
            </div>
        `;

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –µ–ª–µ–º–µ–Ω—Ç–∏ DOM
        this.searchInput = this.container.querySelector('.multiselect-search');
        this.dropdown = this.container.querySelector('.multiselect-dropdown');
        this.optionsList = this.container.querySelector('.multiselect-options');
        this.selectedItemsContainer = this.container.querySelector('.multiselect-selected-items');

        if (this.isDisabled) {
            this.searchInput.disabled = true;
        }

        this.renderSelectedItems();
        this.attachEventListeners();
    }

    attachEventListeners() {
        if (this.isDisabled) return;

        this.searchInput.addEventListener('focus', () => this.showDropdown());
        this.searchInput.addEventListener('input', () => this.filterOptions());
        
        // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–∏ –∫–ª—ñ–∫—É –∑–æ–≤–Ω—ñ
        document.addEventListener('mousedown', this.handleOutsideClick);

        // –î–µ–ª–µ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π
        this.optionsList.addEventListener('click', (event) => {
            const li = event.target.closest('li');
            if (li && li.dataset.value) {
                this.toggleSelection(li.dataset.value);
            }
        });

        this.selectedItemsContainer.addEventListener('click', (event) => {
            const removeBtn = event.target.closest('.multiselect-remove-item');
            if (removeBtn) {
                const value = removeBtn.dataset.value;
                this.removeSelection(value);
            }
        });
    }

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç—Ä—ñ–ª–æ—á–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É this
    handleOutsideClick = (event) => {
        if (!this.container.contains(event.target)) {
            this.hideDropdown();
        }
    };

    showDropdown() {
        this.filterOptions();
        this.dropdown.style.display = 'block';
    }

    hideDropdown() {
        this.dropdown.style.display = 'none';
        this.searchInput.value = '';
    }

    filterOptions() {
        const query = this.searchInput.value.toLowerCase();
        this.optionsList.innerHTML = '';

        // –§—ñ–ª—å—Ç—Ä—É—î–º–æ, —ñ–≥–Ω–æ—Ä—É—é—á–∏ –≤—ñ–¥—Å—Ç—É–ø–∏ (NBSP)
        const filteredOptions = this.options.filter(option => 
            option.label.replace(/\u00A0/g, '').toLowerCase().includes(query)
        );

        if (filteredOptions.length === 0) {
            this.optionsList.innerHTML = '<li class="no-results">–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ</li>';
            return;
        }

        filteredOptions.forEach(option => {
            const li = document.createElement('li');
            li.dataset.value = option.value;
            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ innerHTML –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥—Å—Ç—É–ø—ñ–≤ (NBSP)
            li.innerHTML = option.label; 
            if (this.selectedValues.has(String(option.value))) {
                li.classList.add('selected');
            }
            this.optionsList.appendChild(li);
        });
    }

    toggleSelection(value) {
        if (this.selectedValues.has(value)) {
            this.removeSelection(value);
        } else {
            this.addSelection(value);
        }
    }

    addSelection(value) {
        this.selectedValues.add(value);
        this.renderSelectedItems();
        this.searchInput.focus(); 
        this.filterOptions();
        if (this.onChange) this.onChange(this.getValues());
    }

    removeSelection(value) {
        this.selectedValues.delete(value);
        this.renderSelectedItems();
        this.filterOptions();
        if (this.onChange) this.onChange(this.getValues());
    }

    renderSelectedItems() {
        this.selectedItemsContainer.innerHTML = '';
        this.selectedValues.forEach(value => {
            const option = this.options.find(o => String(o.value) === value);
            if (option) {
                const item = document.createElement('span');
                item.classList.add('multiselect-item');
                
                // –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —á–∏—Å—Ç–∏–π —Ç–µ–∫—Å—Ç –±–µ–∑ –≤—ñ–¥—Å—Ç—É–ø—ñ–≤ —É —á—ñ–ø–∞—Ö
                const labelText = document.createElement('span');
                labelText.textContent = option.label.replace(/\u00A0/g, '').trim();
                item.appendChild(labelText);
                
                // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –≤–∏–¥–∞–ª–µ–Ω–Ω—è (X), —è–∫—â–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–∏–π
                if (!this.isDisabled) {
                    const removeBtn = document.createElement('span');
                    removeBtn.classList.add('multiselect-remove-item');
                    removeBtn.dataset.value = value;
                    removeBtn.innerHTML = '&times;'; // –°–∏–º–≤–æ–ª X
                    item.appendChild(removeBtn);
                }
                this.selectedItemsContainer.appendChild(item);
            }
        });
    }

    getValues() {
        return Array.from(this.selectedValues);
    }

    // (–ü—É–Ω–∫—Ç 6) –ú–µ—Ç–æ–¥ –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    setDisabled(disabled) {
        if (this.isDisabled === disabled) return;
        this.isDisabled = disabled;

        if (disabled) {
            this.selectedValues.clear();
            if (this.onChange) this.onChange(this.getValues());
        }
        
        document.removeEventListener('mousedown', this.handleOutsideClick);
        this.render();
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤ (–≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∑ modalManager –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ)
    destroy() {
        document.removeEventListener('mousedown', this.handleOutsideClick);
        if (this.container) {
            this.container.innerHTML = '';
        }
    }
}
/**
 * scripts/components/table.js
 * 
 * (–û–Ω–æ–≤–ª–µ–Ω–æ) –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—å, –∫–µ—à—É–≤–∞–Ω–Ω—è, –∑–±–∞–≥–∞—á–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ç–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è —Ñ—É–Ω–∫—Ü—ñ–π.
 */

import { getActiveEntity } from './tabs.js';
import * as GSS from '../api/googleSheetService.js'; // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –≤—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó GSS
import { getPaginatedData, updatePaginationControls } from '../features/pagination.js';
import { getSortedData, initTableSorting, setSortingRenderCallback } from '../features/sorting.js';
import { initTableSelection, isSelected } from '../features/selection.js';
import { getFilteredData } from '../features/search.js'; // (–ü—É–Ω–∫—Ç 9)
import { toastError } from '../features/toast.js';
import { initializeIdGenerator } from '../utils/idGenerator.js'; // (–ü—É–Ω–∫—Ç 2)
import { setLoadingState } from '../main.js';

// –Ü–º–ø–æ—Ä—Ç–∏ –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω
import { showCategoryForm } from '../modals/categoryModal.js';
import { showCharacteristicForm } from '../modals/characteristicModal.js';
import { showOptionForm } from '../modals/optionModal.js';
import { showBrandForm } from '../modals/brandModal.js';

// –ö–µ—à –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∑–±–∞–≥–∞—á–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö (–¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ –ø–æ—à—É–∫—É)
const uiDataCache = {};
// –ö–µ—à –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å–∏—Ä–∏—Ö –¥–∞–Ω–∏—Ö (–¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π)
const rawDataCache = {};


// –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ–ª–±–µ–∫ –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è (—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∑ –∫–µ—à—É)
setSortingRenderCallback(() => renderActiveTable());

/**
 * (–ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø - –ü—É–Ω–∫—Ç 2, 5) –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –≤—Å—ñ –∫–µ—à—ñ –¥–∞–Ω–∏—Ö —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∏ ID.
 * –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –¥–æ–¥–∞—Ç–∫—É —Ç–∞ –ø—Ä–∏ –ø–æ–≤–Ω–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ (Refresh Button).
 */
export async function initializeTableCaches(forceRefresh = false) {
    console.log("[Table] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–µ—à—ñ–≤ —Ç–∞ ID –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ñ–≤...");
    try {
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
        const [categories, characteristics, options, brands] = await Promise.all([
            GSS.getCategories(forceRefresh),
            GSS.getCharacteristics(forceRefresh),
            GSS.getOptions(forceRefresh),
            GSS.getBrands(forceRefresh)
        ]);

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É —Å–∏—Ä–∏—Ö –¥–∞–Ω–∏—Ö
        rawDataCache['categories'] = categories;
        rawDataCache['characteristics'] = characteristics;
        rawDataCache['options'] = options;
        rawDataCache['brands'] = brands;

        // (–ü—É–Ω–∫—Ç 5) –ó–±–∞–≥–∞—á–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö (–¥–æ–¥–∞–≤–∞–Ω–Ω—è _display_ –ø–æ–ª—ñ–≤) —Ç–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –≤ uiDataCache
        enrichDisplayData();

        // (–ü—É–Ω–∫—Ç 2) –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ñ–≤ ID
        initializeIdGenerator('cat', categories, 'local_id');
        initializeIdGenerator('char', characteristics, 'local_id');
        initializeIdGenerator('opt', options, 'local_id');
        initializeIdGenerator('brd', brands, 'local_id'); // (–ü—É–Ω–∫—Ç 2 - –ø—Ä–µ—Ñ—ñ–∫—Å brd)

        console.log("[Table] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");

    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–µ—à—ñ–≤ –¥–∞–Ω–∏—Ö:", error);
        toastError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –±–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ Google Sheets.");
        throw error; // –ü—Ä–æ–∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –¥–∞–ª—ñ, —â–æ–± –∑—É–ø–∏–Ω–∏—Ç–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –≤ main.js
    }
}

/**
 * (–ù–û–í–ï) (–ü—É–Ω–∫—Ç 5) –ó–±–∞–≥–∞—á—É—î –¥–∞–Ω—ñ, –¥–æ–¥–∞—é—á–∏ –ø–æ–ª—è _display_... —Ç–∞ –∫–æ–ø—ñ—é—î —ó—Ö –≤ uiDataCache.
 */
function enrichDisplayData() {
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞–ø –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É –Ω–∞–∑–≤ –∑–∞ ID –∑ —Å–∏—Ä–∏—Ö –¥–∞–Ω–∏—Ö
    const categoryNames = new Map(rawDataCache['categories']?.map(item => [item.local_id, item.name_uk]));
    const charNames = new Map(rawDataCache['characteristics']?.map(item => [item.local_id, item.name_uk]));
    // const optionNames = new Map(rawDataCache['options']?.map(item => [item.local_id, item.name_uk]));

    // –ó–±–∞–≥–∞—á–µ–Ω–Ω—è –ö–∞—Ç–µ–≥–æ—Ä—ñ–π
    uiDataCache['categories'] = rawDataCache['categories']?.map(item => ({
        ...item,
        _display_parent_name: categoryNames.get(item.parent_local_id) || ''
    })) || [];

    // –ó–±–∞–≥–∞—á–µ–Ω–Ω—è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    uiDataCache['characteristics'] = rawDataCache['characteristics']?.map(item => {
        let displayCategories = '';
        if (item.is_global === 'TRUE') {
            displayCategories = '–ì–ª–æ–±–∞–ª—å–Ω–∞';
        } else {
            const catIds = item.category_local_ids ? item.category_local_ids.split(',').map(id => id.trim()) : [];
            // –ü–æ–∫–∞–∑—É—î–º–æ ID, —è–∫—â–æ –Ω–∞–∑–≤–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ (–¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ)
            displayCategories = catIds.map(id => categoryNames.get(id) || `ID: ${id}`).join(', ');
        }
        return {
            ...item,
            _display_category_names: displayCategories,
        };
    }) || [];

    // –ó–±–∞–≥–∞—á–µ–Ω–Ω—è –û–ø—Ü—ñ–π
    uiDataCache['options'] = rawDataCache['options']?.map(item => ({
        ...item,
        _display_char_name: charNames.get(item.char_local_id) || ''
    })) || [];

    // –ë—Ä–µ–Ω–¥–∏ –Ω–µ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –∑–±–∞–≥–∞—á–µ–Ω–Ω—è
    uiDataCache['brands'] = rawDataCache['brands'] || [];
}


/**
 * –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É —Ç–∞–±–ª–∏—Ü—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –¥–∞–Ω—ñ –∑ uiDataCache.
 */
export function renderActiveTable() {
    const entity = getActiveEntity();
    const container = document.getElementById('table-container');
    if (!container) return;

    // –Ø–∫—â–æ –¥–∞–Ω—ñ —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ
    if (!uiDataCache[entity]) {
        console.error(`[Table] –°–ø—Ä–æ–±–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É ${entity} –∑ –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ –∫–µ—à—É.`);
        container.innerHTML = `<p>–î–∞–Ω—ñ –Ω–µ –±—É–ª–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É.</p>`;
        return; 
    }

    try {
        const data = uiDataCache[entity];
        
        // 1. (–ü—É–Ω–∫—Ç 9) –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó (–ø–æ—à—É–∫—É)
        const filteredData = getFilteredData(data);

        // 2. –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        const sortedData = getSortedData(filteredData);

        // 3. –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
        const paginatedData = getPaginatedData(sortedData);

        // 4. –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ HTML —Ç–∞–±–ª–∏—Ü—ñ
        const tableHTML = generateTableHTML(entity, paginatedData, filteredData.length);
        container.innerHTML = tableHTML;

        // 5. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É —Ç–∞–±–ª–∏—Ü—ñ
        const tableElement = container.querySelector('.data-table');
        if (tableElement) {
            initTableSorting(entity, tableElement);
            initTableSelection(entity, tableElement);
            initEditButtons(tableElement, entity);
        }

        // 6. –û–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
        updatePaginationControls(filteredData.length);

    } catch (error) {
        console.error(`–ü–æ–º–∏–ª–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è ${entity}:`, error);
        container.innerHTML = `<p class="error">–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö.</p>`;
    }
}

/**
 * –û–Ω–æ–≤–ª—é—î –¥–∞–Ω—ñ –∑ Google Sheets —Ç–∞ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—é.
 */
export async function refreshActiveTable(forceRefreshGss = true) {
    // –ü–æ–∫–∞–∑—É—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    if (forceRefreshGss) {
        setLoadingState(true);
    }

    try {
        // –ú–∏ –Ω–µ –º–æ–∂–µ–º–æ –ø—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–∏—Ç–∏ –æ–¥–Ω—É —Å—É—Ç–Ω—ñ—Å—Ç—å, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∏ –≤–∑–∞—î–º–æ–ø–æ–≤'—è–∑–∞–Ω—ñ (–¥–ª—è –∑–±–∞–≥–∞—á–µ–Ω–Ω—è).
        // –¢–æ–º—É –º–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ–≤–Ω—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –∫–µ—à—ñ–≤.
        await initializeTableCaches(forceRefreshGss);
        
        // –ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –∫–µ—à—ñ–≤, —Ä–µ–Ω–¥–µ—Ä–∏–º–æ –∞–∫—Ç–∏–≤–Ω—É —Ç–∞–±–ª–∏—Ü—é.
        renderActiveTable();

    } catch (error) {
        // –ü–æ–º–∏–ª–∫–∞ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞ –≤ initializeTableCaches
        const container = document.getElementById('table-container');
        if (container) {
            container.innerHTML = `<p class="error">–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ.</p>`;
        }
    } finally {
         if (forceRefreshGss) {
            setLoadingState(false);
        }
    }
}


// --- –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è HTML –¢–∞–±–ª–∏—Ü—ñ ---

function generateTableHTML(entity, data, totalFilteredCount) {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞ –ø–æ—Ä–æ–∂–Ω—ñ –¥–∞–Ω—ñ
    if (totalFilteredCount === 0 && (uiDataCache[entity] && uiDataCache[entity].length > 0)) {
        return '<p>–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑–∞ –≤–∞—à–∏–º –ø–æ—à—É–∫–æ–≤–∏–º –∑–∞–ø–∏—Ç–æ–º.</p>';
    } else if (!uiDataCache[entity] || uiDataCache[entity].length === 0) {
         return '<p>–î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ. –î–æ–¥–∞–π—Ç–µ –ø–µ—Ä—à–∏–π –∑–∞–ø–∏—Å.</p>';
    } else if (data.length === 0) {
        return '<p>–ù–∞ —Ü—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö.</p>';
    }

    let headerHTML = '';
    let bodyHTML = '';
    let idField = 'local_id'; // (–ü—É–Ω–∫—Ç 2) –£–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–æ

    switch (entity) {
        case 'categories':
            headerHTML = renderCategoriesHeader();
            bodyHTML = data.map(item => renderCategoriesRow(item, idField)).join('');
            break;
        case 'characteristics':
            headerHTML = renderCharacteristicsHeader();
            bodyHTML = data.map(item => renderCharacteristicsRow(item, idField)).join('');
            break;
        case 'options':
            headerHTML = renderOptionsHeader();
            bodyHTML = data.map(item => renderOptionsRow(item, idField)).join('');
            break;
        case 'brands':
            headerHTML = renderBrandsHeader();
            bodyHTML = data.map(item => renderBrandsRow(item, idField)).join('');
            break;
    }

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π <table>, —Å—Ç–∏–ª—ñ–∑–æ–≤–∞–Ω–∏–π —á–µ—Ä–µ–∑ _data-table-m3.css
    return `
        <table class="data-table" data-entity="${entity}">
            <thead>
                <tr>
                    <th class="cell-checkbox"><input type="checkbox" class="select-all" title="–í–∏–±—Ä–∞—Ç–∏ –≤—Å–µ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ"></th>
                    ${headerHTML}
                    <th class="cell-actions">–î—ñ—ó</th>
                </tr>
            </thead>
            <tbody>
                ${bodyHTML}
            </tbody>
        </table>
    `;
}

// --- –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –†—è–¥–∫—ñ–≤ —Ç–∞ –ó–∞–≥–æ–ª–æ–≤–∫—ñ–≤ (–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å _display_ –ø–æ–ª—è) ---

// –§—É–Ω–∫—Ü—ñ—è-—à–∞–±–ª–æ–Ω –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É —Ä—è–¥–∫–∞ (–∞–¥–∞–ø—Ç–æ–≤–∞–Ω–æ –ø—ñ–¥ –≤–∞—à—ñ —Å—Ç–∏–ª—ñ –∫–Ω–æ–ø–æ–∫)
function renderRow(item, idField, contentHTML) {
    const id = escapeHTML(item[idField]);
    const checked = isSelected(id) ? 'checked' : '';
    const selectedClass = isSelected(id) ? 'selected' : '';

    return `
        <tr data-id="${id}" class="${selectedClass}">
            <td class="cell-checkbox">
                <input type="checkbox" class="row-checkbox" data-id="${id}" ${checked}>
            </td>
            ${contentHTML}
            <td class="cell-actions">
                <button class="toolbar-button btn-edit" data-id="${id}" title="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏">
                    <div class="state-layer">
                         <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 0 24 24" width="24px" fill="currentColor"><path d="M0 0h24v24H0z" fill="none"/><path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"/></svg>
                    </div>
                </button>
            </td>
        </tr>
    `;
}

// –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó
function renderCategoriesHeader() {
    return `
        <th class="sortable" data-sort-key="local_id">ID</th>
        <th class="sortable" data-sort-key="name_uk">–ù–∞–∑–≤–∞ (UK)</th>
        <th class="sortable" data-sort-key="_display_parent_name">–ë–∞—Ç—å–∫—ñ–≤—Å—å–∫–∞</th>
        <th class="sortable" data-sort-key="category_type">–¢–∏–ø</th>
    `;
}
function renderCategoriesRow(item, idField) {
    const content = `
            <td>${escapeHTML(item.local_id)}</td>
            <td>${escapeHTML(item.name_uk)}</td>
            <td title="${escapeHTML(item._display_parent_name)}">${escapeHTML(item._display_parent_name)}</td>
            <td>${escapeHTML(item.category_type)}</td>
    `;
    return renderRow(item, idField, content);
}

// –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
function renderCharacteristicsHeader() {
    return `
        <th class="sortable" data-sort-key="local_id">ID</th>
        <th class="sortable" data-sort-key="name_uk">–ù–∞–∑–≤–∞ (UK)</th>
        <th class="sortable" data-sort-key="_display_category_names">–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó</th>
        <th class="sortable" data-sort-key="param_type">–¢–∏–ø –ü–∞—Ä–∞–º–µ—Ç—Ä—É</th>
        <th class="sortable" data-sort-key="filter_type">–¢–∏–ø –§—ñ–ª—å—Ç—Ä—É</th>
        <th class="sortable" data-sort-key="unit">–û–¥–∏–Ω–∏—Ü—ñ</th>
    `;
}
function renderCharacteristicsRow(item, idField) {
    const content = `
            <td>${escapeHTML(item.local_id)}</td>
            <td>${escapeHTML(item.name_uk)}</td>
            <td title="${escapeHTML(item._display_category_names)}">${escapeHTML(item._display_category_names)}</td>
            <td>${escapeHTML(item.param_type)}</td>
            <td>${escapeHTML(item.filter_type)}</td>
            <td>${escapeHTML(item.unit)}</td>
    `;
    return renderRow(item, idField, content);
}

// –û–ø—Ü—ñ—ó
function renderOptionsHeader() {
    return `
        <th class="sortable" data-sort-key="local_id">ID</th>
        <th class="sortable" data-sort-key="_display_char_name">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞</th>
        <th class="sortable" data-sort-key="name_uk">–ó–Ω–∞—á–µ–Ω–Ω—è (UK)</th>
    `;
}
function renderOptionsRow(item, idField) {
    const content = `
            <td>${escapeHTML(item.local_id)}</td>
            <td title="${escapeHTML(item._display_char_name)}">${escapeHTML(item._display_char_name)}</td>
            <td>${escapeHTML(item.name_uk)}</td>
    `;
    return renderRow(item, idField, content);
}

// –ë—Ä–µ–Ω–¥–∏
function renderBrandsHeader() {
    return `
        <th class="sortable" data-sort-key="local_id">ID</th>
        <th class="sortable" data-sort-key="name">–ù–∞–∑–≤–∞</th>
    `;
}
function renderBrandsRow(item, idField) {
    const content = `
            <td>${escapeHTML(item.local_id)}</td>
            <td>${escapeHTML(item.name)}</td>
    `;
    return renderRow(item, idField, content);
}


// --- –£—Ç–∏–ª—ñ—Ç–∏ —Ç–∞ –û–±—Ä–æ–±–Ω–∏–∫–∏ –ü–æ–¥—ñ–π ---

function escapeHTML(str) {
    if (str === null || str === undefined) return '';
    return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#039;');
}

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è (–¥–µ–ª–µ–≥—É–≤–∞–Ω–Ω—è).
 */
function initEditButtons(tableElement, entity) {
    tableElement.addEventListener('click', (event) => {
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ closest –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∫–ª—ñ–∫—É –Ω–∞ SVG –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –∫–Ω–æ–ø–∫–∏
        const editButton = event.target.closest('.btn-edit');
        if (editButton) {
            const id = editButton.dataset.id;
            handleEditClick(entity, id);
        }
    });
}

/**
 * –û–±—Ä–æ–±–ª—è—î –∫–ª—ñ–∫ –ø–æ –∫–Ω–æ–ø—Ü—ñ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.
 */
async function handleEditClick(entity, id) {
    // –î–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–∏—Ä—ñ –¥–∞–Ω—ñ (rawDataCache), —â–æ–± –º–∞—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ ID
    const data = rawDataCache[entity];
    if (!data) {
        toastError("–î–∞–Ω—ñ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.");
        return;
    }

    // (–ü—É–Ω–∫—Ç 2) –£–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–æ –ø–æ—à—É–∫ –ø–æ local_id
    const itemData = data.find(item => item.local_id === id);
    if (!itemData) {
        toastError(`–ï–ª–µ–º–µ–Ω—Ç –∑ ID ${id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.`);
        return;
    }

    switch (entity) {
        case 'categories':
            showCategoryForm(itemData);
            break;
        case 'characteristics':
            showCharacteristicForm(itemData);
            break;
        case 'options':
            showOptionForm(itemData);
            break;
        case 'brands':
            showBrandForm(itemData);
            break;
    }
}
/**
 * scripts/components/tabs.js
 * 
 * –õ–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –≤–∫–ª–∞–¥–æ–∫ (–°—É—Ç–Ω–æ—Å—Ç–µ–π).
 */

import { renderActiveTable } from './table.js';
import { resetPagination } from '../features/pagination.js';
import { clearSelection } from '../features/selection.js';
import { resetSorting } from '../features/sorting.js';
import { clearSearch } from '../features/search.js';

let activeEntity = 'categories';

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –ø–µ—Ä–µ–º–∏–∫–∞—á—ñ –≤–∫–ª–∞–¥–æ–∫.
 */
export function initTabs() {
    const tabLinks = document.querySelectorAll('.tab-nav .tab-link');

    tabLinks.forEach(link => {
        link.addEventListener('click', () => {
            const newEntity = link.dataset.entity;
            if (newEntity === activeEntity) return;

            const activeLink = document.querySelector('.tab-nav .tab-link.active');
            if (activeLink) activeLink.classList.remove('active');
            link.classList.add('active');

            activeEntity = newEntity;

            // –°–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
            clearSelection();
            resetPagination();
            resetSorting();
            clearSearch();
            
            renderActiveTable();
        });
    });
}

export function getActiveEntity() {
    return activeEntity;
}
/**
 * scripts/config/marketplaceEngine.js
 * 
 * "–î–∏–Ω–∞–º—ñ—á–Ω–∏–π –†—É—à—ñ–π –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ñ–≤".
 * (–û–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ Multi-Mapping UI —Ç–∞ –Ω–æ–≤–∏—Ö —Ç–∏–ø—ñ–≤ –ø–æ–ª—ñ–≤, –≤–∫–ª—é—á–∞—é—á–∏ Multiselect Dictionary)
 */

import { getMarketplaces, getMarketplaceFields } from '../api/googleSheetService.js';
import { Multiselect } from '../components/multiselect.js'; // (–ü—É–Ω–∫—Ç 8)

const configuration = {
    marketplaces: {},
    fields: {},
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Å—Ç–∞–Ω—Å–∏ Multiselect –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö —Ç–∞ –æ—á–∏—â–µ–Ω–Ω—è
    activeMultiselects: []
};

let isInitialized = false;

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Ä—É—à—ñ–π.
 */
export async function initMarketplaceEngine(forceRefresh = false) {
    if (isInitialized && !forceRefresh) {
        return configuration;
    }

    console.log("[Engine] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Marketplace Engine...");

    try {
        const [marketplacesData, fieldsData] = await Promise.all([
            getMarketplaces(forceRefresh),
            getMarketplaceFields(forceRefresh)
        ]);

        configuration.marketplaces = {};
        configuration.fields = {};

        // 1. –°—Ç—Ä—É–∫—Ç—É—Ä—É–≤–∞–Ω–Ω—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ñ–≤ (–ü—É–Ω–∫—Ç 11)
        marketplacesData.forEach(mp => {
            // –°—Ç–≤–æ—Ä—é—î–º–æ –∑—Ä—É—á–Ω–∏–π –æ–±'—î–∫—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ Multi-Mapping
            mp.multi_map = {
                categories: mp.multi_map_categories === 'TRUE',
                characteristics: mp.multi_map_characteristics === 'TRUE',
                options: mp.multi_map_options === 'TRUE',
                brands: mp.multi_map_brands === 'TRUE',
            };
            configuration.marketplaces[mp.marketplace_id] = mp;
        });

        // 2. –°—Ç—Ä—É–∫—Ç—É—Ä—É–≤–∞–Ω–Ω—è –ø–æ–ª—ñ–≤
        fieldsData.forEach(field => {
            const entityType = field.entity_type;
            const marketplaceId = field.marketplace_id;

            if (!configuration.fields[entityType]) configuration.fields[entityType] = {};
            if (!configuration.fields[entityType][marketplaceId]) configuration.fields[entityType][marketplaceId] = [];

            field.allow_multiple = field.allow_multiple === 'TRUE';
            configuration.fields[entityType][marketplaceId].push(field);
        });

        isInitialized = true;
        console.log("[Engine] Marketplace Engine —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ.");
        return configuration;

    } catch (error) {
        console.error("[Engine] –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Marketplace Engine:", error);
        return configuration; 
    }
}

export function getConfig() {
    return configuration;
}


// --- (–ü—É–Ω–∫—Ç 11) –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è UI (Multi-Mapping Repeater) ---

/**
 * (–ü—É–Ω–∫—Ç 11, 8) –ë—É–¥—É—î UI –¥–ª—è –ø—Ä–∏–≤'—è–∑–æ–∫.
 * @param dictionarySources - –û–±'—î–∫—Ç –∑ –æ–ø—Ü—ñ—è–º–∏ –¥–ª—è –ø–æ–ª—ñ–≤ —Ç–∏–ø—É multiselect_dictionary.
 */
export function renderMappingUI(container, entityType, existingMappings = [], dictionarySources = {}) {
    if (!container) return;
    container.innerHTML = '';
    // –û—á–∏—â—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —ñ–Ω—Å—Ç–∞–Ω—Å–∏ Multiselect –ø—Ä–∏ –Ω–æ–≤–æ–º—É —Ä–µ–Ω–¥–µ—Ä—ñ
    configuration.activeMultiselects.forEach(ms => ms.destroy());
    configuration.activeMultiselects = [];

    const entityFieldsConfig = configuration.fields[entityType];

    if (!entityFieldsConfig || Object.keys(configuration.marketplaces).length === 0) {
        container.innerHTML = '<p>–ù–µ–º–∞—î –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ñ–≤ –∞–±–æ –ø–æ–ª—ñ–≤ –¥–ª—è —Ü—ñ—î—ó —Å—É—Ç–Ω–æ—Å—Ç—ñ.</p>';
        return;
    }

    // –Ü—Ç–µ—Ä—É—î–º–æ –ø–æ –í–°–Ü–• –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö
    for (const marketplaceId in configuration.marketplaces) {
        const marketplaceInfo = configuration.marketplaces[marketplaceId];
        const fieldsForThisMarketplace = entityFieldsConfig[marketplaceId];

        if (!fieldsForThisMarketplace || fieldsForThisMarketplace.length === 0) {
            continue;
        }

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ –¥–æ–∑–≤–æ–ª–µ–Ω–æ Multi-Mapping
        const allowMultiMapping = marketplaceInfo.multi_map[entityType] || false;

        // –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä—É–ø—É (—Å–µ–∫—Ü—ñ—é) –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—É
        const groupElement = createMarketplaceGroup(marketplaceId, marketplaceInfo);
        const instancesContainer = groupElement.querySelector('.mapping-instances-container');

        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ—Å–Ω—É—é—á—ñ –ø—Ä–∏–≤'—è–∑–∫–∏ –¥–ª—è —Ü—å–æ–≥–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—É
        const currentMappingsForMP = existingMappings.filter(m => m.marketplace_id === marketplaceId);

        if (currentMappingsForMP.length > 0) {
            // –†–µ–Ω–¥–µ—Ä–∏–º–æ —ñ—Å–Ω—É—é—á—ñ —ñ–Ω—Å—Ç–∞–Ω—Å–∏
            currentMappingsForMP.forEach(mappingData => {
                renderMappingInstance(instancesContainer, fieldsForThisMarketplace, mappingData, allowMultiMapping, dictionarySources);
            });
        } else {
            // –†–µ–Ω–¥–µ—Ä–∏–º–æ –æ–¥–∏–Ω –ø–æ—Ä–æ–∂–Ω—ñ–π —ñ–Ω—Å—Ç–∞–Ω—Å
            renderMappingInstance(instancesContainer, fieldsForThisMarketplace, {}, allowMultiMapping, dictionarySources);
        }

        // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "+ –î–æ–¥–∞—Ç–∏ —â–µ", —è–∫—â–æ –¥–æ–∑–≤–æ–ª–µ–Ω–æ Multi-Mapping
        if (allowMultiMapping) {
            const addButton = document.createElement('button');
            addButton.type = 'button';
            addButton.className = 'button button-text btn-add-mapping'; // –í–∞—à—ñ M3 –∫–ª–∞—Å–∏
            addButton.textContent = '+ –î–æ–¥–∞—Ç–∏ –ø—Ä–∏–≤\'—è–∑–∫—É';
            addButton.addEventListener('click', () => {
                renderMappingInstance(instancesContainer, fieldsForThisMarketplace, {}, true, dictionarySources);
            });
            groupElement.appendChild(addButton);
        }

        container.appendChild(groupElement);
    }
}

function createMarketplaceGroup(marketplaceId, marketplaceInfo) {
    const groupElement = document.createElement('div');
    groupElement.classList.add('marketplace-group');
    groupElement.dataset.marketplaceId = marketplaceId;

    groupElement.innerHTML = `
        <div class="marketplace-header">${escapeHTML(marketplaceInfo.display_name)}</div>
        <div class="mapping-instances-container"></div>
    `;
    return groupElement;
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏—Ç—å –æ–¥–∏–Ω —ñ–Ω—Å—Ç–∞–Ω—Å –ø—Ä–∏–≤'—è–∑–∫–∏ (–Ω–∞–±—ñ—Ä –ø–æ–ª—ñ–≤).
 */
function renderMappingInstance(container, fieldsConfig, mappingData, allowRemove, dictionarySources) {
    const instanceElement = document.createElement('div');
    instanceElement.classList.add('mapping-instance');
    
    // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –≤–∏–¥–∞–ª–µ–Ω–Ω—è —ñ–Ω—Å—Ç–∞–Ω—Å—É (—è–∫—â–æ –¥–æ–∑–≤–æ–ª–µ–Ω–æ)
    if (allowRemove) {
        const actionsDiv = document.createElement('div');
        actionsDiv.classList.add('mapping-actions');
        const removeButton = document.createElement('button');
        removeButton.type = 'button';
        removeButton.className = 'btn-remove-mapping';
        removeButton.innerHTML = '&times;'; // X icon
        removeButton.title = '–í–∏–¥–∞–ª–∏—Ç–∏ —Ü—é –ø—Ä–∏–≤\'—è–∑–∫—É';
        removeButton.addEventListener('click', () => {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –Ω–µ —î–¥–∏–Ω–∏–π —ñ–Ω—Å—Ç–∞–Ω—Å. –Ø–∫—â–æ —î–¥–∏–Ω–∏–π, –æ—á–∏—â—É—î–º–æ –ø–æ–ª—è –∑–∞–º—ñ—Å—Ç—å –≤–∏–¥–∞–ª–µ–Ω–Ω—è.
            if (container.children.length > 1) {
                 // (–ü—É–Ω–∫—Ç 8) –û—á–∏—â—É—î–º–æ Multiselect –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º DOM
                destroyMultiselectsInInstance(instanceElement);
                container.removeChild(instanceElement);
            } else {
                // –û—á–∏—â–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ —î–¥–∏–Ω–æ–≥–æ —ñ–Ω—Å—Ç–∞–Ω—Å—É
                clearInstanceFields(instanceElement);
            }
        });
        actionsDiv.appendChild(removeButton);
        instanceElement.appendChild(actionsDiv);
    }

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø–æ–ª—ñ–≤ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —ñ–Ω—Å—Ç–∞–Ω—Å—É
    fieldsConfig.forEach(fieldConfig => {
        const fieldValue = mappingData[fieldConfig.field_key] || '';
        // (–ü—É–Ω–∫—Ç 8) –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ generateFieldElement –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ JS –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
        const fieldElement = generateFieldElement(fieldConfig, fieldValue, dictionarySources);
        instanceElement.appendChild(fieldElement);
    });

    container.appendChild(instanceElement);
}

/**
 * (–ü—É–Ω–∫—Ç 8) –ì–µ–Ω–µ—Ä—É—î DOM Element –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è.
 */
function generateFieldElement(config, value, dictionarySources) {
    const group = document.createElement('div');
    group.className = 'form-group';

    const label = document.createElement('label');
    label.textContent = config.display_name;

    const escapedKey = escapeHTML(config.field_key);
    let inputElement;

    switch (config.field_type) {
        case 'text':
        case 'textarea': // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ input
            inputElement = document.createElement('input');
            inputElement.type = 'text';
            inputElement.className = 'input-field'; // –í–∞—à M3 –∫–ª–∞—Å
            inputElement.value = value;
            break;
        
        case 'number': // (–ü—É–Ω–∫—Ç 8)
            inputElement = document.createElement('input');
            inputElement.type = 'number';
            inputElement.className = 'input-field';
            inputElement.value = value;
            break;

        case 'readonly': // (–ü—É–Ω–∫—Ç 8)
            inputElement = document.createElement('input');
            inputElement.type = 'text';
            inputElement.className = 'input-field';
            inputElement.value = value;
            inputElement.readOnly = true;
            break;

        case 'boolean':
            inputElement = document.createElement('input');
            inputElement.type = 'checkbox';
            inputElement.className = 'checkbox'; // –í–∞—à M3 –∫–ª–∞—Å
            inputElement.checked = String(value).toUpperCase() === 'TRUE';
            group.classList.add('boolean-group');
            // –î–ª—è boolean –º—ñ–Ω—è—î–º–æ –ø–æ—Ä—è–¥–æ–∫: —Å–ø–æ—á–∞—Ç–∫—É input, –ø–æ—Ç—ñ–º label
            group.appendChild(inputElement);
            group.appendChild(label);
            inputElement.dataset.fieldKey = escapedKey;
            return group;

        case 'select': // (–ü—É–Ω–∫—Ç 10) –ü—Ä–æ—Å—Ç–∏–π select –∑ options_source
            inputElement = document.createElement('select');
            inputElement.className = 'select-dropdown'; // –í–∞—à M3 –∫–ª–∞—Å
            
            inputElement.add(new Option('-- –û–±–µ—Ä—ñ—Ç—å --', ''));

            if (config.options_source) {
                const options = config.options_source.split(',');
                options.forEach(optionStr => {
                    const parts = optionStr.split('|');
                    const optValue = parts[0].trim();
                    const optLabel = parts.length > 1 ? parts[1].trim() : optValue;
                    const option = new Option(optLabel, optValue);
                    if (optValue === value) option.selected = true;
                    inputElement.add(option);
                });
            }
            break;

        case 'multiselect_dictionary': // (–ü—É–Ω–∫—Ç 8)
             // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è Multiselect
            const multiselectContainer = document.createElement('div');
            const dictionaryKey = config.options_source;
            const options = dictionarySources[dictionaryKey] || [];
            const initialValues = value ? value.split(',').map(v => v.trim()) : [];
            
            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Multiselect
            const multiselectInstance = new Multiselect(multiselectContainer, options, initialValues);
            configuration.activeMultiselects.push(multiselectInstance);
            
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–ª—é—á –≤ data-–∞—Ç—Ä–∏–±—É—Ç—ñ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö
            multiselectContainer.dataset.fieldKey = escapedKey;
            multiselectContainer.dataset.isMultiselect = 'true';

            group.appendChild(label);
            group.appendChild(multiselectContainer);
            return group;

        default:
            inputElement = document.createElement('input');
            inputElement.type = 'text';
            inputElement.className = 'input-field';
            inputElement.value = value;
    }

    inputElement.dataset.fieldKey = escapedKey;
    group.appendChild(label);
    group.appendChild(inputElement);
    return group;
}

/**
 * (–ü—É–Ω–∫—Ç 11, 8) –ó–±–∏—Ä–∞—î –¥–∞–Ω—ñ –∑ –¥–∏–Ω–∞–º—ñ—á–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏—Ö –ø–æ–ª—ñ–≤ UI.
 */
export function collectMappingData(container) {
    const allMappings = [];
    if (!container) return allMappings;

    const marketplaceGroups = container.querySelectorAll('.marketplace-group');

    marketplaceGroups.forEach(group => {
        const marketplaceId = group.dataset.marketplaceId;
        const instances = group.querySelectorAll('.mapping-instance');

        instances.forEach(instance => {
            const mappingData = {
                marketplace_id: marketplaceId,
                _hasData: false // –ü—Ä–∞–ø–æ—Ä–µ—Ü—å –¥–ª—è GSS
            };

            // –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö –∑—ñ –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–ª—ñ–≤
            const inputs = instance.querySelectorAll('[data-field-key]:not([data-is-multiselect])');
            inputs.forEach(input => {
                const key = input.dataset.fieldKey;
                let value = '';

                if (input.type === 'checkbox') {
                    value = input.checked ? 'TRUE' : 'FALSE';
                } else {
                    value = input.value;
                }

                mappingData[key] = value;
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∑–Ω–∞—á—É—â–∏—Ö –¥–∞–Ω–∏—Ö
                if (value && value !== 'FALSE') {
                    mappingData._hasData = true;
                }
            });

            // (–ü—É–Ω–∫—Ç 8) –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö –∑ Multiselect
            const multiselectContainers = instance.querySelectorAll('[data-is-multiselect="true"]');
            multiselectContainers.forEach(msContainer => {
                const key = msContainer.dataset.fieldKey;
                // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —ñ–Ω—Å—Ç–∞–Ω—Å Multiselect
                const msInstance = configuration.activeMultiselects.find(ms => ms.container === msContainer);
                if (msInstance) {
                    const values = msInstance.getValues();
                    mappingData[key] = values.join(',');
                    if (values.length > 0) {
                        mappingData._hasData = true;
                    }
                }
            });
            
            // –î–æ–¥–∞—î–º–æ –æ–±'—î–∫—Ç –ø—Ä–∏–≤'—è–∑–∫–∏ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É. GSS –æ–±—Ä–æ–±–∏—Ç—å –ø—Ä–∞–ø–æ—Ä–µ—Ü—å _hasData.
            allMappings.push(mappingData);
        });
    });

    return allMappings;
}

// –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —ñ–Ω—Å—Ç–∞–Ω—Å—ñ–≤
function destroyMultiselectsInInstance(instanceElement) {
    const multiselectsInInstance = instanceElement.querySelectorAll('.multiselect-container');
    multiselectsInInstance.forEach(msContainer => {
        const msInstance = configuration.activeMultiselects.find(ms => ms.container === msContainer);
        if (msInstance) {
            msInstance.destroy();
            configuration.activeMultiselects = configuration.activeMultiselects.filter(ms => ms !== msInstance);
        }
    });
}

function clearInstanceFields(instanceElement) {
    // –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö –ø–æ–ª—ñ–≤
    instanceElement.querySelectorAll('input, select, textarea').forEach(input => {
        if (input.type === 'checkbox') {
            input.checked = false;
        } else if (!input.classList.contains('multiselect-search')) {
            // –Ü–≥–Ω–æ—Ä—É—î–º–æ input –ø–æ—à—É–∫—É –≤ Multiselect
            input.value = '';
        }
    });
    // (–ü—É–Ω–∫—Ç 8) –û—á–∏—â–µ–Ω–Ω—è Multiselect
    const multiselectsInInstance = instanceElement.querySelectorAll('.multiselect-container');
    multiselectsInInstance.forEach(msContainer => {
        const msInstance = configuration.activeMultiselects.find(ms => ms.container === msContainer);
        if (msInstance) {
            // –û—á–∏—â—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ
            msInstance.selectedValues.clear();
            msInstance.renderSelectedItems();
        }
    });
}

function escapeHTML(str) {
    if (str === null || str === undefined) return '';
    return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#039;');
}
/**
 * scripts/features/pagination.js
 *
 * –ü–û–í–ù–ê –†–û–ë–û–ß–ê –í–ï–†–°–Ü–Ø: –õ–æ–≥—ñ–∫–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó –∑ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ —Å—Ç–æ—Ä—ñ–Ω–æ–∫
 * —Ç–∞ —Ä–æ–±–æ—á–∏–º FAB-–º–µ–Ω—é –¥–ª—è –≤–∏–±–æ—Ä—É —Ä–æ–∑–º—ñ—Ä—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏.
 */

let renderCallback = null;
let currentPage = 1;
let pageSize = 10; // –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
let totalItems = 0;

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é.
 * @param {function} onPageChangeCallback - –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –±—É–¥–µ –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∞–±–æ —ó—ó —Ä–æ–∑–º—ñ—Ä—É.
 */
export function initPagination(onPageChangeCallback) {
    renderCallback = onPageChangeCallback;

    const paginationContainer = document.querySelector('.pagination-container');
    const pageSizeSelector = document.getElementById('page-size-selector');

    if (!paginationContainer || !pageSizeSelector) {
        console.error("–ï–ª–µ–º–µ–Ω—Ç–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!");
        return;
    }

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –ª–µ–π–±–ª–∞
    const pageSizeLabel = document.getElementById('page-size-label');
    if (pageSizeLabel) {
        pageSizeLabel.textContent = pageSize;
    }

    // --- –õ–û–ì–Ü–ö–ê –°–ü–ê–î–ù–û–ì–û –ú–ï–ù–Æ (–Ø–ö–û–á –ù–ï –í–ò–°–¢–ê–ß–ê–õ–û) ---

    // 1. –í—ñ–¥–∫—Ä–∏—Ç—Ç—è/–∑–∞–∫—Ä–∏—Ç—Ç—è –º–µ–Ω—é –ø—Ä–∏ –∫–ª—ñ–∫—É –Ω–∞ –≥–æ–ª–æ–≤–Ω—É –∫–Ω–æ–ø–∫—É
    pageSizeSelector.addEventListener('click', (event) => {
        if (event.target.closest('.page-size-trigger')) {
            pageSizeSelector.classList.toggle('is-open');
        }
    });

    // 2. –ó–∞–∫—Ä–∏—Ç—Ç—è –º–µ–Ω—é –ø—Ä–∏ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –π–æ–≥–æ –º–µ–∂–∞–º–∏
    document.addEventListener('click', (event) => {
        if (!pageSizeSelector.contains(event.target)) {
            pageSizeSelector.classList.remove('is-open');
        }
    });


    // --- –ó–ê–ì–ê–õ–¨–ù–ò–ô –û–ë–†–û–ë–ù–ò–ö –ö–õ–Ü–ö–Ü–í –î–õ–Ø –í–°–Ü–Ñ–á –ü–ê–ì–Ü–ù–ê–¶–Ü–á ---

    paginationContainer.addEventListener('click', (event) => {
        const button = event.target.closest('.page-btn, .page-size-option');
        if (!button || button.disabled) return;

        let needsRender = false;

        // --- –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —Ä–æ–∑–º—ñ—Ä—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏ ---
        if (button.classList.contains('page-size-option')) {
            const newSize = parseInt(button.dataset.pageSize, 10);
            if (newSize !== pageSize) {
                pageSize = newSize;
                currentPage = 1; // –°–∫–∏–¥–∞—î–º–æ –Ω–∞ –ø–µ—Ä—à—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ä–æ–∑–º—ñ—Ä—É
                needsRender = true;

                // –û–Ω–æ–≤–ª—é—î–º–æ –ª–µ–π–±–ª –Ω–∞ –∫–Ω–æ–ø—Ü—ñ
                if (pageSizeLabel) {
                    pageSizeLabel.textContent = pageSize > 99999 ? '–í—Å—ñ' : pageSize;
                }
            }
            // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –º–µ–Ω—é –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É
            pageSizeSelector.classList.remove('is-open');
        }

        // --- –û–±—Ä–æ–±–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö ---
        if (button.classList.contains('page-btn')) {
            const newPage = parseInt(button.dataset.page, 10);
            const action = button.dataset.action;
            const totalPages = getTotalPages();

            if (newPage && newPage !== currentPage) {
                currentPage = newPage;
                needsRender = true;
            } else if (action === 'prev' && currentPage > 1) {
                currentPage--;
                needsRender = true;
            } else if (action === 'next' && currentPage < totalPages) {
                currentPage++;
                needsRender = true;
            }
        }

        // –í–∏–∫–ª–∏–∫–∞—î–º–æ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä —Ç–∞–±–ª–∏—Ü—ñ, —è–∫—â–æ –≤—ñ–¥–±—É–ª–∏—Å—è –∑–º—ñ–Ω–∏
        if (needsRender && renderCallback) {
            renderCallback();
        }
    });
}

/**
 * –û–Ω–æ–≤–ª—é—î —Ç–∞ –ø–µ—Ä–µ–º–∞–ª—å–æ–≤—É—î –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö.
 */
export function updatePaginationControls(currentTotal) {
    totalItems = currentTotal;
    const totalPages = getTotalPages();
    const navContainer = document.getElementById('pagination-nav');

    if (!navContainer) return;

    if (currentPage > totalPages && totalPages > 0) {
        currentPage = totalPages;
        if (renderCallback) renderCallback();
        return;
    }

    navContainer.innerHTML = '';
    if (totalPages <= 1) return;

    const prevBtn = createPageButton({ icon: '&lt;', action: 'prev', disabled: currentPage === 1 });
    navContainer.appendChild(prevBtn);

    const pageNumbers = getPageNumbers(totalPages, currentPage);
    pageNumbers.forEach(pageNum => {
        if (typeof pageNum === 'string') {
            const ellipsis = document.createElement('span');
            ellipsis.className = 'page-ellipsis';
            ellipsis.textContent = '...';
            navContainer.appendChild(ellipsis);
        } else {
            navContainer.appendChild(createPageButton({
                text: pageNum,
                page: pageNum,
                active: pageNum === currentPage
            }));
        }
    });

    const nextBtn = createPageButton({ icon: '&gt;', action: 'next', disabled: currentPage >= totalPages });
    navContainer.appendChild(nextBtn);
}


// --- –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ---

export function resetPagination() {
    currentPage = 1;
}

export function getPaginatedData(data) {
    const startIndex = (currentPage - 1) * pageSize;
    const endIndex = startIndex + pageSize;
    return data.slice(startIndex, endIndex);
}

function getTotalPages() {
    if (totalItems === 0 || pageSize === 0) return 1;
    return Math.ceil(totalItems / pageSize);
}

function createPageButton({ text, icon, page, action, active = false, disabled = false }) {
    const btn = document.createElement('button');
    btn.className = 'page-btn';
    if (active) btn.classList.add('active');
    if (page) btn.dataset.page = page;
    if (action) btn.dataset.action = action;
    btn.disabled = disabled;
    btn.innerHTML = text || icon;
    return btn;
}

function getPageNumbers(totalPages, currentPage, maxVisible = 7) {
    if (totalPages <= maxVisible) {
        return Array.from({ length: totalPages }, (_, i) => i + 1);
    }
    const sideWidth = Math.floor((maxVisible - 3) / 2);
    const leftWidth = currentPage - 1;
    const rightWidth = totalPages - currentPage;
    if (leftWidth < sideWidth + 1) {
        return [...Array.from({ length: maxVisible - 2 }, (_, i) => i + 1), '...', totalPages];
    }
    if (rightWidth < sideWidth + 1) {
        return [1, '...', ...Array.from({ length: maxVisible - 2 }, (_, i) => totalPages - (maxVisible - 3) + i)];
    }
    return [1, '...', ...Array.from({ length: maxVisible - 4 }, (_, i) => currentPage - sideWidth + i), '...', totalPages];
}
/**
 * scripts/features/search.js
 * 
 * (–ü—É–Ω–∫—Ç 9) –õ–æ–≥—ñ–∫–∞ –ø–æ—à—É–∫—É —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –¥–ª—è —Ç–∞–±–ª–∏—Ü—å –¥–∞–Ω–∏—Ö.
 */

import { resetPagination } from './pagination.js';

let currentQuery = '';
let renderCallback = null;

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –µ–ª–µ–º–µ–Ω—Ç –ø–æ—à—É–∫—É.
 */
export function initSearch(onSearchCallback) {
    renderCallback = onSearchCallback;
    const searchInput = document.getElementById('search-input');

    if (searchInput) {
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ–¥—ñ—é 'input' –¥–ª—è –º–∏—Ç—Ç—î–≤–æ–≥–æ –ø–æ—à—É–∫—É –ø—ñ–¥ —á–∞—Å –≤–≤–µ–¥–µ–Ω–Ω—è
        searchInput.addEventListener('input', (event) => {
            const newQuery = event.target.value.trim().toLowerCase();
            if (newQuery !== currentQuery) {
                currentQuery = newQuery;
                // –°–∫–∏–¥–∞—î–º–æ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é –ø—Ä–∏ –Ω–æ–≤–æ–º—É –ø–æ—à—É–∫—É
                resetPagination();
                // –í–∏–∫–ª–∏–∫–∞—î–º–æ –∫–æ–ª–±–µ–∫ (–∑–∞–∑–≤–∏—á–∞–π refreshActiveTable(false)) –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
                if (renderCallback) renderCallback();
            }
        });
    }
}

/**
 * –û—á–∏—â—É—î –ø–æ—à—É–∫ (–≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –∑–º—ñ–Ω—ñ –≤–∫–ª–∞–¥–∫–∏).
 */
export function clearSearch() {
    currentQuery = '';
    const searchInput = document.getElementById('search-input');
    if (searchInput) {
        searchInput.value = '';
    }
}

/**
 * –§—ñ–ª—å—Ç—Ä—É—î –¥–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É.
 */
export function getFilteredData(data) {
    if (!currentQuery || !data) {
        return data;
    }

    return data.filter(item => {
        // –ü–æ—à—É–∫ –ø–æ –≤—Å—ñ—Ö –ø–æ–ª—è—Ö –æ–±'—î–∫—Ç–∞
        for (const key in item) {
            // (–ü—É–Ω–∫—Ç 5, 9) –®—É–∫–∞—î–º–æ —Ç–∞–∫–æ–∂ —É –ø–æ–ª—è—Ö _display_... (—è–∫—ñ –º—ñ—Å—Ç—è—Ç—å –Ω–∞–∑–≤–∏ –∑–∞–º—ñ—Å—Ç—å ID)
            // –Ü–≥–Ω–æ—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –ø–æ–ª—è, —è–∫ _rowIndex
            if (key === '_rowIndex') continue;

            const value = item[key];
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–Ω–∞—á–µ–Ω–Ω—è —ñ—Å–Ω—É—î —Ç–∞ —á–∏ –º—ñ—Å—Ç–∏—Ç—å –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç
            if (value && String(value).toLowerCase().includes(currentQuery)) {
                return true;
            }
        }
        return false;
    });
}
export function initCustomSelects() {
    document.querySelectorAll('select[data-custom-select]').forEach(selectEl => {
        if (!selectEl.closest('.custom-select-wrapper')) {
            new CustomSelect(selectEl);
        }
    });
}

export function reinitializeCustomSelect(selectElement) {
    if (!selectElement) return;
    const existingWrapper = selectElement.closest('.custom-select-wrapper');
    if (existingWrapper) {
        // (–ù–û–í–ï) –ó—É–ø–∏–Ω—è—î–º–æ —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—á –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –≤–∏—Ç–æ–∫—ñ–≤ –ø–∞–º'—è—Ç—ñ
        if (selectElement.customSelect && selectElement.customSelect.observer) {
            selectElement.customSelect.observer.disconnect();
        }
        existingWrapper.parentNode.insertBefore(selectElement, existingWrapper);
        existingWrapper.remove();
        selectElement.style.display = '';
    }
    new CustomSelect(selectElement);
}

class CustomSelect {
    constructor(originalSelect) {
        this.originalSelect = originalSelect;
        this.originalSelect.customSelect = this;
        this.isMultiSelect = originalSelect.multiple;
        
        this._buildDOM();
        this._populateOptions();
        
        // (–ù–û–í–ï) –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ ResizeObserver –¥–ª—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É
        this.observer = new ResizeObserver(() => {
            // –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–∏ –∫–æ–∂–Ω—ñ–π –∑–º—ñ–Ω—ñ —Ä–æ–∑–º—ñ—Ä—É
            this._updateSelection();
        });
        this.observer.observe(this.trigger); // –ü–æ—á–∏–Ω–∞—î–º–æ —Å—Ç–µ–∂–∏—Ç–∏ –∑–∞ –ø–æ–ª–µ–º –≤–∏–±–æ—Ä—É

        this._updateSelection(); 
        this._bindEvents();
    }

    _buildDOM() {
        this.wrapper = this._createElement('div', { class: 'custom-select-wrapper' });
        this.trigger = this._createElement('div', { class: 'custom-select-trigger' });
        this.valueContainer = this._createElement('div', { class: 'custom-select-value-container' });
        this.arrow = this._createArrowSVG();
        this.panel = this._createElement('div', { class: 'custom-select-panel' });
        
        // (–ù–û–í–ï) –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —á—ñ–ø—ñ–≤ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–≤–Ω–µ–Ω–Ω—ñ
        this.overflowChipContainer = this._createElement('div', { class: 'custom-select-overflow-chips' });

        this.optionsList = this._createElement('ul', { class: 'custom-select-options', role: 'listbox' });

        this.originalSelect.style.display = 'none';
        this.originalSelect.parentNode.insertBefore(this.wrapper, this.originalSelect);
        
        this.trigger.appendChild(this.valueContainer);
        this.trigger.appendChild(this.arrow);
        this.wrapper.appendChild(this.trigger);
        this.wrapper.appendChild(this.panel);
        this.wrapper.appendChild(this.originalSelect);

        this.panel.appendChild(this.overflowChipContainer); // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä

        if (Array.from(this.originalSelect.options).length > 5) {
            const searchWrapper = this._createElement('div', { class: 'custom-select-search-wrapper' });
            this.searchInput = this._createElement('input', { type: 'text', class: 'custom-select-search', placeholder: '–ü–æ—à—É–∫...' });
            searchWrapper.appendChild(this.searchInput);
            this.panel.appendChild(searchWrapper);
        }
        
        this.panel.appendChild(this.optionsList);
    }

    _populateOptions() {
        this.optionsList.innerHTML = '';
        Array.from(this.originalSelect.options).forEach(option => {
            if (!option.value && this.isMultiSelect) return; // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –æ–ø—Ü—ñ—ó –≤ –º—É–ª—å—Ç–∏—Å–µ–ª–µ–∫—Ç—ñ

            const optionEl = this._createElement('li', {
                class: 'custom-select-option',
                'data-value': option.value,
                role: 'option'
            });
            optionEl.innerHTML = option.dataset.htmlContent || option.textContent;
            this.optionsList.appendChild(optionEl);
        });
    }

    /**
     * (–ü–û–í–ù–Ü–°–¢–Æ –ü–ï–†–ï–ü–ò–°–ê–ù–û) –û–Ω–æ–≤–ª—é—î –≤–∏–¥–∏–º—É —á–∞—Å—Ç–∏–Ω—É —ñ –ø–∞–Ω–µ–ª—å —á—ñ–ø—ñ–≤.
     */
    _updateSelection() {
        const selectedOptions = Array.from(this.originalSelect.options).filter(opt => opt.selected && opt.value);
        
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω is-selected –¥–ª—è —Å–ø–∏—Å–∫—É
        this.optionsList.querySelectorAll('.custom-select-option').forEach(customOpt => {
            const isSelected = selectedOptions.some(selOpt => selOpt.value === customOpt.dataset.value);
            customOpt.classList.toggle('is-selected', isSelected);
        });

        if (!this.isMultiSelect) {
            this.valueContainer.innerHTML = selectedOptions.length > 0
                ? (selectedOptions[0].dataset.htmlContent || selectedOptions[0].textContent)
                : `<span class="custom-select-placeholder">${this.originalSelect.placeholder || '–í–∏–±–µ—Ä—ñ—Ç—å...'}</span>`;
            return;
        }

        // –õ–æ–≥—ñ–∫–∞ –¥–ª—è –º—É–ª—å—Ç–∏—Å–µ–ª–µ–∫—Ç—É
        this.valueContainer.innerHTML = '';
        this.overflowChipContainer.innerHTML = '';
        this.overflowChipContainer.style.display = 'none';

        if (selectedOptions.length === 0) {
            this.valueContainer.innerHTML = `<span class="custom-select-placeholder">${this.originalSelect.placeholder || '–í–∏–±–µ—Ä—ñ—Ç—å...'}</span>`;
            return;
        }
        
        const chips = selectedOptions.map(option => this._createChip(option));
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ–ø–æ–≤–Ω–µ–Ω–Ω—è
        chips.forEach(chip => this.valueContainer.appendChild(chip));
        const isOverflowing = this.valueContainer.scrollHeight > this.valueContainer.clientHeight;
        
        if (isOverflowing) {
            this.valueContainer.innerHTML = '';
            const summaryChip = this._createElement('div', { class: 'custom-select-chip is-summary' });
            summaryChip.textContent = selectedOptions.length;
            this.valueContainer.appendChild(summaryChip);

            chips.forEach(chip => this.overflowChipContainer.appendChild(chip));
            this.overflowChipContainer.style.display = 'flex';
        }
    }
    _createChip(option) {
        const chip = this._createElement('div', { class: 'custom-select-chip' });
        
        // (–û–ù–û–í–õ–ï–ù–û) –ù–æ–≤–∞ –ª–æ–≥—ñ–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á—ñ–ø–∞
        const shortName = option.dataset.name;
        const level = parseInt(option.dataset.level, 10);
        if (shortName && !isNaN(level)) {
            const prefix = ' / '.repeat(level);
            chip.textContent = `${prefix}${shortName}`.trim();
        } else {
            chip.textContent = option.textContent;
        }
        
        const removeBtn = this._createElement('button', { type: 'button', class: 'custom-select-chip__remove' });
        removeBtn.innerHTML = '&times;';
        
        removeBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            const correspondingOption = Array.from(this.originalSelect.options).find(opt => opt.value === option.value);
            if(correspondingOption) correspondingOption.selected = false;
            this.originalSelect.dispatchEvent(new Event('change', { bubbles: true }));
            this._updateSelection();
        });

        chip.appendChild(removeBtn);
        return chip;
    }

    _bindEvents() {
        this.trigger.addEventListener('click', () => this.wrapper.classList.toggle('is-open'));

        this.optionsList.addEventListener('click', (e) => {
            const optionEl = e.target.closest('.custom-select-option');
            if (optionEl && 'value' in optionEl.dataset) {
                const option = Array.from(this.originalSelect.options).find(opt => opt.value === optionEl.dataset.value);
                if (this.isMultiSelect) {
                    option.selected = !option.selected;
                } else {
                    this.originalSelect.value = option.value;
                    this.wrapper.classList.remove('is-open');
                }
                this.originalSelect.dispatchEvent(new Event('change', { bubbles: true }));
                this._updateSelection();
            }
        });

        document.addEventListener('click', (e) => {
            if (!this.wrapper.contains(e.target)) this.wrapper.classList.remove('is-open');
        });

        if (this.searchInput) {
            this.searchInput.addEventListener('input', (e) => {
                const query = e.target.value.toLowerCase();
                this.optionsList.querySelectorAll('.custom-select-option').forEach(optEl => {
                    const text = optEl.textContent.toLowerCase();
                    optEl.style.display = text.includes(query) ? '' : 'none';
                });
            });
        }
    }
    /**
     * –§—ñ–ª—å—Ç—Ä—É—î –æ–ø—Ü—ñ—ó —É –≤–∏–ø–∞–¥–∞—é—á–æ–º—É —Å–ø–∏—Å–∫—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—à—É–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É.
     */
    _filterOptions(query) {
        const lowerCaseQuery = query.toLowerCase();
        this.optionsList.querySelectorAll('.custom-select-option').forEach(optEl => {
            const text = optEl.textContent.toLowerCase();
            optEl.classList.toggle('is-hidden', !text.includes(lowerCaseQuery));
        });
    }

    _toggleDropdown() { this.wrapper.classList.toggle('is-open'); }
    _closeDropdown() { this.wrapper.classList.remove('is-open'); }
    _dispatchChangeEvent() { this.originalSelect.dispatchEvent(new Event('change', { bubbles: true })); }
    
    _createArrowSVG() {
        const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        svg.setAttribute('class', 'custom-select-arrow');
        svg.setAttribute('viewBox', '0 0 24 24');
        const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
        path.setAttribute('d', 'M7 10l5 5 5-5z');
        svg.appendChild(path);
        return svg;
    }
    
    _createElement(tag, attributes = {}) {
        const element = document.createElement(tag);
        for (const [key, value] of Object.entries(attributes)) {
            element.setAttribute(key, value);
        }
        return element;
    }
}
/**
 * scripts/features/selection.js
 * 
 * –õ–æ–≥—ñ–∫–∞ –≤–∏–±–æ—Ä—É –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ (—á–µ–∫–±–æ–∫—Å–∏) –≤ —Ç–∞–±–ª–∏—Ü—è—Ö –¥–∞–Ω–∏—Ö.
 */

// –ó–±–µ—Ä—ñ–≥–∞—î –≤–∏–±—Ä–∞–Ω—ñ ID (—è–∫ —Ä—è–¥–∫–∏) –¥–ª—è –∫–æ–∂–Ω–æ—ó —Å—É—Ç–Ω–æ—Å—Ç—ñ: { entity: Set<string> }
const selectedItems = {};
let currentEntity = null;

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –ª–æ–≥—ñ–∫—É –≤–∏–±–æ—Ä—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ.
 */
export function initTableSelection(entity, tableElement) {
    currentEntity = entity;
    if (!selectedItems[entity]) {
        selectedItems[entity] = new Set();
    }

    const tbody = tableElement.querySelector('tbody');
    const selectAllCheckbox = tableElement.querySelector('thead .select-all');

    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏—Ö —á–µ–∫–±–æ–∫—Å—ñ–≤ (–¥–µ–ª–µ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π)
    tbody.addEventListener('change', (event) => {
        if (event.target.classList.contains('row-checkbox')) {
            handleRowCheckboxChange(event.target);
        }
    });

    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è "–í–∏–±—Ä–∞—Ç–∏ –≤—Å–µ"
    if (selectAllCheckbox) {
        selectAllCheckbox.addEventListener('change', () => {
            handleSelectAllChange(selectAllCheckbox, tbody);
        });
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω "–í–∏–±—Ä–∞—Ç–∏ –≤—Å–µ" –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        updateSelectAllState(selectAllCheckbox, tbody);
    }

    updateSelectionUI();
}

function handleRowCheckboxChange(checkbox) {
    const itemId = checkbox.dataset.id;
    const row = checkbox.closest('tr');
    const selectionSet = selectedItems[currentEntity];

    if (checkbox.checked) {
        selectionSet.add(itemId);
        row.classList.add('selected');
    } else {
        selectionSet.delete(itemId);
        row.classList.remove('selected');
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω "–í–∏–±—Ä–∞—Ç–∏ –≤—Å–µ"
    const table = checkbox.closest('table');
    const selectAllCheckbox = table.querySelector('thead .select-all');
    if (selectAllCheckbox) {
        updateSelectAllState(selectAllCheckbox, table.querySelector('tbody'));
    }

    updateSelectionUI();
}

function handleSelectAllChange(selectAllCheckbox, tbody) {
    const isChecked = selectAllCheckbox.checked;
    const checkboxes = tbody.querySelectorAll('.row-checkbox');
    const selectionSet = selectedItems[currentEntity];

    checkboxes.forEach(checkbox => {
        checkbox.checked = isChecked;
        const itemId = checkbox.dataset.id;
        const row = checkbox.closest('tr');

        if (isChecked) {
            selectionSet.add(itemId);
            row.classList.add('selected');
        } else {
            // –ü—Ä–∏ –∑–Ω—è—Ç—Ç—ñ "–í–∏–±—Ä–∞—Ç–∏ –≤—Å–µ" –º–∏ –æ—á–∏—â—É—î–º–æ –≤–∏–±—ñ—Ä —Ç—ñ–ª—å–∫–∏ –¥–ª—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
            selectionSet.delete(itemId);
            row.classList.remove('selected');
        }
    });

    updateSelectionUI();
}

/**
 * –û–Ω–æ–≤–ª—é—î —Å—Ç–∞–Ω —á–µ–∫–±–æ–∫—Å—É "–í–∏–±—Ä–∞—Ç–∏ –≤—Å–µ" –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∏–±–æ—Ä—É –Ω–∞ –ø–æ—Ç–æ—á–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ.
 */
function updateSelectAllState(selectAllCheckbox, tbody) {
    const checkboxes = Array.from(tbody.querySelectorAll('.row-checkbox'));
    if (checkboxes.length === 0) {
        selectAllCheckbox.checked = false;
        selectAllCheckbox.indeterminate = false;
        return;
    }

    const checkedCount = checkboxes.filter(cb => cb.checked).length;

    if (checkedCount === checkboxes.length) {
        selectAllCheckbox.checked = true;
        selectAllCheckbox.indeterminate = false;
    } else if (checkedCount > 0) {
        selectAllCheckbox.checked = false;
        selectAllCheckbox.indeterminate = true; // –ß–∞—Å—Ç–∫–æ–≤–∏–π –≤–∏–±—ñ—Ä
    } else {
        selectAllCheckbox.checked = false;
        selectAllCheckbox.indeterminate = false;
    }
}


/**
 * –û–Ω–æ–≤–ª—é—î –ª—ñ—á–∏–ª—å–Ω–∏–∫ –≤–∏–±—Ä–∞–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —Ç–∞ —Å—Ç–∞–Ω –∫–Ω–æ–ø–æ–∫ –¥—ñ–π.
 */
function updateSelectionUI() {
    const selectionSet = selectedItems[currentEntity] || new Set();
    const count = selectionSet.size;

    const counterElement = document.getElementById('selection-counter');
    const deleteBtn = document.getElementById('delete-btn');
    const mergeBtn = document.getElementById('merge-btn');

    if (counterElement) {
        counterElement.textContent = `–í–∏–±—Ä–∞–Ω–æ: ${count}`;
    }

    if (deleteBtn) {
        deleteBtn.disabled = (count === 0);
    }

    if (mergeBtn) {
        // –ö–Ω–æ–ø–∫–∞ "–û–±'—î–¥–Ω–∞—Ç–∏" –∞–∫—Ç–∏–≤–Ω–∞, —è–∫—â–æ –≤–∏–±—Ä–∞–Ω–æ 2 –∞–±–æ –±—ñ–ª—å—à–µ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        mergeBtn.disabled = (count < 2);
    }
}

/**
 * –û—á–∏—â—É—î –≤–∏–±—ñ—Ä (–≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –∑–º—ñ–Ω—ñ –≤–∫–ª–∞–¥–∫–∏).
 */
export function clearSelection() {
    if (currentEntity && selectedItems[currentEntity]) {
        selectedItems[currentEntity].clear();
    }
}

export function getSelectedIds() {
    if (currentEntity && selectedItems[currentEntity]) {
        return Array.from(selectedItems[currentEntity]);
    }
    return [];
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –≤–∏–±—Ä–∞–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É —Ç–∞–±–ª–∏—Ü—ñ).
 */
export function isSelected(itemId) {
    // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å, —â–æ –ø–æ—Ä—ñ–≤–Ω—é—î–º–æ —Ä—è–¥–∫–∏
    return currentEntity && selectedItems[currentEntity] && selectedItems[currentEntity].has(String(itemId));
}
/**
 * scripts/features/sorting.js
 * 
 * –õ–æ–≥—ñ–∫–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ç–∞–±–ª–∏—Ü—å –¥–∞–Ω–∏—Ö.
 */

// –ó–±–µ—Ä—ñ–≥–∞—î —Å—Ç–∞–Ω —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ—ó —Å—É—Ç–Ω–æ—Å—Ç—ñ: { entity: { key: 'field', direction: 'asc'/'desc' } }
const sortingState = {};
let currentEntity = null;
let renderCallback = null;

/**
 * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∫–æ–ª–±–µ–∫ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É —Ç–∞–±–ª–∏—Ü—ñ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è.
 */
export function setSortingRenderCallback(callback) {
    renderCallback = callback;
}

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ.
 * @param {string} entity - –ù–∞–∑–≤–∞ —Å—É—Ç–Ω–æ—Å—Ç—ñ.
 * @param {HTMLElement} tableElement - –ï–ª–µ–º–µ–Ω—Ç —Ç–∞–±–ª–∏—Ü—ñ.
 */
export function initTableSorting(entity, tableElement) {
    currentEntity = entity;
    if (!sortingState[entity]) {
        // –°—Ç–∞–Ω –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∑–∞ ID –∞–±–æ –ø–µ—Ä—à–∏–º –ø–æ–ª–µ–º)
        sortingState[entity] = { key: getDefaultSortKey(entity), direction: 'asc' };
    }

    const headers = tableElement.querySelectorAll('thead th.sortable');
    headers.forEach(header => {
        header.addEventListener('click', () => handleSortClick(header));
        updateHeaderIndicator(header);
    });
}

function getDefaultSortKey(entity) {
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–ª—é—á –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Å—É—Ç–Ω–æ—Å—Ç–µ–π
    switch (entity) {
        case 'categories':
        case 'characteristics':
        case 'options':
            return 'local_id';
        case 'brands':
            return 'brand_id';
        default:
            return 'id';
    }
}

function handleSortClick(header) {
    const sortKey = header.dataset.sortKey;
    if (!sortKey) return;

    const state = sortingState[currentEntity];

    if (state.key === sortKey) {
        state.direction = state.direction === 'asc' ? 'desc' : 'asc';
    } else {
        state.key = sortKey;
        state.direction = 'asc';
    }

    if (renderCallback) renderCallback();
}

function updateHeaderIndicator(header) {
    const sortKey = header.dataset.sortKey;
    const state = sortingState[currentEntity];

    header.classList.remove('sort-asc', 'sort-desc');
    if (state.key === sortKey) {
        header.classList.add(state.direction === 'asc' ? 'sort-asc' : 'sort-desc');
    }
}

/**
 * –°–æ—Ä—Ç—É—î –¥–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É.
 */
export function getSortedData(data) {
    if (!currentEntity || !sortingState[currentEntity]) {
        return data;
    }

    const { key, direction } = sortingState[currentEntity];
    const modifier = direction === 'asc' ? 1 : -1;

    return [...data].sort((a, b) => {
        let valA = a[key] || '';
        let valB = b[key] || '';

        // –°–ø—Ä–æ–±–∞ —á–∏—Å–ª–æ–≤–æ–≥–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        const numA = parseFloat(valA);
        const numB = parseFloat(valB);

        if (!isNaN(numA) && !isNaN(numB)) {
            return (numA - numB) * modifier;
        }

        // –õ–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ—ñ—á–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä—è–¥–∫—ñ–≤
        return valA.localeCompare(valB) * modifier;
    });
}

export function resetSorting() {
    currentEntity = null; 
}
/**
 * scripts/features/toast.js
 * 
 * –°–∏—Å—Ç–µ–º–∞ —Å–ø–æ–≤—ñ—â–µ–Ω—å (Toasts).
 */

const TOAST_CONTAINER_ID = 'toast-container';

/**
 * –ì–∞—Ä–∞–Ω—Ç—É—î, —â–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å —ñ—Å–Ω—É—î –≤ DOM.
 */
function ensureToastContainer() {
    let container = document.getElementById(TOAST_CONTAINER_ID);
    if (!container) {
        container = document.createElement('div');
        container.id = TOAST_CONTAINER_ID;
        document.body.appendChild(container);
    }
    return container;
}

/**
 * –ü–æ–∫–∞–∑—É—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.
 * @param {string} message - –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
 * @param {string} type - –¢–∏–ø —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è ('success', 'error', 'info', 'warning').
 * @param {number} duration - –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø–æ–∫–∞–∑—É –≤ –º—Å (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 3000).
 */
export function showToast(message, type = 'info', duration = 3000) {
    const container = ensureToastContainer();
    const toast = document.createElement('div');
    toast.classList.add('toast', `toast-${type}`);
    
    // –î–æ–¥–∞—î–º–æ —ñ–∫–æ–Ω–∫—É –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–∏–ø—É
    let icon = '';
    switch (type) {
        case 'success': icon = '‚úî'; break;
        case 'error': icon = '‚úñ'; break;
        case 'warning': icon = '‚ö†'; break;
        default: icon = '‚Ñπ'; break;
    }

    toast.innerHTML = `<span class="toast-icon">${icon}</span><span class="toast-message">${message}</span>`;

    container.appendChild(toast);

    // –ê–Ω—ñ–º–∞—Ü—ñ—è –ø–æ—è–≤–∏
    setTimeout(() => toast.classList.add('show'), 10);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–Ω–∏–∫–Ω–µ–Ω–Ω—è
    setTimeout(() => {
        hideToast(toast);
    }, duration);
}

/**
 * –ü—Ä–∏—Ö–æ–≤—É—î —Ç–∞ –≤–∏–¥–∞–ª—è—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.
 * @param {HTMLElement} toastElement - –ï–ª–µ–º–µ–Ω—Ç —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.
 */
function hideToast(toastElement) {
    toastElement.classList.remove('show');
    
    // –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑ DOM –ø—ñ—Å–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
    setTimeout(() => {
        if (toastElement.parentNode) {
            toastElement.parentNode.removeChild(toastElement);
        }
    }, 300); // –ú–∞—î —Å–ø—ñ–≤–ø–∞–¥–∞—Ç–∏ –∑ transition –≤ CSS
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –∑—Ä—É—á–Ω—ñ —à–æ—Ä—Ç–∫–∞—Ç–∏
export const toastSuccess = (message, duration = 3000) => showToast(message, 'success', duration);
export const toastError = (message, duration = 5000) => showToast(message, 'error', duration);
export const toastInfo = (message, duration = 3000) => showToast(message, 'info', duration);
export const toastWarning = (message, duration = 4000) => showToast(message, 'warning', duration);
// scripts/features/tooltip.js (–û–ù–û–í–õ–ï–ù–ê –í–ï–†–°–Ü–Ø)

let tooltipElement;

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Å–∏—Å—Ç–µ–º—É –∫–∞—Å—Ç–æ–º–Ω–∏—Ö —Å–ø–ª–∏–≤–∞—é—á–∏—Ö –ø—ñ–¥–∫–∞–∑–æ–∫.
 */
export function initTooltips() {
    document.body.addEventListener('mouseover', handleMouseOver);
    document.body.addEventListener('mouseout', handleMouseOut);
    document.body.addEventListener('mousemove', handleMouseMove);
}

function handleMouseOver(event) {
    const target = event.target.closest('[data-tooltip]');
    if (!target) return;

    // ===================================================================
    // === –ù–û–í–ê –ü–ï–†–ï–í–Ü–†–ö–ê: –ü–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥–∫–∞–∑–∫—É, –ª–∏—à–µ —è–∫—â–æ —Ç–µ–∫—Å—Ç –Ω–µ –≤–º—ñ—â—É—î—Ç—å—Å—è ===
    // ===================================================================
    // scrollWidth - —Ü–µ –ø–æ–≤–Ω–∞ —à–∏—Ä–∏–Ω–∞ –≤–º—ñ—Å—Ç—É, clientWidth - –≤–∏–¥–∏–º–∞ —à–∏—Ä–∏–Ω–∞.
    // –Ø–∫—â–æ –ø–æ–≤–Ω–∞ —à–∏—Ä–∏–Ω–∞ –±—ñ–ª—å—à–∞ –∑–∞ –≤–∏–¥–∏–º—É, –∑–Ω–∞—á–∏—Ç—å —Ç–µ–∫—Å—Ç –æ–±—Ä—ñ–∑–∞–Ω–æ.
    if (target.scrollWidth <= target.clientWidth) {
        return; // –í–∏—Ö–æ–¥–∏–º–æ, —è–∫—â–æ –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤–∂–µ –≤–∏–¥–Ω–æ
    }
    // ===================================================================

    const tooltipText = target.getAttribute('data-tooltip');
    if (!tooltipText) return;

    // –°—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –ø—ñ–¥–∫–∞–∑–∫–∏
    tooltipElement = document.createElement('div');
    tooltipElement.className = 'custom-tooltip';
    tooltipElement.textContent = tooltipText;
    document.body.appendChild(tooltipElement);

    // –ü–æ–∑–∏—Ü—ñ–æ–Ω—É—î–º–æ –π–æ–≥–æ —ñ —Ä–æ–±–∏–º–æ –≤–∏–¥–∏–º–∏–º
    positionTooltip(event);
    requestAnimationFrame(() => {
        if (tooltipElement) {
            tooltipElement.classList.add('visible');
        }
    });
}

function handleMouseOut(event) {
    if (tooltipElement) {
        tooltipElement.remove();
        tooltipElement = null;
    }
}

function handleMouseMove(event) {
    if (tooltipElement) {
        positionTooltip(event);
    }
}

function positionTooltip(event) {
    const offsetX = 15;
    const offsetY = 15;
    
    let x = event.clientX + offsetX;
    let y = event.clientY + offsetY;

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ requestAnimationFrame –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó
    // —Ç–∞ –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–º—ñ—Ä–∏ –µ–ª–µ–º–µ–Ω—Ç–∞ –ø—ñ—Å–ª—è –π–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É.
    requestAnimationFrame(() => {
        if (!tooltipElement) return;

        const tooltipRect = tooltipElement.getBoundingClientRect();
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ–± –ø—ñ–¥–∫–∞–∑–∫–∞ –Ω–µ –≤–∏—Ö–æ–¥–∏–ª–∞ –∑–∞ –º–µ–∂—ñ –µ–∫—Ä–∞–Ω—É
        if (x + tooltipRect.width > window.innerWidth) {
            x = event.clientX - tooltipRect.width - offsetX;
        }
        if (y + tooltipRect.height > window.innerHeight) {
            y = event.clientY - tooltipRect.height - offsetY;
        }

        tooltipElement.style.left = `${x}px`;
        tooltipElement.style.top = `${y}px`;
    });
}
/**
 * scripts/modals/brandModal.js
 */

import { showModal, closeModal, loadModalTemplate } from './modalManager.js';
import { saveEntity, saveMappings } from '../api/googleSheetService.js';
import { populateFormFields, collectFormData, initializeMappings } from './modalUtils.js';
import { collectMappingData } from '../config/marketplaceEngine.js';
import { toastSuccess, toastError } from '../features/toast.js';
import { refreshActiveTable } from '../components/table.js';
import { generateNextId } from '../utils/idGenerator.js'; // (–ü—É–Ω–∫—Ç 2)

const ENTITY_TYPE = 'brands';
const ENTITY_SHEET = "Brands";
const MAPPING_SHEET = "BrandMappings";
const MASTER_ID_COLUMN = "master_brand_id";
const ID_FIELD = "local_id"; // (–ü—É–Ω–∫—Ç 2) –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–æ–≤–∞–Ω–æ

export async function showBrandForm(dataToEdit = null) {
    try {
        const template = await loadModalTemplate('brand-form');
        showModal(template, async (modalElement) => {
            await initializeForm(modalElement, dataToEdit);
        });
    } catch (error) {
        console.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–æ—Ä–º—É –±—Ä–µ–Ω–¥—É:", error);
        toastError("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ —Ñ–æ—Ä–º–∏.");
    }
}

async function initializeForm(modalElement, dataToEdit) {
    const form = modalElement.querySelector('#brand-form');
    const titleElement = modalElement.querySelector('#brand-form-title');
    const mappingsContainer = modalElement.querySelector('#brand-mappings-container');
    const isEditing = !!dataToEdit;
    const idField = form.querySelector('[name="local_id"]');

    // 1. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–∞ –ø–æ–ª—ñ–≤
    if (isEditing) {
        titleElement.textContent = `–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: ${dataToEdit.name} (ID: ${dataToEdit.local_id})`;
        populateFormFields(form, dataToEdit);
    } else {
        titleElement.textContent = '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ù–æ–≤–æ–≥–æ –ë—Ä–µ–Ω–¥—É';
        // (–ü—É–Ω–∫—Ç 2) –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ ID
        const newId = generateNextId('brand');
        idField.value = newId;
    }

    // 2. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø—Ä–∏–≤'—è–∑–æ–∫ (–ü—É–Ω–∫—Ç 11)
    const masterId = idField.value;
    await initializeMappings(mappingsContainer, ENTITY_TYPE, masterId, MAPPING_SHEET, MASTER_ID_COLUMN);

    // 3. –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    form.addEventListener('submit', async (event) => {
        event.preventDefault();
        await handleSave(form, mappingsContainer, isEditing);
    });
}

async function handleSave(form, mappingsContainer, isEditing) {
    const saveButton = document.getElementById('save-brand-btn');
    saveButton.disabled = true;
    saveButton.textContent = '–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è...';

    try {
        const entityData = collectFormData(form);
        // (–ü—É–Ω–∫—Ç 11) –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö –ø—Ä–∏–≤'—è–∑–æ–∫
        const mappingsData = collectMappingData(mappingsContainer);

        // 3. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤ Google Sheets
        await Promise.all([
            saveEntity(ENTITY_SHEET, entityData, isEditing, ID_FIELD),
            saveMappings(MAPPING_SHEET, entityData[ID_FIELD], MASTER_ID_COLUMN, mappingsData)
        ]);

        // 4. –£—Å–ø—ñ—à–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        toastSuccess(`–ë—Ä–µ–Ω–¥ "${entityData.name}" —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!`);
        closeModal();
        refreshActiveTable(true);

    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –±—Ä–µ–Ω–¥—É:", error);
        toastError(`–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: ${error.message}`);
    } finally {
        if (saveButton) {
            saveButton.disabled = false;
            saveButton.textContent = '–ó–±–µ—Ä–µ–≥—Ç–∏';
        }
    }
}
/**
 * scripts/modals/categoryModal.js
 */

import { showModal, closeModal, loadModalTemplate } from './modalManager.js';
import { saveEntity, saveMappings, getCategories } from '../api/googleSheetService.js';
import { populateFormFields, collectFormData, initializeMappings } from './modalUtils.js';
import { collectMappingData } from '../config/marketplaceEngine.js';
import { toastSuccess, toastError } from '../features/toast.js';
import { refreshActiveTable } from '../components/table.js';
import { generateNextId } from '../utils/idGenerator.js'; // (–ü—É–Ω–∫—Ç 2)
import { buildCategoryTree, flattenTreeForSelect } from '../utils/dataUtils.js'; // (–ü—É–Ω–∫—Ç 4)

const ENTITY_TYPE = 'categories';
const ENTITY_SHEET = "Categories";
const MAPPING_SHEET = "CategoryMappings";
const MASTER_ID_COLUMN = "master_category_id";

export async function showCategoryForm(dataToEdit = null) {
    try {
        const template = await loadModalTemplate('category-form');
        showModal(template, async (modalElement) => {
            await initializeCategoryForm(modalElement, dataToEdit);
        });
    } catch (error) {
        console.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–æ—Ä–º—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:", error);
        toastError("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ —Ñ–æ—Ä–º–∏.");
    }
}

async function initializeCategoryForm(modalElement, dataToEdit) {
    const form = modalElement.querySelector('#category-form');
    const titleElement = modalElement.querySelector('#category-form-title');
    const mappingsContainer = modalElement.querySelector('#category-mappings-container');
    const isEditing = !!dataToEdit;
    const idField = form.querySelector('[name="local_id"]');

    // 1. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫–∞, ID —Ç–∞ –ø–æ–ª—ñ–≤
    if (isEditing) {
        titleElement.textContent = `–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: ${dataToEdit.name_uk} (ID: ${dataToEdit.local_id})`;
        populateFormFields(form, dataToEdit);
    } else {
        titleElement.textContent = '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó';
        // (–ü—É–Ω–∫—Ç 2) –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ ID
        const newId = generateNextId('cat');
        idField.value = newId;
    }

    // 2. (–ü—É–Ω–∫—Ç 4) –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π (–Ü—î—Ä–∞—Ä—Ö—ñ—á–Ω–∏–π —Å–ø–∏—Å–æ–∫)
    const parentSelect = form.querySelector('#category-parent_local_id');
    await populateParentCategorySelect(parentSelect, dataToEdit?.local_id);
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –æ–ø—Ü—ñ–π
    if (isEditing && dataToEdit.parent_local_id) {
        parentSelect.value = dataToEdit.parent_local_id;
    }

    // 3. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø—Ä–∏–≤'—è–∑–æ–∫ (–ü—É–Ω–∫—Ç 11)
    const masterId = idField.value;
    await initializeMappings(mappingsContainer, ENTITY_TYPE, masterId, MAPPING_SHEET, MASTER_ID_COLUMN);
    
    // 4. –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    form.addEventListener('submit', async (event) => {
        event.preventDefault();
        await handleCategorySave(form, mappingsContainer, isEditing);
    });
}

/**
 * (–ü—É–Ω–∫—Ç 4) –ó–∞–ø–æ–≤–Ω—é—î —Å–µ–ª–µ–∫—Ç –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —É –≤–∏–≥–ª—è–¥—ñ –¥–µ—Ä–µ–≤–∞.
 */
async function populateParentCategorySelect(selectElement, excludeId) {
    try {
        // –ü–æ–∫–ª–∞–¥–∞—î–º–æ—Å—å –Ω–∞ –¥–∞–Ω—ñ –∑ –∫–µ—à—É GSS
        const categories = await getCategories();
        // –ë—É–¥—É—î–º–æ —Ç–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –¥–µ—Ä–µ–≤–æ –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –∑ –≤—ñ–¥—Å—Ç—É–ø–∞–º–∏
        const tree = buildCategoryTree(categories);
        const options = flattenTreeForSelect(tree);

        options.forEach(option => {
            // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –≤–∏–±–æ—Ä—É —Å–µ–±–µ —è–∫ –±–∞—Ç—å–∫–∞
            if (excludeId && option.value === excludeId) return;

            const optionElement = document.createElement('option');
            optionElement.value = option.value;
            optionElement.textContent = option.label;
            selectElement.appendChild(optionElement);
        });

    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π:", error);
    }
}


async function handleCategorySave(form, mappingsContainer, isEditing) {
    const saveButton = document.getElementById('save-category-btn');
    saveButton.disabled = true;
    saveButton.textContent = '–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è...';

    try {
        // 1. –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö –µ—Ç–∞–ª–æ–Ω–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        const categoryData = collectFormData(form);

        // 2. –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö –ø—Ä–∏–≤'—è–∑–æ–∫ (–ü—É–Ω–∫—Ç 11)
        const mappingsData = collectMappingData(mappingsContainer);

        // 3. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤ Google Sheets
        await Promise.all([
            saveEntity(ENTITY_SHEET, categoryData, isEditing),
            saveMappings(MAPPING_SHEET, categoryData.local_id, MASTER_ID_COLUMN, mappingsData)
        ]);

        // 4. –£—Å–ø—ñ—à–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        toastSuccess(`–ö–∞—Ç–µ–≥–æ—Ä—ñ—é "${categoryData.name_uk}" —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!`);
        closeModal();
        refreshActiveTable(true);

    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:", error);
        toastError(`–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: ${error.message}`);
    } finally {
        if (saveButton) {
            saveButton.disabled = false;
            saveButton.textContent = '–ó–±–µ—Ä–µ–≥—Ç–∏';
        }
    }
}
/**
 * scripts/modals/characteristicModal.js
 */

import { showModal, closeModal, loadModalTemplate } from './modalManager.js';
import { saveEntity, saveMappings, getCategories } from '../api/googleSheetService.js';
import { populateFormFields, collectFormData, initializeMappings } from './modalUtils.js';
import { collectMappingData } from '../config/marketplaceEngine.js';
import { toastSuccess, toastError } from '../features/toast.js';
import { refreshActiveTable } from '../components/table.js';
import { generateNextId } from '../utils/idGenerator.js'; // (–ü—É–Ω–∫—Ç 2)
import { Multiselect } from '../components/multiselect.js'; // (–ü—É–Ω–∫—Ç 6)
import { buildCategoryTree, flattenTreeForSelect } from '../utils/dataUtils.js'; // (–ü—É–Ω–∫—Ç 6)

const ENTITY_TYPE = 'characteristics';
const ENTITY_SHEET = "Characteristics";
const MAPPING_SHEET = "CharacteristicMappings";
const MASTER_ID_COLUMN = "master_char_id";

let categoryMultiselect = null; // (–ü—É–Ω–∫—Ç 6)

export async function showCharacteristicForm(dataToEdit = null) {
    try {
        const template = await loadModalTemplate('characteristic-form');
        showModal(template, async (modalElement) => {
            await initializeForm(modalElement, dataToEdit);
        });
    } catch (error) {
        console.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–æ—Ä–º—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:", error);
        toastError("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ —Ñ–æ—Ä–º–∏.");
    }
}

async function initializeForm(modalElement, dataToEdit) {
    const form = modalElement.querySelector('#characteristic-form');
    const titleElement = modalElement.querySelector('#characteristic-form-title');
    const mappingsContainer = modalElement.querySelector('#characteristic-mappings-container');
    const isEditing = !!dataToEdit;
    const idField = form.querySelector('[name="local_id"]');

    // 1. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫–∞, ID —Ç–∞ –ø–æ–ª—ñ–≤
    if (isEditing) {
        titleElement.textContent = `–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: ${dataToEdit.name_uk} (ID: ${dataToEdit.local_id})`;
        populateFormFields(form, dataToEdit);
    } else {
        titleElement.textContent = '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ù–æ–≤–æ—ó –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏';
        // (–ü—É–Ω–∫—Ç 2) –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ ID
        const newId = generateNextId('char');
        idField.value = newId;
    }

    // (–ü—É–Ω–∫—Ç 6) 2. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ú—É–ª—å—Ç–∏—Å–µ–ª–µ–∫—Ç—É –ö–∞—Ç–µ–≥–æ—Ä—ñ–π
    await initializeCategoryMultiselect(form, dataToEdit);

    // (–ü—É–Ω–∫—Ç 6) 3. –õ–æ–≥—ñ–∫–∞ –ì–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∞–ø–æ—Ä—Ü—è
    const globalCheckbox = form.querySelector('#characteristic-is_global');
    globalCheckbox.addEventListener('change', () => {
        handleGlobalFlagChange(globalCheckbox.checked);
    });
    // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω
    handleGlobalFlagChange(globalCheckbox.checked);

    // 4. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø—Ä–∏–≤'—è–∑–æ–∫ (–ü—É–Ω–∫—Ç 11)
    const masterId = idField.value;
    await initializeMappings(mappingsContainer, ENTITY_TYPE, masterId, MAPPING_SHEET, MASTER_ID_COLUMN);

    // 5. –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    form.addEventListener('submit', async (event) => {
        event.preventDefault();
        await handleSave(form, mappingsContainer, isEditing);
    });
}

// (–ü—É–Ω–∫—Ç–∏ 5, 6) –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º—É–ª—å—Ç–∏—Å–µ–ª–µ–∫—Ç—É (–∑ —ñ—î—Ä–∞—Ä—Ö—ñ—î—é)
async function initializeCategoryMultiselect(form, dataToEdit) {
    const container = form.querySelector('#characteristic-categories-multiselect');
    const hiddenInput = form.querySelector('input[name="category_local_ids"]');
    
    try {
        // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç–∞ –ø–æ–±—É–¥–æ–≤–∞ —ñ—î—Ä–∞—Ä—Ö—ñ—ó
        const categories = await getCategories();
        const tree = buildCategoryTree(categories);
        const options = flattenTreeForSelect(tree);

        // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å
        let initialValues = [];
        if (dataToEdit && dataToEdit.category_local_ids) {
            initialValues = dataToEdit.category_local_ids.split(',').map(id => id.trim()).filter(Boolean);
        }

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        categoryMultiselect = new Multiselect(container, options, initialValues, (selectedValues) => {
            // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ–≥–æ –ø–æ–ª—è –ø—Ä–∏ –∑–º—ñ–Ω—ñ –≤–∏–±–æ—Ä—É
            hiddenInput.value = selectedValues.join(', ');
        });

    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –º—É–ª—å—Ç–∏—Å–µ–ª–µ–∫—Ç—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–π:", error);
        container.innerHTML = '<p class="error">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π.</p>';
    }
}

// (–ü—É–Ω–∫—Ç 6) –û–±—Ä–æ–±–∫–∞ –ø—Ä–∞–ø–æ—Ä—Ü—è "–ì–ª–æ–±–∞–ª—å–Ω–∞"
function handleGlobalFlagChange(isGlobal) {
    if (categoryMultiselect) {
        categoryMultiselect.setDisabled(isGlobal);
    }
}

async function handleSave(form, mappingsContainer, isEditing) {
    const saveButton = document.getElementById('save-characteristic-btn');
    saveButton.disabled = true;
    saveButton.textContent = '–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è...';

    try {
        // 1. –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö –µ—Ç–∞–ª–æ–Ω–Ω–æ—ó —Å—É—Ç–Ω–æ—Å—Ç—ñ
        // (–ü—É–Ω–∫—Ç 6) collectFormData –∫–æ—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–æ–±–ª—è—î –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ –ø–æ–ª—è –≤—ñ–¥ Multiselect.
        const entityData = collectFormData(form);
        
        // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å, —â–æ —è–∫—â–æ –≤–∏–±—Ä–∞–Ω–æ "–ì–ª–æ–±–∞–ª—å–Ω–∞", —Å–ø–∏—Å–æ–∫ ID –ø–æ—Ä–æ–∂–Ω—ñ–π (collectFormData —Ü–µ –≤–∂–µ —Ä–æ–±–∏—Ç—å, –∞–ª–µ –¥–ª—è –ø–µ–≤–Ω–æ—Å—Ç—ñ)
        if (entityData.is_global === 'TRUE') {
            entityData.category_local_ids = '';
        }

        // 2. –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö –ø—Ä–∏–≤'—è–∑–æ–∫ (–ü—É–Ω–∫—Ç 11)
        const mappingsData = collectMappingData(mappingsContainer);

        // 3. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤ Google Sheets
        await Promise.all([
            saveEntity(ENTITY_SHEET, entityData, isEditing),
            saveMappings(MAPPING_SHEET, entityData.local_id, MASTER_ID_COLUMN, mappingsData)
        ]);

        // 4. –£—Å–ø—ñ—à–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        toastSuccess(`–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É "${entityData.name_uk}" —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!`);
        closeModal();
        refreshActiveTable(true);

    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:", error);
        toastError(`–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: ${error.message}`);
    } finally {
        if (saveButton) {
            saveButton.disabled = false;
            saveButton.textContent = '–ó–±–µ—Ä–µ–≥—Ç–∏';
        }
    }
}
/**
 * scripts/modals/modalManager.js
 * 
 * –î–∏—Å–ø–µ—Ç—á–µ—Ä –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω.
 */

import { getActiveEntity } from '../components/tabs.js';
import { showCategoryForm } from './categoryModal.js';
import { showCharacteristicForm } from './characteristicModal.js';
import { showOptionForm } from './optionModal.js';
import { showBrandForm } from './brandModal.js';


let currentModal = null;

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –≥–ª–æ–±–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫, —â–æ –≤—ñ–¥–∫—Ä–∏–≤–∞—é—Ç—å –º–æ–¥–∞–ª—å–Ω—ñ –≤—ñ–∫–Ω–∞.
 */
export function initModalTriggers() {
    const addButton = document.getElementById('add-btn');
    if (addButton) {
        addButton.addEventListener('click', handleAddButtonClick);
    }
}

/**
 * –û–±—Ä–æ–±–ª—è—î –∫–ª—ñ–∫ –ø–æ –∫–Ω–æ–ø—Ü—ñ "–î–æ–¥–∞—Ç–∏".
 */
function handleAddButtonClick() {
    const entity = getActiveEntity();

    switch (entity) {
        case 'categories':
            showCategoryForm(null);
            break;
        case 'characteristics':
            showCharacteristicForm(null);
            break;
        case 'options':
            showOptionForm(null);
            break;
        case 'brands':
            showBrandForm(null);
            break;
        default:
            console.error(`–ù–µ–≤—ñ–¥–æ–º–∞ —Å—É—Ç–Ω—ñ—Å—Ç—å –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è: ${entity}`);
    }
}


// --- –ë–∞–∑–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∫–µ—Ä—É–≤–∞–Ω–Ω—è –º–æ–¥–∞–ª—å–Ω–∏–º–∏ –≤—ñ–∫–Ω–∞–º–∏ (–ù–µ–∑–º—ñ–Ω–Ω—ñ) ---

export function showModal(htmlContent, onReady = null) {
    if (currentModal) {
        // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—é –¥–µ–∫—ñ–ª—å–∫–æ—Ö –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω –æ–¥–Ω–æ—á–∞—Å–Ω–æ
        console.warn("–°–ø—Ä–æ–±–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∏ –Ω–æ–≤–µ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ, –∫–æ–ª–∏ —ñ–Ω—à–µ –≤–∂–µ –≤—ñ–¥–∫—Ä–∏—Ç–µ.");
        return;
    }

    const modalWrapper = document.createElement('div');
    modalWrapper.classList.add('modal-wrapper');
    modalWrapper.innerHTML = htmlContent;

    document.body.appendChild(modalWrapper);
    currentModal = modalWrapper;

    setTimeout(() => modalWrapper.classList.add('active'), 10);

    initModalControls(modalWrapper);

    if (onReady) {
        onReady(modalWrapper);
    }
}

export function closeModal() {
    if (!currentModal) return;

    const modalToRemove = currentModal;
    currentModal = null;

    modalToRemove.classList.remove('active');
    
    setTimeout(() => {
        if (document.body.contains(modalToRemove)) {
            document.body.removeChild(modalToRemove);
        }
    }, 300);
}

function initModalControls(modalElement) {
    // –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ –∫–ª—ñ–∫—É –Ω–∞ —Ñ–æ–Ω (overlay)
    modalElement.addEventListener('click', (event) => {
        if (event.target === modalElement) {
            closeModal();
        }
    }, { once: true });

    // –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ –∫–Ω–æ–ø—Ü—ñ .modal-close –∞–±–æ [data-action="cancel"]
    modalElement.querySelectorAll('.modal-close, [data-action="cancel"]').forEach(button => {
        button.addEventListener('click', closeModal, { once: true });
    });
}

const templateCache = {};
export async function loadModalTemplate(templateName) {
    if (templateCache[templateName]) {
        return templateCache[templateName];
    }

    try {
        const response = await fetch(`modals/${templateName}.html`);
        if (!response.ok) {
            throw new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —à–∞–±–ª–æ–Ω: ${templateName}`);
        }
        const html = await response.text();
        templateCache[templateName] = html;
        return html;
    } catch (error) {
        console.error(error);
        return `
            <div class="modal-content">
                <h2>–ü–æ–º–∏–ª–∫–∞ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</h2>
                <div class="modal-body"><p>–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ä–º—É.</p></div>
            </div>
        `;
    }
}
/**
 * scripts/modals/modalUtils.js
 * 
 * –î–æ–ø–æ–º—ñ–∂–Ω—ñ —É—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –º–æ–¥–∞–ª—å–Ω–∏–º–∏ –≤—ñ–∫–Ω–∞–º–∏ —Ç–∞ —Ñ–æ—Ä–º–∞–º–∏.
 */

import { toastError } from '../features/toast.js';
import { getMappingsForEntity } from '../api/googleSheetService.js';
import { renderMappingUI } from '../config/marketplaceEngine.js';

/**
 * –ó–∞–ø–æ–≤–Ω—é—î –ø–æ–ª—è —Ñ–æ—Ä–º–∏ –¥–∞–Ω–∏–º–∏ –∑ –æ–±'—î–∫—Ç–∞.
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∑–Ω–∞—á–∞—î —Ç–∏–ø –ø–æ–ª—è (input, select, textarea, checkbox).
 */
export function populateFormFields(form, data) {
    for (const key in data) {
        // –Ü–≥–Ω–æ—Ä—É—î–º–æ —Å–ª—É–∂–±–æ–≤—ñ –ø–æ–ª—è, –∫—Ä—ñ–º _rowIndex, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Ä—è–¥–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ
        if (key.startsWith('_') && key !== '_rowIndex') continue; 

        const inputElement = form.querySelector(`[name="${key}"]`);
        if (inputElement) {
            if (inputElement.type === 'checkbox') {
                // –î–ª—è —á–µ–∫–±–æ–∫—Å—ñ–≤ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è (TRUE/FALSE –∞–±–æ 1/0)
                const value = String(data[key]).toUpperCase();
                inputElement.checked = (value === 'TRUE' || value === '1');
            } else {
                inputElement.value = data[key] || '';
            }
        }
    }
}

/**
 * –ó–±–∏—Ä–∞—î –¥–∞–Ω—ñ –∑ –ø–æ–ª—ñ–≤ —Ñ–æ—Ä–º–∏ –≤ –æ–±'—î–∫—Ç.
 */
export function collectFormData(form) {
    const formData = new FormData(form);
    const dataObject = {};

    for (const [key, value] of formData.entries()) {
        // –Ü–≥–Ω–æ—Ä—É—î–º–æ –∫–Ω–æ–ø–∫–∏ —Ç–∞ —ñ–Ω—à—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –±–µ–∑ —ñ–º–µ–Ω—ñ
        if (!key) continue;
        
        const inputElement = form.querySelector(`[name="${key}"]`);
        
        if (inputElement && inputElement.type === 'checkbox') {
            // –û–±—Ä–æ–±–ª—è—î–º–æ –æ–∫—Ä–µ–º–æ –Ω–∏–∂—á–µ
        } else {
            dataObject[key] = value.trim();
        }
    }

    // –û–±—Ä–æ–±–∫–∞ —á–µ–∫–±–æ–∫—Å—ñ–≤ (FormData –Ω–µ –≤–∫–ª—é—á–∞—î –Ω–µ–≤—ñ–¥–º—ñ—á–µ–Ω—ñ —á–µ–∫–±–æ–∫—Å–∏)
    form.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
        if (checkbox.name) {
            dataObject[checkbox.name] = checkbox.checked ? 'TRUE' : 'FALSE';
        }
    });
    
    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ _rowIndex –≤ —á–∏—Å–ª–æ, —è–∫—â–æ –≤—ñ–Ω —î
    if (dataObject._rowIndex) {
        dataObject._rowIndex = parseInt(dataObject._rowIndex);
    }

    return dataObject;
}


/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Å–µ–∫—Ü—ñ—é –ø—Ä–∏–≤'—è–∑–æ–∫ (Mappings) –≤ –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ.
 */
export async function initializeMappings(container, entityType, masterId, mappingSheet, masterIdColumn) {
    let existingMappings = [];

    if (masterId) {
        try {
            existingMappings = await getMappingsForEntity(mappingSheet, masterId, masterIdColumn);
        } catch (error) {
            console.error(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∏–≤'—è–∑–æ–∫ –¥–ª—è ${entityType} ID ${masterId}:`, error);
            toastError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ—Å–Ω—É—é—á—ñ –ø—Ä–∏–≤'—è–∑–∫–∏.");
        }
    }

    renderMappingUI(container, entityType, existingMappings);
}
/**
 * scripts/modals/optionModal.js
 */

import { showModal, closeModal, loadModalTemplate } from './modalManager.js';
import { saveEntity, saveMappings } from '../api/googleSheetService.js';
import { populateFormFields, collectFormData, initializeMappings } from './modalUtils.js';
import { collectMappingData } from '../config/marketplaceEngine.js';
import { toastSuccess, toastError } from '../features/toast.js';
import { refreshActiveTable } from '../components/table.js';
import { generateNextId } from '../utils/idGenerator.js'; // (–ü—É–Ω–∫—Ç 2)

const ENTITY_TYPE = 'options';
const ENTITY_SHEET = "Options";
const MAPPING_SHEET = "OptionMappings";
const MASTER_ID_COLUMN = "master_option_id";

export async function showOptionForm(dataToEdit = null) {
    try {
        const template = await loadModalTemplate('option-form');
        showModal(template, async (modalElement) => {
            await initializeForm(modalElement, dataToEdit);
        });
    } catch (error) {
        console.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–æ—Ä–º—É –æ–ø—Ü—ñ—ó:", error);
        toastError("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ —Ñ–æ—Ä–º–∏.");
    }
}

async function initializeForm(modalElement, dataToEdit) {
    const form = modalElement.querySelector('#option-form');
    const titleElement = modalElement.querySelector('#option-form-title');
    const mappingsContainer = modalElement.querySelector('#option-mappings-container');
    const isEditing = !!dataToEdit;
    const idField = form.querySelector('[name="local_id"]');

    // 1. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–∞ –ø–æ–ª—ñ–≤
    if (isEditing) {
        titleElement.textContent = `–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: ${dataToEdit.name_uk} (ID: ${dataToEdit.local_id})`;
        populateFormFields(form, dataToEdit);
    } else {
        titleElement.textContent = '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ù–æ–≤–æ—ó –û–ø—Ü—ñ—ó';
        // (–ü—É–Ω–∫—Ç 2) –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ ID
        const newId = generateNextId('opt');
        idField.value = newId;
    }

    // 2. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø—Ä–∏–≤'—è–∑–æ–∫ (–ü—É–Ω–∫—Ç 11)
    const masterId = idField.value;
    await initializeMappings(mappingsContainer, ENTITY_TYPE, masterId, MAPPING_SHEET, MASTER_ID_COLUMN);

    // 3. –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    form.addEventListener('submit', async (event) => {
        event.preventDefault();
        await handleSave(form, mappingsContainer, isEditing);
    });
}

async function handleSave(form, mappingsContainer, isEditing) {
    const saveButton = document.getElementById('save-option-btn');
    saveButton.disabled = true;
    saveButton.textContent = '–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è...';

    try {
        const entityData = collectFormData(form);
        // (–ü—É–Ω–∫—Ç 11) –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö –ø—Ä–∏–≤'—è–∑–æ–∫
        const mappingsData = collectMappingData(mappingsContainer);

        await Promise.all([
            saveEntity(ENTITY_SHEET, entityData, isEditing),
            saveMappings(MAPPING_SHEET, entityData.local_id, MASTER_ID_COLUMN, mappingsData)
        ]);

        toastSuccess(`–û–ø—Ü—ñ—é "${entityData.name_uk}" —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!`);
        closeModal();
        refreshActiveTable(true);

    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –æ–ø—Ü—ñ—ó:", error);
        toastError(`–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: ${error.message}`);
    } finally {
        if (saveButton) {
            saveButton.disabled = false;
            saveButton.textContent = '–ó–±–µ—Ä–µ–≥—Ç–∏';
        }
    }
}
/**
 * scripts/utils/dataUtils.js
 * 
 * (–ü—É–Ω–∫—Ç 4, 6) –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö (–Ü—î—Ä–∞—Ä—Ö—ñ—è).
 */

/**
 * –ë—É–¥—É—î —ñ—î—Ä–∞—Ä—Ö—ñ—á–Ω–µ –¥–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∑ –ø–ª–æ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫—É.
 */
export function buildCategoryTree(categories) {
    if (!categories) return [];
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞–ø—É –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ –≤—É–∑–ª—ñ–≤ –∑–∞ ID
    const map = new Map(categories.map(cat => [cat.local_id, { ...cat, children: [] }]));
    const tree = [];

    map.forEach(node => {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π ID —ñ —á–∏ —ñ—Å–Ω—É—î —Ç–∞–∫–∏–π –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –µ–ª–µ–º–µ–Ω—Ç –≤ –º–∞–ø—ñ
        if (node.parent_local_id && map.has(node.parent_local_id)) {
            map.get(node.parent_local_id).children.push(node);
        } else if (!node.parent_local_id) {
            // –Ø–∫—â–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ ID –Ω–µ–º–∞—î (–∞–±–æ –≤—ñ–Ω –ø–æ—Ä–æ–∂–Ω—ñ–π), —Ü–µ –∫–æ—Ä–µ–Ω–µ–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç
            tree.push(node);
        }
        // –ï–ª–µ–º–µ–Ω—Ç–∏, —á–∏–π –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π ID –≤–∫–∞–∑–∞–Ω–∏–π, –∞–ª–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ —Å–ø–∏—Å–∫—É, —ñ–≥–Ω–æ—Ä—É—é—Ç—å—Å—è —è–∫ "—Å–∏—Ä–æ—Ç–∏".
    });

    // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    const sortByName = (a, b) => (a.name_uk || '').localeCompare(b.name_uk || '');
    tree.sort(sortByName);
    // –°–æ—Ä—Ç—É—î–º–æ –¥–æ—á—ñ—Ä–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –≤—É–∑–ª–∞
    map.forEach(node => node.children.sort(sortByName));

    return tree;
}

/**
 * –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î –¥–µ—Ä–µ–≤–æ –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫, –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π –¥–ª—è <select> –∞–±–æ Multiselect –∑ –≤—ñ–¥—Å—Ç—É–ø–∞–º–∏.
 */
export function flattenTreeForSelect(tree, depth = 0, includeType = false) {
    let options = [];
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ NBSP (Non-breaking space) –¥–ª—è –≤—ñ–¥—Å—Ç—É–ø—ñ–≤, –æ—Å–∫—ñ–ª—å–∫–∏ –∑–≤–∏—á–∞–π–Ω—ñ –ø—Ä–æ–±—ñ–ª–∏ –º–æ–∂—É—Ç—å —ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏—Å—è –≤ <option>
    const indent = '\u00A0\u00A0\u00A0\u00A0'.repeat(depth);

    tree.forEach(node => {
        let label = `${indent}${node.name_uk}`;
        
        // (–ü—É–Ω–∫—Ç 3) –î–æ–¥–∞—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ü—ñ—é —Ç–∏–ø—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if (includeType) {
             // –ê–¥–∞–ø—Ç—É–π—Ç–µ –ª–æ–≥—ñ–∫—É –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É –ø—ñ–¥ –≤–∞—à—ñ –¥–∞–Ω—ñ, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
             const typeLabel = node.category_type === 'grouping' ? '–ì—Ä—É–ø–∞' : (node.category_type === 'product' ? '–¢–æ–≤–∞—Ä' : node.category_type);
             if (typeLabel) {
                label += ` (${typeLabel})`;
             }
        }

        options.push({
            value: node.local_id,
            label: label
        });
        
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–¥–∞—î–º–æ –¥–æ—á—ñ—Ä–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
        if (node.children && node.children.length > 0) {
            options = options.concat(flattenTreeForSelect(node.children, depth + 1, includeType));
        }
    });
    return options;
}
/**
 * scripts/utils/idGenerator.js
 * 
 * (–ü—É–Ω–∫—Ç 2) –ì–µ–Ω–µ—Ä—É—î –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ ID —É —Ñ–æ—Ä–º–∞—Ç—ñ prefix_000000000001.
 */

const ID_LENGTH = 12;
const sequenceCache = {}; // { prefix: maxNumber }

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä ID –¥–ª—è –∑–∞–¥–∞–Ω–æ–≥–æ –ø—Ä–µ—Ñ—ñ–∫—Å—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ—Å–Ω—É—é—á–∏—Ö –¥–∞–Ω–∏—Ö.
 */
export function initializeIdGenerator(prefix, data, idField) {
    let maxNumber = 0;
    // –†–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç—É prefix_12—Ü–∏—Ñ—Ä
    const regex = new RegExp(`^${prefix}_(\\d{${ID_LENGTH}})$`);

    if (!data) return;

    data.forEach(item => {
        const id = item[idField];
        if (id) {
            const match = String(id).match(regex);
            if (match) {
                const number = parseInt(match[1], 10);
                if (!isNaN(number) && number > maxNumber) {
                    maxNumber = number;
                }
            }
        }
    });

    // –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–∏–π –Ω–æ–º–µ—Ä –±—ñ–ª—å—à–∏–π –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π
    if (sequenceCache[prefix] === undefined || maxNumber > sequenceCache[prefix]) {
        sequenceCache[prefix] = maxNumber;
        console.log(`[ID Gen] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ/–û–Ω–æ–≤–ª–µ–Ω–æ '${prefix}' –∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º: ${maxNumber}`);
    }
}

/**
 * –ì–µ–Ω–µ—Ä—É—î –Ω–∞—Å—Ç—É–ø–Ω–∏–π ID –¥–ª—è –∑–∞–¥–∞–Ω–æ–≥–æ –ø—Ä–µ—Ñ—ñ–∫—Å—É.
 */
export function generateNextId(prefix) {
    if (sequenceCache[prefix] === undefined) {
        console.warn(`[ID Gen] –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è '${prefix}' –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ü–æ—á–∏–Ω–∞—î–º–æ –∑ 1. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –¥–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ.`);
        sequenceCache[prefix] = 0;
    }

    sequenceCache[prefix]++;
    const nextNumber = sequenceCache[prefix];
    const paddedNumber = String(nextNumber).padStart(ID_LENGTH, '0');

    return `${prefix}_${paddedNumber}`;
}
/* –£ –≤–∞—à–æ–º—É styles/main.css */

/* 1. –î–æ–¥–∞–π—Ç–µ –Ω–æ–≤—ñ —ñ–º–ø–æ—Ä—Ç–∏: */
@import url('components/_data-table-m3.css');
@import url('components/_multiselect.css');
@import url('components/_admin-merge.css');

/* 2. –ó–∞–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É—é—á–∏–π —ñ–º–ø–æ—Ä—Ç: */
/* @import url('components/_table.css'); */


/* 3. –î–æ–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω–æ–º (–Ø–∫—â–æ —ó—Ö –Ω–µ–º–∞—î –≤ _layout.css): */

/* --- –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –°—Ç–∞–Ω–æ–º –î–æ–¥–∞—Ç–∫—É --- */

/* –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º, –ø–æ–∫–∏ —Å—Ç–∞–Ω –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ */
.requires-auth, .requires-unauth {
    display: none !important;
}

/* –°—Ç–∞–Ω: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (Loading) */
/* –ù—ñ—á–æ–≥–æ –Ω–µ –ø–æ–∫–∞–∑—É—î–º–æ */

/* –°—Ç–∞–Ω: –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ (Unauthenticated) –∞–±–æ –ü–æ–º–∏–ª–∫–∞ (Error) */
body.state-unauthenticated .requires-unauth,
body.state-error .requires-unauth {
    display: block !important; /* –ê–±–æ inline-flex –¥–ª—è –∫–Ω–æ–ø–æ–∫ */
}

/* –°—Ç–∞–Ω: –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ (Authenticated) */
body.state-authenticated .requires-auth {
    display: flex !important; /* –ê–±–æ block/inline-flex –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –µ–ª–µ–º–µ–Ω—Ç–∞ */
}

/* –í–∏–Ω—è—Ç–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ç–∞ —ñ–Ω—à–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ */
body.state-authenticated button.requires-auth,
body.state-unauthenticated button.requires-unauth,
body.state-authenticated span.requires-auth {
    display: inline-flex !important;
}

/* –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ main-interface */
body.state-authenticated #main-interface {
    display: flex !important;
    flex-direction: column;
    flex-grow: 1;
    min-height: 0;
}
:root {
    --color-main: #006a63;
    --color-on-main: #FFFFFF;
    --color-main-c: #b0f1eb;
    --color-on-main-c: #00201d;
    --color-secondary: #4c635d;
    --color-on-secondary: #FFFFFF;
    --color-secondary-c: #b7d5cc;
    --color-on-secondary-c: #0a1f1a;
    --color-accent: #b91d21;
    --color-on-accent: #FFFFFF;
    --color-accent-c: #ffdad6;
    --color-on-accent-c: #410003;
    --color-error: #9c4332;
    --color-on-error: #FFFFFF;
    --color-error-c: #ffdbd2;
    --color-on-error-c: #3e0900;

    --color-surface: #f8faf9;
    --color-on-surface: #191c1c;
    --color-on-surface-v: #404947;
    --color-surface-c-lowest: #FFFFFF;
    --color-surface-c-low: #f2f4f3;
    --color-surface-c: #eceeed;
    --color-surface-c-high: #e7e9e8;
    --color-surface-c-highest: #e1e3e2;

    --color-outline: #707978;
    --color-outline-v: #c0c9c7;

    --color-scrim: rgba(0, 0, 0, 0.32);
    --color-inverse-surface: #2e3130;
    --color-inverse-on-surface: #f2f4f3;

    --radius-xs: 4px;
    --radius-s: 8px;
    --radius-m: 12px;
    --radius-l: 16px;
    --radius-xl: 28px;
    --radius-full: 9999px;

    --shadow-1: 0px 1px 3px 1px rgba(0, 0, 0, 0.15), 0px 1px 2px 0px rgba(0, 0, 0, 0.30);
    --shadow-2: 0px 2px 6px 2px rgba(0, 0, 0, 0.15), 0px 1px 2px 0px rgba(0, 0, 0, 0.30);
    --shadow-3: 0px 4px 8px 3px rgba(0, 0, 0, 0.15), 0px 1px 3px 0px rgba(0, 0, 0, 0.30);
    
    --space-xxs: 4px;
    --space-xs: 8px;
    --space-s: 12px;
    --space-m: 16px;
    --space-l: 24px;

    --border-radius-s: var(--radius-xs);
    --border-radius-m: var(--radius-m);
    
    --shadow-s: var(--shadow-1);
    --shadow-m: var(--shadow-2);
    --shadow-l: var(--shadow-3);
    
    --app-bg: var(--color-surface);
    --content-bg: var(--color-surface-c-lowest);
    --header-bg: var(--color-surface);
    --footer-bg: var(--color-surface-c);
    --hover-bg: rgba(0, 0, 0, 0.05);
    
    --text-primary: var(--color-on-surface);
    --text-secondary: var(--color-on-surface-v);
    --text-light: var(--color-on-main);
    
    --border-color: var(--color-outline);
    --border-color-light: var(--color-outline-v);
    
    --input-border-color: var(--color-outline);
    --interactive-color: var(--color-main);
    
    --status-success-bg: var(--color-main);
    --status-error-bg: var(--color-error);
    --status-info-bg: var(--color-secondary);
    
    --modal-overlay-bg: var(--color-scrim);
    --white: #FFFFFF;
}

@media (prefers-color-scheme: dark) {
    :root {

        --color-main: #68d8ce;
        --color-on-main: #003733;
        --color-main-c: #00504b;
        --color-on-main-c: #b0f1eb;

        --color-secondary: #b1cbc4;
        --color-on-secondary: #1f3530;
        --color-secondary-c: #354b46;
        --color-on-secondary-c: #cde8e0;

        --color-accent: #ffb3ac;
        --color-on-accent: #680008;
        --color-accent-c: #930010;
        --color-on-accent-c: #ffdad6;

        --color-error: #ffb5a4;
        --color-on-error: #5f1506;
        --color-error-c: #7e2a1b;
        --color-on-error-c: #ffdbd2;

        --color-surface: #121514;
        --color-on-surface: #e1e3e2;
        --color-on-surface-v: #c0c9c7;

        --color-surface-c-lowest: #0d100f;
        --color-surface-c-low: #191c1c;
        --color-surface-c: #1d201f;
        --color-surface-c-high: #272b2a;
        --color-surface-c-highest: #323534;

        --color-outline: #8a9391;
        --color-outline-v: #404947;

        --color-inverse-surface: #e1e3e2;
        --color-inverse-on-surface: #2e3130;

        --hover-bg: rgba(255, 255, 255, 0.08);
    }
}
/* styles/components/_admin-merge.css (–ù–û–í–ò–ô –§–ê–ô–õ) */
/* –í–∫–ª—é—á–∞—î —Å—Ç–∏–ª—ñ –¥–ª—è –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ, –û–±'—î–¥–Ω–∞–Ω–Ω—è —Ç–∞ Multi-Mapping UI */

/* --- –ê–¥–º—ñ–Ω –ü–∞–Ω–µ–ª—å —Ç–∞ –û–±'—î–¥–Ω–∞–Ω–Ω—è (–ó–∞–≥–∞–ª—å–Ω—ñ —Å—Ç–∏–ª—ñ —Ç–∞–±–ª–∏—Ü—å) --- */

/* –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ _modal.css –≤–∏–∑–Ω–∞—á–∞—î –±–∞–∑–æ–≤—ñ —Å—Ç–∏–ª—ñ –º–æ–¥–∞–ª–æ–∫ */
.admin-modal .modal-content {
    width: 1400px; /* –î–æ—Å—Ç–∞—Ç–Ω—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –Ω–æ–≤–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ */
    max-width: 95%;
}

/* –í–∫–ª–∞–¥–∫–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ (M3 Secondary Tabs) */
.admin-tabs {
    display: flex;
    margin-bottom: var(--space-m);
    border-bottom: 1px solid var(--color-outline-v);
}

.admin-tab-link {
    padding: 10px 20px;
    cursor: pointer;
    background-color: transparent;
    border: none;
    border-bottom: 2px solid transparent; /* 2px –¥–ª—è Secondary Tabs */
    transition: background-color 0.2s, border-color 0.2s, color 0.2s;
    color: var(--color-on-surface-v);
}

.admin-tab-link:hover {
    /* M3 Hover state layer */
    background-color: color-mix(in srgb, transparent, var(--color-on-surface) 8%);
    color: var(--color-on-surface);
}

.admin-tab-link.active {
    font-weight: bold;
    color: var(--color-main);
    border-color: var(--color-main);
}

.admin-tab-content { display: none; }
.admin-tab-content.active { display: block; }

/* –¢–∞–±–ª–∏—Ü—ñ –≤ –ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ —Ç–∞ –û–±'—î–¥–Ω–∞–Ω–Ω—ñ (–ù–∞—Ç–∏–≤–Ω—ñ <table>) */
.admin-table-container, .merge-table-container {
    max-height: 60vh;
    overflow-y: auto;
    overflow-x: auto;
    border: 1px solid var(--color-outline-v);
    border-radius: var(--radius-s);
    margin-bottom: var(--space-m);
    background-color: var(--color-surface-c-lowest);
}

.admin-table {
    width: 100%;
    border-collapse: collapse;
}

.admin-table th, .admin-table td {
    padding: 8px 12px;
    text-align: left;
    border-bottom: 1px solid var(--color-outline-v);
    white-space: nowrap;
    font-size: 14px;
}

.admin-table th {
    /* Surface Container Low –¥–ª—è —à–∞–ø–∫–∏ */
    background-color: var(--color-surface-c-low);
    font-weight: 500;
    color: var(--color-on-surface);
    position: sticky;
    top: 0;
    z-index: 1;
}

.admin-table td {
    color: var(--color-on-surface-v);
}

/* Inputs –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ (–º–µ–Ω—à—ñ –≤—ñ–¥—Å—Ç—É–ø–∏) */
.admin-table input[type="text"],
.admin-table select {
    padding: 6px 8px;
    font-size: 14px;
    /* –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å —Ç–µ–º—ñ */
    background-color: var(--color-surface-c-lowest);
    color: var(--color-on-surface);
    border: 1px solid var(--color-outline);
    border-radius: var(--radius-xs);
}

/* –°—Ç–∏–ª—ñ –ø–æ–º–∏–ª–æ–∫ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó */
.admin-table input.error, .admin-table select.error {
    border-color: var(--color-error);
    /* –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Error Container –¥–ª—è —Ñ–æ–Ω—É –ø–æ–º–∏–ª–∫–∏ */
    background-color: var(--color-error-c);
    color: var(--color-on-error-c); /* –¢–µ–∫—Å—Ç –Ω–∞ —Ñ–æ–Ω—ñ –ø–æ–º–∏–ª–∫–∏ */
}


/* –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å—É (M3 Banner style) */
.config-status {
    margin-bottom: var(--space-m);
    padding: var(--space-m);
    border-radius: var(--radius-s);
    display: none;
}

.config-status.unsaved {
    display: block;
    /* –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Accent –∫–æ–ª—ñ—Ä –¥–ª—è —Å—Ç–∞–Ω—É warning/unsaved */
    background-color: var(--color-accent-c);
    color: var(--color-on-accent-c);
    /* border: 1px solid var(--color-accent); */
}

/* --- –°—Ç–∏–ª—ñ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –û–±'—î–¥–Ω–∞–Ω–Ω—è --- */

.merge-table input[type="radio"] { width: auto; }
.merge-table tbody tr { cursor: pointer; }
.merge-table tbody tr:hover {
    background-color: color-mix(in srgb, transparent, var(--color-on-surface) 8%);
}

/* –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–∏ –æ–±'—î–¥–Ω–∞–Ω–Ω—ñ (M3 Error Container style) */
.merge-warning {
    background-color: var(--color-error-c);
    /* border: 1px solid var(--color-error); */
    color: var(--color-on-error-c);
    padding: var(--space-m);
    border-radius: var(--radius-s);
    margin-top: var(--space-l);
}

.merge-warning h4 { margin-top: 0; }

/* --- –î–∏–Ω–∞–º—ñ—á–Ω—ñ –ø–æ–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ñ–≤ (Repeater UI) --- */

/* –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å, —â–æ —Å–µ–∫—Ü—ñ—è –º–∞–ø—ñ–Ω–≥—ñ–≤ –º–∞—î –ø—Ä–æ–∫—Ä—É—Ç–∫—É –≤ –º–æ–¥–∞–ª—Ü—ñ */
.form-section-mappings {
    max-height: 650px;
    overflow-y: auto;
    /* –í—ñ–∑—É–∞–ª—å–Ω–µ —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –≤ –º–æ–¥–∞–ª—Ü—ñ (—è–∫—â–æ –≤–∞—à _forms.css —Ü–µ –Ω–µ –ø–æ–∫—Ä–∏–≤–∞—î) */
    border-left: 1px solid var(--color-outline-v);
    padding-left: var(--space-m);
}


.marketplace-group {
    /* M3: Card Outlined Style */
    border: 1px solid var(--color-outline-v);
    padding: var(--space-m);
    margin-bottom: var(--space-l);
    border-radius: var(--radius-m);
    /* –§–æ–Ω —Ç—Ä–æ—Ö–∏ –≤–∏—â–∏–π –∑–∞ –æ—Å–Ω–æ–≤–Ω–∏–π —Ñ–æ–Ω –º–æ–¥–∞–ª–∫–∏ */
    background-color: var(--color-surface-c-low);
}

.marketplace-header {
    font-weight: 500;
    font-size: 1.1em;
    color: var(--color-on-surface);
    margin-bottom: var(--space-s);
}

.mapping-instance {
    /* –†–æ–∑–¥—ñ–ª—é–≤–∞—á –º—ñ–∂ —ñ–Ω—Å—Ç–∞–Ω—Å–∞–º–∏ (—è–∫—â–æ multi-mapping —É–≤—ñ–º–∫–Ω–µ–Ω–æ) */
    border-top: 1px dashed var(--color-outline);
    padding-top: var(--space-m);
    margin-top: var(--space-m);
}

.mapping-instance:first-child {
    border-top: none;
    padding-top: 0;
    margin-top: 0;
}

.mapping-actions {
    text-align: right;
    margin-bottom: var(--space-xs);
}

/* –ö–Ω–æ–ø–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —ñ–Ω—Å—Ç–∞–Ω—Å—É (Icon Button) */
.btn-remove-mapping {
    color: var(--color-error);
    background: transparent;
    border: none;
    cursor: pointer;
    font-size: 1.5rem; /* 24px */
    padding: var(--space-xs);
    border-radius: var(--radius-full);
    transition: background-color 150ms;
}

.btn-remove-mapping:hover {
    /* M3 Hover State (12% Error Color) */
    background-color: color-mix(in srgb, transparent, var(--color-error) 12%);
}
/* styles/components/_buttons.css */
@import url('buttons/_btn-secondary.css');
@import url('buttons/_connected-button.css');
@import url('buttons/_btn-edit.css');
@import url('buttons/_toolbar.css');

/* –ë–∞–∑–æ–≤—ñ —Å—Ç–∏–ª—ñ –∫–Ω–æ–ø–æ–∫ */
button {
    background-color: transparent;
    border: none;
    margin: 0;
    padding: 0;
    transition: background-color 0.2s, border-color 0.2s, opacity 0.2s, box-shadow 0.2s;
    background: transparent;
    cursor: pointer;
    font: inherit;
}

button:disabled {
    /* M3 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –ø—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ */
    opacity: 0.38;
    cursor: not-allowed;
    box-shadow: none !important;
}

/* --- –í–∞—Ä—ñ–∞–Ω—Ç–∏ –∫–Ω–æ–ø–æ–∫ --- */

/* .btn-save (–û—Å–Ω–æ–≤–Ω–∞ –∫–Ω–æ–ø–∫–∞ - M3 Filled Button) */
.btn-save {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    height: 40px; /* –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –≤–∏—Å–æ—Ç–∞ M3 */
    padding: 0 var(--space-l); /* 24px padding */
    border-radius: var(--radius-full);

    /* Typography: Label Large */
    font-size: 14px;
    font-weight: 500;

    background-color: var(--color-main);
    color: var(--color-on-main);
    border: none;

    position: relative;
    overflow: hidden; /* –î–ª—è State Layer */
}

/* M3 State Layer Implementation (::before) */
.btn-save::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    /* –ö–æ–ª—ñ—Ä —à–∞—Ä—É —Ç–∞–∫–∏–π —Å–∞–º–∏–π —è–∫ –∫–æ–ª—ñ—Ä —Ç–µ–∫—Å—Ç—É (On Main) */
    background-color: var(--color-on-main);
    opacity: 0;
    transition: opacity 0.2s ease;
}

/* –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å, —â–æ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞–¥ —à–∞—Ä–æ–º */
.btn-save span {
    position: relative;
    z-index: 1;
}

/* –°—Ç–∞–Ω –Ω–∞–≤–µ–¥–µ–Ω–Ω—è (Hover): 8% overlay + Elevation 1 */
.btn-save:hover {
    box-shadow: var(--shadow-1);
}
.btn-save:hover::before {
    opacity: 0.08;
}

/* –°—Ç–∞–Ω —Ñ–æ–∫—É—Å—É (Focus): 12% overlay */
.btn-save:focus-visible {
    outline: none;
}
.btn-save:focus-visible::before {
    opacity: 0.12;
}

/* –°—Ç–∞–Ω –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è (Active/Pressed): 12% overlay */
.btn-save:active {
    box-shadow: none;
}
.btn-save:active::before {
    opacity: 0.12;
}

/* –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ä–æ–∑–º—ñ—Ä —Ü—ñ–ª—ñ –¥–ª—è —ñ–∫–æ–Ω–æ–∫ M3 (40x40px) */
.modal-close-btn {
    max-width: 32px!important;
}

.footer .segment.active {
    background-color: var(--color-main);
    color: var(--color-on-main);
}
/* styles/components/_data-table-m3.css (–ù–û–í–ò–ô –§–ê–ô–õ) */
/* –°—Ç–∏–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö HTML —Ç–∞–±–ª–∏—Ü—å –ø—ñ–¥ –≤–∞—à—É M3 —Å–∏—Å—Ç–µ–º—É */

.table-container {
  flex-grow: 1;
  overflow-x: auto;
  overflow-y: auto; /* –î–æ–∑–≤–æ–ª—è—î–º–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É –ø—Ä–æ–∫—Ä—É—Ç–∫—É */
  /* M3: –§–æ–Ω –∫–∞—Ä—Ç–∫–∏ (Surface Container Lowest) */
  background-color: var(--color-surface-c-lowest);
  /* M3: –†–∞–¥—ñ—É—Å –∫–∞—Ä—Ç–∫–∏ (12px) */
  border-radius: var(--radius-m);
  /* M3: –¢—ñ–Ω—å –∫–∞—Ä—Ç–∫–∏ (Level 1) */
  box-shadow: var(--shadow-1);
  margin-bottom: var(--space-m);
  border: 1px solid var(--color-outline-v);
  min-height: 0; /* –í–∞–∂–ª–∏–≤–æ –¥–ª—è flex-grow –≤ main layout */
}

.data-table {
    width: 100%;
    border-collapse: collapse;
    font-size: 14px; /* M3 Body Medium */
}

.data-table th, .data-table td {
    /* M3: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –≤—ñ–¥—Å—Ç—É–ø –∫–æ–º—ñ—Ä–∫–∏ */
    padding: 12px 16px;
    text-align: left;
    /* M3: –†–æ–∑–¥—ñ–ª—å–Ω–∏–∫–∏ (Outline Variant) */
    border-bottom: 1px solid var(--color-outline-v);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.data-table thead th {
    /* M3: –§–æ–Ω —à–∞–ø–∫–∏ */
    background-color: var(--color-surface-c-lowest);
    font-weight: 500; /* M3 Label Large weight */
    color: var(--color-on-surface);
    position: sticky;
    top: 0;
    z-index: 1;
}

.data-table tbody td {
    color: var(--color-on-surface-v);
}

/* M3: –°—Ç–∞–Ω –Ω–∞–≤–µ–¥–µ–Ω–Ω—è (8% On Surface layer) */
.data-table tbody tr:hover {
  /* color-mix –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∞–¥–∞–ø—Ç—É—î—Ç—å—Å—è –¥–æ —Å–≤—ñ—Ç–ª–æ—ó/—Ç–µ–º–Ω–æ—ó —Ç–µ–º–∏ */
  background-color: color-mix(in srgb, transparent, var(--color-on-surface) 8%);
}

/* M3: –°—Ç–∞–Ω –≤–∏–±–æ—Ä—É (–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Main –∫–æ–ª—ñ—Ä –∑ –Ω–∏–∑—å–∫–æ—é –ø—Ä–æ–∑–æ—Ä—ñ—Å—Ç—é) */
.data-table tbody tr.selected {
    /* –ê–¥–∞–ø—Ç–∏–≤–Ω–∏–π —Ñ–æ–Ω –¥–ª—è –≤–∏–¥—ñ–ª–µ–Ω–Ω—è */
    background-color: color-mix(in srgb, var(--color-surface-c-lowest), var(--color-main) 20%);
}

.cell-checkbox, .cell-actions {
    text-align: center;
    width: 50px;
}

/* –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è (Icon Button) - –°—Ç–∏–ª—ñ –Ω–∞—Å–ª—ñ–¥—É—é—Ç—å—Å—è –∑ _buttons.css */
.btn-edit {
    font-size: 1.2rem;
}


/* –°—Ç–∏–ª—ñ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è */
th.sortable {
    cursor: pointer;
}

th.sortable:hover {
    background-color: color-mix(in srgb, transparent, var(--color-on-surface) 8%);
}

.sort-indicator {
    margin-left: 5px;
    display: inline-block;
    font-size: 0.8em;
    color: var(--color-outline);
}

th.sort-asc .sort-indicator,
th.sort-desc .sort-indicator {
    color: var(--color-on-surface);
}

th.sort-asc .sort-indicator::after { content: '‚ñ≤'; }
th.sort-desc .sort-indicator::after { content: '‚ñº'; }

/* --- –ó–∞–≥–∞–ª—å–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ —Ñ–æ—Ä–º --- */

.form-fieldset {
    border: 1px solid var(--color-outline-v);
    border-radius: var(--radius-m);
    padding: var(--space-m);
    margin-bottom: var(--space-m);
}

.form-fieldset legend {
    padding: 0 8px;
    font-weight: 500;
    font-size: 16px;
    color: var(--color-on-surface);
}

.form-fieldset {
    min-width: 0;
    box-sizing: border-box;
    max-width: 100%;
}

.form-fieldset input[type="text"],
.form-fieldset input[type="number"],
.form-fieldset select {
    width: 100%;
    box-sizing: border-box;
    min-width: 0;
}

.form-group {
    display: flex;
    flex-direction: column;
    margin-bottom: 8px;
}

label {
    margin-bottom: 4px;
    font-size: 12px;
    color: var(--color-on-surface-v);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

/* M3: Outlined Text Fields & Selects (Compact Height) */
input[type="text"],
select {
    padding: 8px 16px;
    /* M3: –ö–æ–ª—ñ—Ä —Ä–∞–º–∫–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º (Outline) */
    border: 1px solid var(--color-outline);
    /* M3: –†–∞–¥—ñ—É—Å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–ª—ñ–≤ (4px) */
    border-radius: var(--radius-xs);
    font-size: 16px;
    transition: border-color 0.2s, border-width 0.2s, padding 0.2s;
    height: 40px;
    background-color: transparent; /* Outlined –ø–æ–ª—è –ø—Ä–æ–∑–æ—Ä—ñ */
    color: var(--color-on-surface);
}

/* M3: –°—Ç–∞–Ω –Ω–∞–≤–µ–¥–µ–Ω–Ω—è */
input[type="text"]:hover,
select:hover {
    border-color: var(--color-on-surface);
}

/* M3: –°—Ç–∞–Ω —Ñ–æ–∫—É—Å—É */
input[type="text"]:focus,
select:focus {
    /* M3: –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–ª—ñ—Ä —Ç–∞ —Ç–æ–≤—â–∞ —Ä–∞–º–∫–∞ –ø—Ä–∏ —Ñ–æ–∫—É—Å—ñ */
    border-color: var(--color-main);
    border-width: 2px;
    outline: none;
    /* –ö–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—Ç—É–ø—ñ–≤ –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü—ñ—ó —Ç–æ–≤—â–∏–Ω–∏ —Ä–∞–º–∫–∏ (8px 16px -> 7px 15px) */
    padding: 7px 15px;
}

/* --- –°–¢–ò–õ–Ü –ú–ê–ö–ï–¢–£ –§–û–†–ú–ò (CSS Grid) --- */

.form-grid, .form-grid-2, .form-grid-3, .form-grid-4, .form-grid-5, .form-grid-6 {
    display: grid;
    gap: var(--space-m);
    align-items: start;
}

.form-grid-triple {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: var(--space-m);
}

.form-grid-2 { grid-template-columns: repeat(2, 1fr); }
.form-grid-3 { grid-template-columns: repeat(3, 1fr); }
.form-grid-4 { grid-template-columns: repeat(4, 1fr); }
.form-grid-5 { grid-template-columns: repeat(5, 1fr); }
.form-grid-6, .form-grid { grid-template-columns: repeat(6, 1fr); } /* 6 –∫–æ–ª–æ–Ω–æ–∫ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º */

/* (–ù–û–í–ï) –ö–ª–∞—Å–∏ –¥–ª—è –æ–±'—î–¥–Ω–∞–Ω–Ω—è –∫–æ–ª–æ–Ω–æ–∫ */
.span-1 { grid-column: span 1; }
.span-2 { grid-column: span 2; }
.span-3 { grid-column: span 3; }
.span-4 { grid-column: span 4; }
.span-5 { grid-column: span 5; }
.span-6 { grid-column: span 6; }

/* (–ù–û–í–ï) –ê–¥–∞–ø—Ç–∏–≤–Ω–∏–π –±–ª–æ–∫ –¥–ª—è –ù–∞–∑–≤/–ü—Ä–∏–º—ñ—Ç–æ–∫ */
.form-responsive-pair {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: var(--space-m);
    align-items: start;
}

.form-input-group {
    display: flex;
    flex-direction: column;
    gap: var(--space-xs); /* –í—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ —ñ–Ω–ø—É—Ç–∞–º–∏ –≤ –≥—Ä—É–ø—ñ */
}

/* –ö–æ–ª–∏ –≤—ñ–¥–∫—Ä–∏—Ç–∞ –±—ñ—á–Ω–∞ –ø–∞–Ω–µ–ª—å, —Ü–µ–π –±–ª–æ–∫ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –≤ 1 –∫–æ–ª–æ–Ω–∫—É */
.side-panel-visible .form-responsive-pair {
    grid-template-columns: 1fr;
}

.input-with-chip {
    position: relative;
    display: flex;
    align-items: center;
}
.input-with-chip input {
    padding-right: 50px !important; 
}
.input-language-chip {
    position: absolute;
    right: 8px;
    background-color: var(--color-surface-c-high);
    color: var(--color-on-surface-v);
    font-size: 12px;
    font-weight: 500;
    padding: 2px 6px;
    border-radius: var(--radius-full);
    pointer-events: none;
}

.marketplace-grid {
    display: grid;
    grid-template-columns: 1fr 2fr 7fr;
    gap: var(--space-m);
    align-items: center;
}

.marketplace-header {
    font-weight: 500;
    font-size: 14px;
    color: var(--color-on-surface-v);
    padding-bottom: 8px;
}

.marketplace-name {
    font-weight: 400;
    font-size: 16px;
    color: var(--color-on-surface);
    margin-bottom: 0;
}

.toggle-switch-segmented {
    position: relative;
    display: inline-block;
    height: 40px;
    flex-shrink: 0;
}

.toggle-switch-segmented input {
    opacity: 0;
    width: 0;
    height: 0;
}

.toggle-switch-segmented .slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    /* M3: –†–∞–º–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ - Outline */
    border: 1px solid var(--color-outline);
    transition: .3s;
    /* –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: M3 –≤–∏–º–∞–≥–∞—î –ø–æ–≤–Ω–æ–≥–æ –∑–∞–æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É */
    border-radius: var(--radius-full);
    overflow: hidden;
}

/* "–ü–æ–≤–∑—É–Ω–æ–∫" (–ê–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–∞–Ω) - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ::before */
.toggle-switch-segmented .slider:before {
    position: absolute;
    content: "";
    height: 100%;
    width: 50%;
    left: 0;
    top: 0;
    /* M3: –§–æ–Ω –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ - Secondary Container */
    background-color: var(--color-secondary);
    transition: transform .3s ease;
    z-index: 1;
    /* –î–æ–¥–∞—î–º–æ —Ç–æ–Ω–∫–∏–π —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á –º—ñ–∂ –∞–∫—Ç–∏–≤–Ω–∏–º —ñ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–º —Å–µ–≥–º–µ–Ω—Ç–æ–º */
    box-shadow: 1px 0 0 var(--color-outline);
}

/* –°—Ç–∏–ª—ñ —Ç–µ–∫—Å—Ç—É –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –ø–µ—Ä–µ–º–∏–∫–∞—á–∞ */
.toggle-switch-segmented .text-on,
.toggle-switch-segmented .text-off {
    position: absolute;
    width: 50%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 14px;
    font-weight: 500;
    /* M3: –ö–æ–ª—ñ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É - On Surface */
    color: var(--color-on-surface);
    transition: color 0.3s;
    user-select: none;
    z-index: 2; /* –¢–µ–∫—Å—Ç –Ω–∞–¥ –ø–æ–≤–∑—É–Ω–∫–æ–º */
}

.toggle-switch-segmented .text-on {
    right: 0;
}

.toggle-switch-segmented .text-off {
    left: 0;
}

/* –°—Ç–∞–Ω: –£–≤—ñ–º–∫–Ω–µ–Ω–æ (–ö—ñ–Ω—Ü–µ–≤–∞) - –ß–µ–∫–±–æ–∫—Å checked */
input:checked + .slider:before {
    transform: translateX(100%);
    /* –ó–º—ñ–Ω—é—î–º–æ —Ç—ñ–Ω—å –Ω–∞ –ª—ñ–≤—É —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è */
    box-shadow: -1px 0 0 var(--color-outline);
}

/* –ü—ñ–¥—Å–≤—ñ—á—É—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π —Ç–µ–∫—Å—Ç - On Secondary Container */
input:checked + .slider .text-on,
input:not(:checked) + .slider .text-off {
    color: var(--color-on-secondary);
}

.form-grid-complex {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--space-m);
}

.form-grid-complex .full-width {
    grid-column: 1 / -1;
}

.custom-select-wrapper.disabled {
    opacity: 0.5;
    pointer-events: none;
    background-color: var(--color-surface-c);
}

/* –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –≤—Å—ñ—Ö –ø–æ–ª—ñ–≤ –≤–≤–æ–¥—É —Ç–∞ –∫–∞—Å—Ç–æ–º–Ω–∏—Ö —Å–µ–ª–µ–∫—Ç—ñ–≤ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ .form-group */
.form-group input[type="text"],
.form-group input[type="search"],
.form-group textarea,
.form-group .custom-select-wrapper {
    width: 100%;
}

#char-notes {
    padding: 8px 16px;
    border: 1px solid var(--color-outline);
    border-radius: var(--radius-xs);
    font-size: 16px;
    transition: border-color 0.2s, border-width 0.2s, padding 0.2s;
    min-height: 40px;
    height: 40px;
    background-color: transparent;
    color: var(--color-on-surface);
    resize: none;
}

/* –î–æ–¥–∞–π—Ç–µ —Ü—ñ –∫–ª–∞—Å–∏ –≤ –∫—ñ–Ω–µ—Ü—å —Ñ–∞–π–ª—É styles/components/_forms.css */

.marketplace-section {
    padding-bottom: 16px;
    margin-bottom: 16px;
}

.marketplace-section:not(:last-child) {
    border-bottom: 1px solid var(--color-outline-v);
}

.marketplace-heading {
    margin-bottom: 12px;
    font-weight: 500;
    color: var(--color-on-surface);
}
/* styles/components/_layout.css (M3 Update) */

.main-content {
  display: flex;
  flex-direction: column;
  width: 100%;
  height: 100%;
  /* M3: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Surface Container Lowest (–ë—ñ–ª–∏–π —É —Å–≤—ñ—Ç–ª—ñ–π —Ç–µ–º—ñ) –¥–ª—è —Ñ–æ–Ω—É –∫–æ–Ω—Ç–µ–Ω—Ç—É */
  background-color: var(--color-surface-c-lowest);
  /* M3: –ó–±—ñ–ª—å—à–µ–Ω–∏–π —Ä–∞–¥—ñ—É—Å (16px) –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ */
  border-radius: var(--radius-l);
  overflow: hidden;
  /* M3: Elevation Level 1 */
  box-shadow: var(--shadow-1);
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: var(--space-m) var(--space-l);
  /* M3: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Outline Variant –¥–ª—è —Ç–æ–Ω–∫–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—é–≤–∞—á–∞ */
  border-bottom: 1px solid var(--color-outline-v);
  flex-shrink: 0;
  /* –§–æ–Ω –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î main-content */
  background-color: var(--color-surface-c-lowest);
}

.tabs-container {
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  overflow: hidden;
  /* –ó–±—ñ–ª—å—à–µ–Ω—ñ –≤—ñ–¥—Å—Ç—É–ø–∏ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –≤–∏–≥–ª—è–¥—É */
  padding: var(--space-l);
  min-height: 0;
}

.footer {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: var(--space-s) var(--space-l);
  border-top: 1px solid var(--color-outline-v);
  /* M3: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Surface Container –¥–ª—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç—É —Ñ—É—Ç–µ—Ä–∞ */
  background-color: var(--color-surface-c);
  flex-shrink: 0;
}

.header-controls {
    display: flex;
    align-items: center;
    gap: var(--space-m);
}
/* styles/components/_lines.css */
@import url('lines/_search.css');
@import url('lines/_checkbox.css');
/* styles/components/_modal.css (M3 Update) */

.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    /* M3: Scrim (–∑–∞—Ç–µ–º–Ω–µ–Ω–Ω—è —Ñ–æ–Ω—É) */
    background-color: var(--color-scrim);
    z-index: 1000;
    display: flex;
    justify-content: center;
    align-items: center;
    animation: fadeIn 0.3s ease-out;
}

.modal-content {
    background-color: var(--color-surface-c-high);
    padding: var(--space-l);
    border-radius: var(--radius-xl);
    box-shadow: var(--shadow-3);
    width: 85vw;
    min-width: 85vw;
    height: 85vh;
    animation: scaleIn 0.3s ease-out;
    display: flex;
    flex-direction: column;
    overflow: hidden;
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: none;
    padding-bottom: 0;
    margin-bottom: var(--space-m);
    flex-shrink: 0;
    gap: 24px;
}

.modal-header h2 {
    /* M3: –¢–∏–ø–æ–≥—Ä–∞—Ñ—ñ–∫–∞ - Headline Small (24px) */
    font-size: 1.5rem;
    font-weight: 400;
    line-height: 32px;
    margin: 0;
    color: var(--color-on-surface);
}

.modal-header .header-actions {
    display: flex;
    align-items: center;
    gap: var(--space-xs);
}

.modal-body--split {
    display: flex;
    overflow: hidden;
    flex-grow: 1;
    min-height: 0;
}

.scrollable-panel {
    overflow-y: auto;
    min-height: 0;
}

.form-section {
    width: 100%;
    flex-shrink: 0;
    transition: width 0.4s ease-in-out;
}

.related-section {
    width: 0;
    flex-shrink: 0;
    opacity: 0;
    transition: width 0.4s ease-in-out, opacity 0.4s ease-in-out;
    padding-left: 0;
}

.modal-body--split.side-panel-visible .form-section {
    width: 60%;
    min-width: 0;
}

.modal-body--split .modal-form-container {
    flex: 1 1 auto;
    min-width: 0;
}

.related-section.visible {
    width: 40%;
    opacity: 1;
    display: block;
    padding: 0 var(--space-l);
}

/* –ê–Ω—ñ–º–∞—Ü—ñ—ó */
@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

@keyframes scaleIn {
    from { transform: scale(0.8); opacity: 0; }
    to { transform: scale(1); opacity: 1; }
}

.panel-table-actions {
    display: flex;
    gap: var(--space-xs);
    padding: 0 0 var(--space-m) 0;
}

.modal-title-container {
    display: flex;
    align-items: center;
    gap: var(--space-m);
}

/* –°—Ç–∏–ª—ñ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è */
.modal-footer {
    padding-top: var(--space-l);
    margin-top: var(--space-l);
    border-top: 1px solid var(--color-outline-v);
    display: flex;
    justify-content: flex-end;
}

.deletion-details-list {
    list-style-type: none;
    padding-left: var(--space-m);
    margin-top: var(--space-m);
    border-left: 2px solid var(--color-outline-v);
}

.deletion-details-list li {
    padding: var(--space-xxs) 0;
}

/* –°—Ç–∏–ª—å –¥–ª—è "–Ω–µ–±–µ–∑–ø–µ—á–Ω–æ—ó" –∫–Ω–æ–ø–∫–∏ */
.accent-btn {
    background-color: var(--color-error-c);
    color: var(--color-on-error-c);
}
.accent-btn:hover {
    box-shadow: var(--shadow-1);
}
/* styles/components/_multiselect.css (–ù–û–í–ò–ô –§–ê–ô–õ) */

.multiselect-container {
    position: relative;
    font-size: 1rem;
}

.multiselect-control {
    /* M3: –í–∏–≥–ª—è–¥ Outlined Text Field */
    border: 1px solid var(--color-outline);
    border-radius: var(--radius-xs);
    padding: 5px;
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    /* –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞–∑–æ–≤–∏–π Surface –∞–±–æ Lowest –¥–ª—è –ø–æ–ª—ñ–≤ –≤–≤–æ–¥—É */
    background-color: var(--color-surface-c-lowest);
    min-height: 42px; /* –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –≤–∏—Å–æ—Ç–∞ input */
    box-sizing: border-box;
    transition: border-color 150ms;
}

/* –°—Ç–∞–Ω —Ñ–æ–∫—É—Å—É */
.multiselect-control:focus-within {
    border-color: var(--color-main);
    /* –Ü–º—ñ—Ç–∞—Ü—ñ—è 2px –±–æ—Ä–¥–µ—Ä–∞ M3 */
    box-shadow: 0 0 0 1px var(--color-main);
}

.multiselect-control.disabled {
    /* M3 Disabled state */
    background-color: var(--color-surface-c-high);
    color: var(--color-on-surface-v);
    cursor: not-allowed;
    border-color: var(--color-outline-v);
    opacity: 0.7;
}

.multiselect-selected-items {
    display: flex;
    flex-wrap: wrap;
    gap: var(--space-xxs);
}

/* M3: Chips (–°—Ç–∏–ª—å Assist/Input Chip) */
.multiselect-item {
    background-color: var(--color-surface-c-high);
    color: var(--color-on-surface);
    border: 1px solid var(--color-outline);
    border-radius: var(--radius-s);
    padding: 4px 12px;
    margin: 3px;
    display: flex;
    align-items: center;
    font-size: 14px;
}

.multiselect-remove-item {
    margin-left: var(--space-xs);
    cursor: pointer;
    font-weight: bold;
    color: var(--color-on-surface-v);
}

.multiselect-remove-item:hover {
    color: var(--color-on-surface);
}

.multiselect-search {
    border: none;
    outline: none;
    flex-grow: 1;
    padding: 5px;
    min-width: 100px;
    font-size: 1rem;
    background-color: transparent;
    color: var(--color-on-surface);
}

.multiselect-control.disabled .multiselect-search {
    display: none;
}

/* M3: –ü–∞–Ω–µ–ª—å Menu/Dropdown */
.multiselect-dropdown {
    position: absolute;
    top: calc(100% + 4px);
    left: 0;
    right: 0;
    background-color: var(--color-surface-c-low); /* M3 Menu background */
    border-radius: var(--radius-xs);
    box-shadow: var(--shadow-2); /* M3 Menu elevation */
    z-index: 101;
    max-height: 250px;
    overflow-y: auto;
}

.multiselect-options {
    list-style: none;
    padding: 8px 0; /* M3 Menu padding */
    margin: 0;
}

.multiselect-options li {
    padding: 8px 12px;
    cursor: pointer;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    color: var(--color-on-surface);
}

/* M3: –°—Ç–∞–Ω –Ω–∞–≤–µ–¥–µ–Ω–Ω—è –ø—É–Ω–∫—Ç—É –º–µ–Ω—é */
.multiselect-options li:hover {
    /* –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ color-mix –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è state layer */
    background-color: color-mix(in srgb, transparent, var(--color-on-surface) 8%);
}

/* M3: –°—Ç–∞–Ω –≤–∏–±—Ä–∞–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É –º–µ–Ω—é */
.multiselect-options li.selected {
    /* –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Secondary Container –¥–ª—è –≤–∏–¥—ñ–ª–µ–Ω–Ω—è */
    background-color: var(--color-secondary-c);
    color: var(--color-on-secondary-c);
    font-weight: bold;
}

.multiselect-options li.no-results {
    cursor: default;
    color: var(--color-on-surface-v);
}
/* styles/components/_pagination.css */

.pagination-container {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 16px;
    flex-wrap: wrap;
}

/* 1. –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö */
.pagination-nav {
    display: flex;
    align-items: center;
    background-color: var(--color-surface-c-lowest);
    border-radius: var(--radius-full);
    padding: 4px;
    gap: 4px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.page-btn,
.page-ellipsis {
    border: none;
    background-color: transparent;
    font-family: inherit;
    font-size: 14px;
    font-weight: 500;
    color: var(--color-on-surface-v);
    cursor: pointer;
    border-radius: var(--radius-full);
    min-width: 32px;
    height: 32px;
    display: inline-flex;
    justify-content: center;
    align-items: center;
    transition: background-color 150ms ease-out, color 150ms ease-out;
}

.page-btn:hover:not(:disabled) {
    background-color: var(--color-secondary);
    color: var(--color-on-secondary);
}

.page-btn:disabled {
    color: var(--color-outline);
    cursor: not-allowed;
}

.page-btn.active {
    background-color: var(--color-secondary);
    color: var(--color-on-secondary);
    font-weight: 600;
    box-shadow: var(--shadow-1);
}

.page-ellipsis {
    cursor: default;
    min-width: 24px;
}

/* 2. –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–∏–±–æ—Ä—É —Ä–æ–∑–º—ñ—Ä—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (FAB-like menu) */
/* –ì–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, —è–∫–∏–π –ø–æ–∑–∏—Ü—ñ–æ–Ω—É—î –≤—Å–µ –º–µ–Ω—é */
.page-size-selector {
    position: relative;
}

/* –û—Å–Ω–æ–≤–Ω–∞ –∫–Ω–æ–ø–∫–∞ (FAB) */
.page-size-trigger {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 56px;
    height: 56px;
    border-radius: 50%;
    background-color: var(--color-secondary);
    color: var(--color-on-secondary);
    box-shadow: var(--shadow-2);
    cursor: pointer;
    border: none;
    transition: box-shadow 0.2s ease-in-out;
}

.page-size-trigger:hover {
    box-shadow: var(--shadow-3);
}

/* (–ó–ú–Ü–ù–ï–ù–û) –†–æ–±–∏–º–æ –ª–µ–π–±–ª –≤–∏–¥–∏–º–∏–º —ñ —Å—Ç–∏–ª—ñ–∑—É—î–º–æ –π–æ–≥–æ */
#page-size-label {
    display: block;
    font-size: 16px;
    font-weight: 500;
}

/* (–í–ò–î–ê–õ–ï–ù–û) –ë—ñ–ª—å—à–µ –Ω–µ —Å—Ç–≤–æ—Ä—é—î–º–æ —ñ–∫–æ–Ω–∫—É "+" —á–µ—Ä–µ–∑ CSS */
/* .page-size-trigger::before, .page-size-trigger::after { ... } */
/* (–í–ò–î–ê–õ–ï–ù–û) –ê–Ω—ñ–º–∞—Ü—ñ—è "+" –≤ "—Ö" –±—ñ–ª—å—à–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞ */
/* .page-size-selector.is-open .page-size-trigger { ... } */


/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ–ø—Ü—ñ–π, —Ç–µ–ø–µ—Ä –≤—ñ–Ω –Ω–µ–≤–∏–¥–∏–º–∏–π */
.page-size-menu {
    position: absolute;
    bottom: 0;
    right: 0;
    width: auto;
    height: auto;
    pointer-events: none;
}

/* –°—Ç–∏–ª—å –¥–ª—è –∫–æ–∂–Ω–æ—ó –æ–∫—Ä–µ–º–æ—ó –æ–ø—Ü—ñ—ó (–ø—ñ–≥—É–ª–∫–∏) */
.page-size-option {
    position: absolute;
    right: 4px;
    bottom: 0;

    display: flex;
    align-items: center;
    justify-content: flex-end;

    width: auto;
    white-space: nowrap;
    padding: 8px 16px;

    background-color: var(--color-surface-c-high);
    color: var(--color-on-surface);
    border-radius: var(--radius-full);
    box-shadow: var(--shadow-2);

    cursor: pointer;
    border: none;

    opacity: 0;
    transform: translateY(10px);
    pointer-events: none;
    transition: opacity 0.2s ease-out, transform 0.2s ease-out;
}

.page-size-option:hover {
    background-color: var(--color-secondary-c);
}

.page-size-selector.is-open .page-size-option {
    opacity: 1;
    transform: translateY(0);
    pointer-events: auto;
}

/* –ü–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è —Ç–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –∞–Ω—ñ–º–∞—Ü—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ—ó –æ–ø—Ü—ñ—ó */
.page-size-option:nth-child(1) {
    bottom: 68px;
    transition-delay: 0.20s;
}

.page-size-option:nth-child(2) {
    bottom: 116px;
    transition-delay: 0.15s;
}

.page-size-option:nth-child(3) {
    bottom: 164px;
    transition-delay: 0.10s;
}

.page-size-option:nth-child(4) {
    bottom: 212px;
    transition-delay: 0.05s;
}

.page-size-option:nth-child(5) {
    bottom: 260px;
    transition-delay: 0s;
}
/* styles/components/_progress-bar.css */
.progress-bar-container {
    width: 100%;
    height: 12px;
    background-color: var(--color-surface-c-high);
    border-radius: var(--radius-full);
    overflow: hidden;
    position: relative;
}

.progress-bar-fill {
    width: 0%;
    height: 100%;
    background-color: var(--color-main);
    border-radius: var(--radius-full);
    transition: width 0.3s ease-in-out;
    position: relative;
    z-index: 2;
}

.progress-bar-wave {
    position: absolute;
    top: -6px;
    left: 0;
    width: 40px;
    height: 24px;
    background: var(--color-main);
    opacity: 0.8;
    border-radius: 50%;
    animation: wave 2s infinite linear;
    z-index: 1;
    filter: blur(2px);
}

@keyframes wave {
    0% { transform: translateX(-40px) scale(1, 2); }
    100% { transform: translateX(100vw) scale(1, 2); }
}
/* styles/components/_select.css */

.custom-select-wrapper {
    position: relative;
    width: 100%;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
}

.custom-select-trigger {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: var(--space-xs) var(--space-m);
    border: 1px solid var(--color-outline);
    border-radius: var(--radius-xs);
    cursor: pointer;
    transition: border-color 150ms ease-in-out, box-shadow 150ms ease-in-out;
    max-height: 40px;
}

.custom-select-wrapper.is-open .custom-select-trigger {
    border-color: var(--color-main);
    box-shadow: 0 0 0 1px var(--color-main);
}

.custom-select-value-container {
    display: flex;
    flex-wrap: wrap;
    gap: var(--space-xxs);
    align-items: center;
    overflow: hidden;
    max-height: 30px; 
}

.custom-select-overflow-chips {
    display: none; /* –•–æ–≤–∞—î–º–æ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º */
    flex-wrap: wrap;
    gap: var(--space-xxs);
    padding: var(--space-s);
    border-bottom: 1px solid var(--color-outline-v);
    background-color: var(--color-surface-c-low);
}

.custom-select-chip.is-summary {
    background-color: var(--color-main);
    color: var(--color-on-main);
    font-weight: 500;
    min-width: 24px;
    height: 24px;
    padding: 2px;
    border-radius: 50%;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-size: 14px;
    line-height: 1;
}

.custom-select-placeholder {
    color: var(--color-on-surface-v);
    opacity: 0.8;
}

.custom-select-arrow {
    width: 24px;
    height: 24px;
    flex-shrink: 0;
    margin-left: var(--space-xs);
    transition: transform 200ms ease-in-out;
    fill: var(--color-on-surface-v);
}

.custom-select-wrapper.is-open .custom-select-arrow {
    transform: rotate(180deg);
}

.custom-select-panel {
    position: absolute;
    top: calc(100% + var(--space-xxs));
    left: 0;
    right: 0;
    z-index: 100;
    background-color: var(--color-surface-c-high);
    border-radius: var(--radius-m);
    box-shadow: var(--shadow-2);
    opacity: 0;
    transform: translateY(-10px);
    pointer-events: none;
    transition: opacity 150ms ease-in-out, transform 150ms ease-in-out;
    max-height: 250px;
    display: flex;
    flex-direction: column;
}

.custom-select-wrapper.is-open .custom-select-panel {
    opacity: 1;
    transform: translateY(0);
    pointer-events: auto;
}

.custom-select-search-wrapper {
    padding: var(--space-s);
    border-bottom: 1px solid var(--color-outline-v);
}

.custom-select-search {
    width: 100%;
    padding: var(--space-xs);
    border: 1px solid var(--color-outline);
    border-radius: var(--radius-xs);
    background-color: var(--color-surface-c-lowest);
    color: var(--color-on-surface);
}

.custom-select-search:focus {
    outline: none;
    border-color: var(--color-main);
}

.custom-select-options {
    list-style: none;
    padding: var(--space-xs) 0;
    margin: 0;
    overflow-y: auto;
}

.custom-select-option {
    padding: var(--space-s) var(--space-m);
    cursor: pointer;
    transition: background-color 150ms ease-in-out;
    color: var(--color-on-surface);
    display: flex;
    align-items: center;
    gap: var(--space-s);
}

.custom-select-option:hover {
    background-color: var(--hover-bg);
}

.custom-select-option.is-selected {
    background-color: var(--color-main-c);
    color: var(--color-main);
    font-weight: 700;
}

.custom-select-option.is-hidden {
    display: none;
}

/* –°—Ç–∏–ª—ñ –¥–ª—è –º—É–ª—å—Ç–∏—Å–µ–ª–µ–∫—Ç–∞ (—á—ñ–ø—Å–∏) */
.custom-select-chip {
    display: inline-flex;
    align-items: center;
    padding: 2px var(--space-xs);
    background-color: var(--color-secondary-c);
    color: var(--color-on-secondary-c);
    border-radius: var(--radius-full);
    font-size: 14px;
    line-height: 20px;
}

.custom-select-chip__remove {
    margin-left: var(--space-xxs);
    min-width: 24px;
    height: 24px;
    border: none;
    background: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--color-on-secondary-c);
    opacity: 0.7;
    padding: 0;
    border-radius: 50%;
}

.custom-select-chip__remove:hover {
    opacity: 1;
    background-color: rgba(0, 0, 0, 0.1);
}

.custom-select-wrapper.disabled {
    opacity: 0.5;
    pointer-events: none;
    background-color: var(--color-surface-c);
}
/* styles/components/_table.css (M3 Update) */

.pseudo-table-container {
  flex-grow: 1;
  overflow-y: auto;
  /* M3: –¢–æ–Ω–∫–∞ —Ä–∞–º–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (Outline Variant) */
  border: 1px solid var(--color-outline-v);
  /* M3: –†–∞–¥—ñ—É—Å –∫–∞—Ä—Ç–∫–∏ (12px) */
  border-radius: var(--radius-m);
  min-height: 0;
  scrollbar-gutter: stable;
  background-color: var(--color-surface-c-lowest);
}

.pseudo-table-header,
.pseudo-table-row {
  display: grid;
  grid-template-columns: 100px 160px 70px 1fr 1fr 1fr 1fr 1fr 1fr 1fr 70px;
  /* M3: –¢—ñ–ª—å–∫–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ñ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–∏ */
  border-bottom: 1px solid var(--color-outline-v);
  align-items: center;
}

/* –°—Ç–∏–ª—ñ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ */
#characteristics .pseudo-table-header,
#characteristics .pseudo-table-row {
    grid-template-columns: 100px 170px 100px 1fr 1fr 1fr 70px 70px;
}

/* –Ü –∑–∞–º—ñ–Ω—ñ—Ç—å –π–æ–≥–æ –Ω–∞ —Ü–µ (–¥–æ–¥–∞–Ω–æ 2 –∫–æ–ª–æ–Ω–∫–∏) */
#options .pseudo-table-header,
#options .pseudo-table-row {
    grid-template-columns: 100px 160px 160px 160px 1fr 1fr 1fr;
}

.pseudo-table-row-inner {
  display: grid;
  grid-template-columns: 100px 1fr;
  border-bottom: 1px solid var(--color-outline-v);
  align-items: center;
}

.pseudo-table-header {
  position: sticky;
  top: 0;
  /* M3: –§–æ–Ω —à–∞–ø–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É */
  background-color: var(--color-surface-c-lowest);
  font-weight: 500;
  font-size: 14px;
  z-index: 10;
  color: var(--color-on-surface);
}

/* M3: –°—Ç–∞–Ω –Ω–∞–≤–µ–¥–µ–Ω–Ω—è —Ä—è–¥–∫–∞ (State Layer - 8% On Surface) */
.pseudo-table-row:hover {
  /* –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ color-mix –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è 8% —à–∞—Ä—É –∫–æ–ª—å–æ—Ä—É On Surface.
     –¶–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∞–¥–∞–ø—Ç—É—î—Ç—å—Å—è –¥–æ —Å–≤—ñ—Ç–ª–æ—ó/—Ç–µ–º–Ω–æ—ó —Ç–µ–º–∏. */
  background-color: color-mix(in srgb, transparent, var(--color-on-surface) 8%);
}

.pseudo-table-cell {
  padding: 14px 16px;
  border-right: none;
  box-sizing: border-box;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  font-size: 14px;
  color: var(--color-on-surface-v);
}

.pseudo-table-header .pseudo-table-cell {
    padding: 14px 16px;
    color: var(--color-on-surface);
}

.pseudo-table-cell:last-child {
  border-right: none;
}

.cell-actions {
  display: flex;
  gap: var(--space-xs);
}

/* –ù–æ–≤—ñ —Å—Ç–∏–ª—ñ –¥–ª—è —à–∞–ø–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ */
.header-actions-cell {
    display: flex;
    align-items: center;
    gap: 12px;
}
.header-actions-cell span {
    cursor: default;
}
.is-hidden {
    display: none !important;
}

.side-panel-table .pseudo-table-header,
.side-panel-table .pseudo-table-row-inner {
    grid-template-columns: 120px 1fr;
}

.side-panel-table .pseudo-table-header {
    background-color: var(--color-surface-c-high);
}

.panel-header {
    display: flex;
    flex-wrap: wrap; /* –î–æ–∑–≤–æ–ª—è—î –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç–∏—Å—å –Ω–∞ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫ –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ */
    align-items: center;
    gap: 16px;
    margin-bottom: 12px;
}

.panel-title {
    margin: 0;
    font-size: 1.2em;
    font-weight: 500;
    margin-right: 16px; 
}

/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ—à—É–∫—É —Ç–∞ –∫–Ω–æ–ø–æ–∫ */
.panel-controls {
    display: flex;
    align-items: center;
    gap: 16px;
    flex-grow: 1; 
    /* –ö–ª—é—á–æ–≤–µ –ø—Ä–∞–≤–∏–ª–æ, —â–æ –ø—Ä–∏—Ç–∏—Å–∫–∞—î –∫–æ–Ω—Ç—Ä–æ–ª–∏ –≤–ø—Ä–∞–≤–æ */
    margin-left: auto; 
    justify-content: space-between; 
}

.panel-search {
    min-width: 150px;
    max-width: 250px;
    flex-shrink: 1;
}

.side-panel-search {
    width: 100%;
    padding: 6px 10px;
    border: 1px solid var(--color-outline-v);
    border-radius: var(--radius-full);
    background-color: var(--color-surface-c-low);
    color: var(--color-on-surface);
    font-size: 14px;
}

.side-panel-search:focus {
    outline: none;
    border-color: var(--color-main);
}

.panel-actions {
    flex-shrink: 0; 
}

/* –°—Ç–∏–ª—ñ –¥–ª—è —Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ */
.sortable-header {
    cursor: pointer;
    user-select: none;
    display: flex;
    justify-content: space-between; /* –†–æ–∑–º—ñ—â—É—î —Ç–µ–∫—Å—Ç —ñ —Å—Ç—Ä—ñ–ª–∫—É –ø–æ –∫—Ä–∞—è—Ö */
    align-items: center;
}

.sortable-header:hover {
    background-color: var(--hover-bg);
    border-radius: var(--radius-m);
}

/* –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è (—Å—Ç—Ä—ñ–ª–æ—á–∫–∞) */
.sort-indicator {
    display: inline-block;
    width: 0;
    height: 0;
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
    margin-left: 8px;
    opacity: 0.5;
    transition: transform 150ms ease-out, opacity 150ms ease-out;
}

.sortable-header:hover .sort-indicator {
    opacity: 1;
}

/* –°—Ç–∞–Ω —Å—Ç—Ä—ñ–ª–∫–∏ "–≤–≥–æ—Ä—É" */
.sort-indicator.sort-asc {
    opacity: 1;
    border-bottom: 5px solid var(--color-on-surface);
}

/* –°—Ç–∞–Ω —Å—Ç—Ä—ñ–ª–∫–∏ "–≤–Ω–∏–∑" */
.sort-indicator.sort-desc {
    opacity: 1;
    border-top: 5px solid var(--color-on-surface);
}
/* styles/components/_tabs.css (M3 Update) */

/* --- –ù–û–í–Ü –°–¢–ò–õ–Ü: –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –≤–∫–ª–∞–¥–æ–∫ (M3 Primary Tabs) --- */

.tab-nav {
    display: flex;
    flex-direction: row;
    /* M3: –†–æ–∑–¥—ñ–ª—é–≤–∞—á –ø—ñ–¥ –≤—Å—ñ—î—é –ø–∞–Ω–µ–ª–ª—é –≤–∫–ª–∞–¥–æ–∫ */
    border-bottom: 1px solid var(--color-outline-v);
    /* –í—ñ–¥—Å—Ç—É–ø –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç—É –≤–∫–ª–∞–¥–∫–∏ */
    margin-bottom: var(--space-m);
}

.tab-link {
    padding: 10px 16px;
    cursor: pointer;
    border: none;
    background: transparent;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;

    font-size: 14px;
    font-weight: 500;
    line-height: 20px;

    /* Default Color: On Surface Variant */
    color: var(--color-on-surface-v);
    transition: color 0.2s;
}

/* –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—ó –≤–∫–ª–∞–¥–∫–∏ */
.tab-link::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 50%;
    width: 0;
    height: 3px; /* –í–∏—Å–æ—Ç–∞ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ M3 */
    background-color: var(--color-main);
    /* M3: –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –º–∞—î –∑–∞–æ–∫—Ä—É–≥–ª–µ–Ω—ñ –≤–µ—Ä—Ö–Ω—ñ –∫—É—Ç–∏ */
    border-radius: 3px 3px 0 0;
    transition: width 0.3s cubic-bezier(0.4, 0.0, 0.2, 1), left 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);
}

/* –°—Ç–∞–Ω –Ω–∞–≤–µ–¥–µ–Ω–Ω—è */
.tab-link:hover {
    /* Hover Color: On Surface */
    color: var(--color-on-surface);
}

/* –ê–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–∞–Ω */
.tab-link.active {
    /* Active Color: Primary */
    color: var(--color-main);
}

.tab-link.active::after {
    width: 100%;
    left: 0;
}


/* --- –Ü—Å–Ω—É—é—á—ñ —Å—Ç–∏–ª—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É –≤–∫–ª–∞–¥–æ–∫ --- */

.tab-content {
  display: none;
  flex-grow: 1;
  flex-direction: column;
  min-height: 0;
}

.tab-content.active {
  display: flex;
}

.tab-content-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--space-m);
    flex-shrink: 0;
}
/* styles/components/_toast.css (M3 Update) */
#toast-container {
    position: fixed;
    /* M3: Snackbars –∑–∞–∑–≤–∏—á–∞–π –∑'—è–≤–ª—è—é—Ç—å—Å—è –∑–Ω–∏–∑—É –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø—ñ */
    bottom: 20px;
    left: 20px;
    top: auto;
    right: auto;
    z-index: 10000;
    display: flex;
    flex-direction: column-reverse; /* –ù–∞–π–Ω–æ–≤—ñ—à—ñ –∑–≤–µ—Ä—Ö—É */
    gap: 10px;
}

.toast {
    padding: 14px 16px;
    /* M3: –†–∞–¥—ñ—É—Å Snackbar (4px) */
    border-radius: 4px;
    /* M3 Elevation Level 3 */
    box-shadow: 0px 8px 12px 6px rgba(0, 0, 0, 0.15), 0px 4px 4px 0px rgba(0, 0, 0, 0.30);

    /* M3: –§–æ–Ω –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º (Inverse Surface) —Ç–∞ —Ç–µ–∫—Å—Ç (Inverse On Surface) */
    background-color: var(--md-sys-color-inverse-surface, #313033);
    color: var(--md-sys-color-inverse-on-surface, #F4EFF4);

    opacity: 0;
    transform: translateY(100%); /* –ê–Ω—ñ–º–∞—Ü—ñ—è –∑–Ω–∏–∑—É –≤–≥–æ—Ä—É */
    transition: opacity 0.4s ease, transform 0.4s ease;
    min-width: 288px;
    max-width: 600px;
    /* M3: –¢–∏–ø–æ–≥—Ä–∞—Ñ—ñ–∫–∞ - Body Medium */
    font-size: 14px;
}

.toast--visible {
    opacity: 1;
    transform: translateY(0);
}

/* –í–∞—Ä—ñ–∞—Ü—ñ—ó —Å—Ç–∞—Ç—É—Å—ñ–≤ */
.toast--success {
    /* –ó–∞–ª–∏—à–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π Inverse Surface –¥–ª—è —É—Å–ø—ñ—Ö—É */
    background-color: var(--md-sys-color-inverse-surface, #313033);
}

.toast--error {
    /* M3: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Error Container –¥–ª—è –∫—Ä–∞—â–æ—ó –≤–∏–¥–∏–º–æ—Å—Ç—ñ —Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –ø–æ–º–∏–ª–æ–∫ */
    background-color: var(--md-sys-color-error-container, #F9DEDC);
    color: var(--md-sys-color-on-error-container, #410E0B);
}

.toast--info {
    background-color: var(--md-sys-color-inverse-surface, #313033);
}
/* styles/components/_tooltip.css */

.custom-tooltip {
    position: fixed; /* –ü–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ—Å–Ω–æ –≤—ñ–∫–Ω–∞, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø—Ä–æ–±–ª–µ–º –∑ overflow */
    padding: 6px 12px;
    max-width: 500px;
    font-size: 13px;
    
    /* M3: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∏–ª—ñ "Inverse Surface" —è–∫ —É —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è—Ö */
    background-color: var(--color-inverse-surface);
    color: var(--color-inverse-on-surface);

    border-radius: var(--radius-s);
    box-shadow: var(--shadow-2);
    
    z-index: 9999;
    pointer-events: none; /* –ü—ñ–¥–∫–∞–∑–∫–∞ –Ω–µ –ø–æ–≤–∏–Ω–Ω–∞ –∑–∞–≤–∞–∂–∞—Ç–∏ –∫—É—Ä—Å–æ—Ä—É */
    
    /* –ê–Ω—ñ–º–∞—Ü—ñ—è –ø–æ—è–≤–∏ */
    opacity: 0;
    transform: scale(0.9);
    transition: opacity 150ms ease-out, transform 150ms ease-out;
}

.custom-tooltip.visible {
    opacity: 1;
    transform: scale(1);
}
/* styles/components/buttons/_btn-edit.css (M3 Update - Connected Button Style) */

/* –ó–∞–≥–∞–ª—å–Ω–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –≤—Å—ñ—Ö –≤–∞—Ä—ñ–∞—Ü—ñ–π –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è */
.btn-edit,
[class*="btn-edit-"] {
  /* 1. –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Å—Ç–∏–ª—ñ */
  appearance: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  padding: 0;
  margin: 0;
  border: none;

  /* 2. –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏ (—ñ–¥–µ–Ω—Ç–∏—á–Ω–æ –¥–æ checkbox, 24x24px) */
  width: 24px;
  height: 24px;
  box-sizing: border-box;

  position: relative;
  cursor: pointer;

  /* –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ü–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è —ñ–∫–æ–Ω–∫–∏ */
  display: flex;
  justify-content: center;
  align-items: center;

  /* 3. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Å—Ç–∞–Ω */
  /* M3: Secondary Container */
  /* –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –∑–∞–æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è (4px) */
  border-radius: 4px;
  border: 1px solid var(--color-secondary-c);

  /* –ê–Ω—ñ–º–∞—Ü—ñ—è –º–æ—Ä—Ñ—ñ–Ω–≥—É —Ñ–æ—Ä–º–∏ —Ç–∞ –∫–æ–ª—å–æ—Ä—É */
  transition: background-color 0.2s ease, border-radius 0.2s ease;
}

/* –°—Ç–∏–ª—ñ –¥–ª—è —ñ–∫–æ–Ω–æ–∫ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –∫–Ω–æ–ø–∫–∏ (SVG) */
.btn-edit svg,
[class*="btn-edit-"] svg {
    /* –†–æ–∑–º—ñ—Ä —ñ–∫–æ–Ω–∫–∏ 18px –¥–ª—è 24px –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å—É */
    width: 18px;
    height: 18px;
    /* M3: On Secondary Container */
    fill: var(--color-on-secondary-c);
    transition: fill 0.2s ease;
}


/* 4. –ê–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–∞–Ω (.active) —Ç–∞ —Å—Ç–∞–Ω –Ω–∞–≤–µ–¥–µ–Ω–Ω—è (Hover) - –ú–æ—Ä—Ñ—ñ–Ω–≥ —Ñ–æ—Ä–º–∏ */
.btn-edit.active,
.btn-edit:hover,
[class*="btn-edit-"].active,
[class*="btn-edit-"]:hover {
  /* M3: Secondary (–¢–µ–º–Ω—ñ—à–∏–π —Ñ–æ–Ω) */
  background-color: var(--color-secondary);
  color: var(--color-on-secondary);
  border-radius: 24px;
}

/* –ó–º—ñ–Ω–∞ –∫–æ–ª—å–æ—Ä—É —ñ–∫–æ–Ω–∫–∏ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó/–Ω–∞–≤–µ–¥–µ–Ω–Ω—ñ */
.btn-edit.active svg,
.btn-edit:hover svg,
[class*="btn-edit-"].active svg,
[class*="btn-edit-"]:hover svg {
    /* M3: On Secondary (–°–≤—ñ—Ç–ª–∏–π –∫–æ–ª—ñ—Ä) */
    fill: var(--color-on-secondary);
}

/* 5. –°—Ç–∞–Ω —Ñ–æ–∫—É—Å—É (–¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ) */
.btn-edit:focus-visible,
[class*="btn-edit-"]:focus-visible {
    outline: 2px solid var(--color-main);
    outline-offset: 2px;
}
/* styles/components/buttons/_btn-secondary.css (M3 Update - Filled Tonal Button) */

.btn-secondary {
    /* –°–∫–∏–¥–∞–Ω–Ω—è –±–∞–∑–æ–≤–∏—Ö —Å—Ç–∏–ª—ñ–≤ */
    border: none;
    cursor: pointer;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    text-decoration: none;

    /* M3: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –≤–∏—Å–æ—Ç–∞ 40px */
    height: 40px;
    /* M3: –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ñ –≤—ñ–¥—Å—Ç—É–ø–∏ 24px */
    padding: 0 var(--space-l);
    /* M3: –ü–æ–≤–Ω–µ –∑–∞–æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è (Pill shape) */
    border-radius: var(--radius-full);

    /* M3: –¢–∏–ø–æ–≥—Ä–∞—Ñ—ñ–∫–∞ - Label Large */
    font-size: 14px;
    font-weight: 500;

    /* M3: –§–æ–Ω - Secondary Container */
    background-color: var(--color-secondary-c);
    /* M3: –¢–µ–∫—Å—Ç - On Secondary Container */
    color: var(--color-on-secondary-c);

    position: relative;
    overflow: hidden; /* –î–ª—è State Layer */
    transition: box-shadow 0.2s ease;
}

/* --- M3 State Layers (–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ::before) --- */
.btn-secondary::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    /* –ö–æ–ª—ñ—Ä State Layer: —Ç–∞–∫–∏–π —Å–∞–º–∏–π, —è–∫ –∫–æ–ª—ñ—Ä —Ç–µ–∫—Å—Ç—É */
    background-color: var(--color-on-secondary-c);
    opacity: 0;
    transition: opacity 0.2s ease;
}

/* –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å, —â–æ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞–¥ State Layer */
.btn-secondary span, .btn-secondary svg {
    position: relative;
    z-index: 1;
}

/* –°—Ç–∞–Ω –Ω–∞–≤–µ–¥–µ–Ω–Ω—è (Hover) - 8% opacity + Elevation 1 */
.btn-secondary:hover {
    box-shadow: var(--shadow-1);
}

.btn-secondary:hover::before {
    opacity: 0.08;
}

/* –°—Ç–∞–Ω —Ñ–æ–∫—É—Å—É (Focus) - 12% opacity */
.btn-secondary:focus-visible {
    outline: none;
}

.btn-secondary:focus-visible::before {
    opacity: 0.12;
}

/* –°—Ç–∞–Ω –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è (Pressed) - 12% opacity */
.btn-secondary:active {
    box-shadow: none;
}

.btn-secondary:active::before {
    opacity: 0.12;
}

/* –°—Ç–∞–Ω –≤–∏–º–∫–Ω–µ–Ω–æ (Disabled) */
button.btn-secondary:disabled {
    cursor: not-allowed;
    box-shadow: none;
    /* M3: –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π —Ñ–æ–Ω (12% On Surface). color-mix –∞–¥–∞–ø—Ç—É—î—Ç—å—Å—è –¥–æ —Ç–µ–º–∏. */
    background-color: color-mix(in srgb, transparent, var(--color-on-surface) 12%);
    /* M3: –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π —Ç–µ–∫—Å—Ç (38% On Surface) */
    color: color-mix(in srgb, transparent, var(--color-on-surface) 38%);
    opacity: 1; /* –ö–µ—Ä—É—î–º–æ –∫–æ–ª—å–æ—Ä–∞–º–∏, –∞ –Ω–µ –∑–∞–≥–∞–ª—å–Ω–æ—é –ø—Ä–æ–∑–æ—Ä—ñ—Å—Ç—é */
}
button.btn-secondary:disabled::before {
    opacity: 0; /* –ü—Ä–∏–±–∏—Ä–∞—î–º–æ State Layer */
}
  /* –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä */
  .connected-button-group-square,
  .connected-button-group-round
   {
    /* Auto layout */
    display: flex;
    flex-direction: row;
    align-items: center;
    padding: 0px;
    gap: 2px; /* –í—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏, –∑–≥—ñ–¥–Ω–æ —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó */

    position: relative;
    height: 32px; /* –í–∏—Å–æ—Ç–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–∞ –≤–∏—Å–æ—Ç–æ—é —Å–µ–≥–º–µ–Ω—Ç—ñ–≤ */
  }

  /* Segment (–ó–∞–≥–∞–ª—å–Ω—ñ —Å—Ç–∏–ª—ñ –¥–ª—è –≤—Å—ñ—Ö –∫–Ω–æ–ø–æ–∫) */
  .segment {
    /* Auto layout */
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;

    /* min-width: 48px; */
    height: 32px;

    /* Inside auto layout */
    flex-grow: 1;
    transition: background-color 0.2s ease, border-radius 0.2s ease;
  }

  /* State-layer (–®–∞—Ä –¥–ª—è –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É —Ç–∞ –≤—ñ–¥—Å—Ç—É–ø—ñ–≤) */
  .state-layer {
    /* Auto layout */
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    padding: 6px 12px;
    gap: 4px;
    isolation: isolate;

    height: 32px;
    align-self: stretch;
  }

  /* Label (–°—Ç–∏–ª—ñ —Ç–µ–∫—Å—Ç—É) */
  .label {
    /* M3/label/large */
    font-style: normal;
    font-weight: 500;
    font-size: 14px;
    line-height: 20px;
    letter-spacing: 0.1px;
    white-space: nowrap;
    transition: color 0.2s ease;
  }

  /* --- –°—Ç–∞–Ω–∏ —Å–µ–≥–º–µ–Ω—Ç—ñ–≤ —Ç–∞ –º–æ—Ä—Ñ—ñ–Ω–≥ —Ñ–æ—Ä–º–∏ --- */

  /* –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π (–Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π) —Å—Ç–∞–Ω */
  .segment {
    /* M3/sys/light/secondary-container */
    background: var(--color-secondary-c);
    /* –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –∑–∞–æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è –¥–ª—è —Å–µ—Ä–µ–¥–Ω—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ */
    border-radius: 4px;
  }

  .segment .label {
    /* M3/sys/light/on-secondary-container */
    color: var(--color-on-secondary-c);
  }

  /* –°–ø–µ—Ü—ñ–∞–ª—å–Ω–µ –∑–∞–æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ */
  /* Specificity (0, 2, 0) */
.connected-button-group-round .segment:first-child {
    border-radius: 16px 4px 4px 16px;
}

/* –°–ø–µ—Ü—ñ–∞–ª—å–Ω–µ –∑–∞–æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è –¥–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –¢–Ü–õ–¨–ö–ò –≤ –≥—Ä—É–ø—ñ .connected-button-group-round */
.connected-button-group-round .segment:last-child {
    /* –ó–≥—ñ–¥–Ω–æ —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: 4px 16px 16px 4px */
    border-radius: 4px 16px 16px 4px;
}

  /* –ê–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–∞–Ω —Ç–∞ —Å—Ç–∞–Ω –Ω–∞–≤–µ–¥–µ–Ω–Ω—è (Hover) */
  /* Specificity (0, 2, 0). –û—Å–∫—ñ–ª—å–∫–∏ —Ü—ñ –ø—Ä–∞–≤–∏–ª–∞ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ –ü–Ü–°–õ–Ø –ø–æ–∑–∏—Ü—ñ–π–Ω–∏—Ö –ø—Ä–∞–≤–∏–ª,
     –≤–æ–Ω–∏ –º–∞—Ç–∏–º—É—Ç—å –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –ø—Ä–∏ –∑–±—ñ–≥—É —Å–µ–ª–µ–∫—Ç–æ—Ä—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—ó –ø–µ—Ä—à–æ—ó –∫–Ω–æ–ø–∫–∏)
     —ñ –∑–∞—Å—Ç–æ—Å—É—é—Ç—å –ø–æ–≤–Ω–µ –∑–∞–æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è (–º–æ—Ä—Ñ—ñ–Ω–≥). */
  .segment.active,
  .segment:hover {
    /* M3/sys/light/secondary */
    background: var(--color-secondary);
    /* –ü–æ–≤–Ω–µ –∑–∞–æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó/–Ω–∞–≤–µ–¥–µ–Ω–Ω—ñ */
    border-radius: 24px;
  }

  .segment.active .label,
  .segment:hover .label {
    /* M3/sys/light/on-secondary */
    color: var(--color-on-secondary);
  }
/* styles/components/buttons/_toolbar.css (M3 Update) */

  /* --- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç XR/XR Toolbar (–°—Ö–æ–∂–∏–π –Ω–∞ M3 Bottom App Bar) --- */

  /* XR/XR Toolbar (–û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä) */
  .xr-toolbar {
    display: flex;
    flex-direction: row;
    align-items: center;
    padding: 0px;
    gap: var(--space-xs); /* –í—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ Toolbar —Ç–∞ FAB */

    position: relative;
    /* –í–∏—Å–æ—Ç–∞ 56px —è–∫ –∑–∞–∑–Ω–∞—á–µ–Ω–æ —É —Ñ–∞–π–ª—ñ */
    height: 56px;
  }

  /* Toolbar (–í–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —ñ–∫–æ–Ω–æ–∫) */
  .toolbar {
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    /* Padding 4px –¥–ª—è —Ü–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è 48px –∫–Ω–æ–ø–æ–∫ —É 56px –≤–∏—Å–æ—Ç—ñ */
    padding: 8px;
    gap: 4px; /* –í—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ –∫–Ω–æ–ø–∫–∞–º–∏ */

    height: 56px;

    /* M3: Surface Container */
    background: var(--color-surface-c);
    /* –ü–æ–≤–Ω–µ –∑–∞–æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è –¥–ª—è —Å—Ç–∏–ª—é "–ø—ñ–≥—É–ª–∫–∏" */
    border-radius: var(--radius-full);

    flex: none;
    order: 0;
    flex-grow: 0;
  }

  /* Slot (M3 Standard Icon Button) */
  .toolbar-button {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 0px;

    /* –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ä–æ–∑–º—ñ—Ä M3 Icon Button (Touch Target) */
    width: 48px;
    height: 48px;
    flex: none;
    flex-grow: 0;
  }

  /* Content (–®–∞—Ä –¥–ª—è —Ñ–æ–Ω—É —Ç–∞ —Å—Ç–∞–Ω—É) */
  .toolbar-button .content {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 0px;

    /* –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π —Ä–æ–∑–º—ñ—Ä (–í—ñ–∑—É–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä) */
    width: 40px;
    height: 40px;
    border-radius: var(--radius-full);
    transition: background-color 0.2s ease;
  }

  /* State-layer (–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —Ü–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è —ñ–∫–æ–Ω–∫–∏) */
  .toolbar-button .state-layer {
    display: flex;
    justify-content: center;
    align-items: center;
    /* –¶–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è 24px —ñ–∫–æ–Ω–∫–∏ –≤ 40px –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ */
    padding: 8px;
    isolation: isolate;
    width: 40px;
    height: 40px;
  }

  /* Icon */
  .icon {
    width: 24px;
    height: 24px;
    transition: fill 0.2s ease;
  }

  /* –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π (–Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π) —Å—Ç–∞–Ω */
  .toolbar-button .icon {
    /* M3: On Surface Variant */
    fill: var(--color-on-surface-v);
  }

   /* –°—Ç–∞–Ω –Ω–∞–≤–µ–¥–µ–Ω–Ω—è (Hover) - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ State Layer (8%) */
  .toolbar-button:not(.active) .content:hover {
    /* 8% On Surface Variant overlay (–∫–æ–ª—ñ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç—É). color-mix –∞–¥–∞–ø—Ç—É—î—Ç—å—Å—è –¥–æ —Ç–µ–º–∏. */
    background-color: color-mix(in srgb, transparent, var(--color-on-surface-v) 8%);
  }

  /* –ê–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–∞–Ω (M3 Filled Tonal Icon Button style) */
  .toolbar-button.active .content {
    /* M3: Secondary Container */
    background: var(--color-secondary-c);
  }

  /* Hover –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–º—É —Å—Ç–∞–Ω—ñ */
  .toolbar-button.active .content:hover {
     /* 8% On Secondary Container overlay –ø–æ–≤–µ—Ä—Ö —Ñ–æ–Ω—É Secondary Container */
    background-color: color-mix(in srgb, var(--color-secondary-c), var(--color-on-secondary-c) 8%);
  }

  .toolbar-button.active .icon {
    /* M3: On Secondary Container */
    fill: var(--color-on-secondary-c);
  }

  /* –ü—Ä–∏—Ö–æ–≤–∞–Ω—ñ —Å–ª–æ—Ç–∏ */
  .toolbar-button.hidden {
      display: none;
  }

  /* FAB (Floating Action Button) - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Accent (Tertiary) –∫–æ–ª—ñ—Ä */
  /* –†–æ–∑–º—ñ—Ä Small FAB (40px) —è–∫ –∑–∞–∑–Ω–∞—á–µ–Ω–æ —É —Ñ–∞–π–ª—ñ */
  .fab {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 0px;

    width: auto;
    height: 40px;

    /* M3: Tertiary Container (Accent) */
    background: var(--color-accent-c);
    /* M3: –†–∞–¥—ñ—É—Å –¥–ª—è Small FAB (12px) */
    border-radius: var(--radius-m);
    /* M3: Elevation Level 3 */
    transition: box-shadow 0.2s ease;

    flex: none;
    order: 1;
    flex-grow: 0;
    position: relative;
    overflow: hidden; /* –î–ª—è State Layer */
  }

  /* State-layer FAB (–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —Ü–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è —ñ–∫–æ–Ω–∫–∏) */
  .fab .state-layer {
    display: flex;
    justify-content: center;
    align-items: center;
    /* –¶–µ–Ω—Ç—Ä—É—î 24px —ñ–∫–æ–Ω–∫—É –≤ 40px –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ */
    padding: 8px;
    isolation: isolate;

    height: 40px;
  }

  /* –Ü–∫–æ–Ω–∫–∞ FAB */
  .fab .icon {
    /* M3: On Tertiary Container (Accent) */
    fill: var(--color-on-accent-c);
    position: relative;
    z-index: 1;
  }

  /* FAB State Layer (::before) */
  .fab::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    /* –ö–æ–ª—ñ—Ä —à–∞—Ä—É —Ç–∞–∫–∏–π —Å–∞–º–∏–π —è–∫ –∫–æ–ª—ñ—Ä —Ç–µ–∫—Å—Ç—É (On Accent C) */
    background-color: var(--color-on-accent-c);
    opacity: 0;
    transition: opacity 0.2s ease;
  }

  /* FAB Hover State (Elevation 4 + State Layer 8%) */
  .fab:hover {
      /* Elevation 4 */
      box-shadow: 0px 6px 10px 4px rgba(0, 0, 0, 0.15), 0px 2px 3px 0px rgba(0, 0, 0, 0.30);
  }

  .fab:hover::before {
       opacity: 0.08;
  }
/* styles/components/lines/_checkbox.css (M3 Update - Connected Button Style) */

input[type="checkbox"] {
    /* 1. –ü–æ–≤–Ω—ñ—Å—Ç—é –ø—Ä–∏–±–∏—Ä–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –≤–∏–≥–ª—è–¥ */
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    margin: 0;
    padding: 0;
    border: none;

    /* 2. –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏ (24x24px, —è–∫ –∑–∞–∑–Ω–∞—á–µ–Ω–æ —É –≤–∞—à–æ–º—É —Ñ–∞–π–ª—ñ) */
    width: 24px;
    height: 24px;
    box-sizing: border-box;

    /* –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Å—Ç–∏–ª—ñ */
    display: inline-flex;
    align-items: center;
    justify-content: center;
    vertical-align: middle;
    position: relative;
    cursor: pointer;

    /* 3. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π (–Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π/unchecked) —Å—Ç–∞–Ω */
    /* M3: Secondary Container */
    border: 1px solid var(--color-secondary-c);
    /* –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –∑–∞–æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è (4px) */
    border-radius: 4px;

    /* –ê–Ω—ñ–º–∞—Ü—ñ—è –º–æ—Ä—Ñ—ñ–Ω–≥—É —Ñ–æ—Ä–º–∏ —Ç–∞ –∫–æ–ª—å–æ—Ä—É */
    transition: background-color 0.2s ease, border-radius 0.2s ease, background-image 0.2s ease;
}

/* 4. –°—Ç–∞–Ω –Ω–∞–≤–µ–¥–µ–Ω–Ω—è (Hover) —Ç–∞ –ê–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–∞–Ω (Checked) - –ú–æ—Ä—Ñ—ñ–Ω–≥ —Ñ–æ—Ä–º–∏ */

input[type="checkbox"]:checked {
    /* M3: Secondary (–¢–µ–º–Ω—ñ—à–∏–π —Ñ–æ–Ω). */
    background-color: var(--color-secondary);
    /* –ü–æ–≤–Ω–µ –∑–∞–æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó/–Ω–∞–≤–µ–¥–µ–Ω–Ω—ñ */
    border-radius: 24px;
}

input[type="checkbox"]:hover {
    background-color: var(--color-secondary-c);
    border-radius: 24px;
}

/* 5. –Ü–∫–æ–Ω–∫–∞ "–≥–∞–ª–æ—á–∫–∞" (—Ç—ñ–ª—å–∫–∏ –¥–ª—è —Å—Ç–∞–Ω—É Checked) */
input[type="checkbox"]:checked {
    /* –î–æ–¥–∞—î–º–æ "–≥–∞–ª–æ—á–∫—É". –ö–æ–ª—ñ—Ä: M3 On Secondary (–ë—ñ–ª–∏–π –¥–ª—è —Å–≤—ñ—Ç–ª–æ—ó —Ç–µ–º–∏). */
    /* –†–æ–∑–º—ñ—Ä —ñ–∫–æ–Ω–∫–∏ 18px –¥–ª—è 24px –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å—É */
     background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' width='18' height='18'%3e%3cpath fill='%23FFFFFF' d='M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z'/%3e%3c/svg%3e");
    background-size: 18px;
    background-position: center;
    background-repeat: no-repeat;
}

/* 6. –°—Ç–∞–Ω —Ñ–æ–∫—É—Å—É (–¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ) */
input[type="checkbox"]:focus-visible {
    /* –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Primary –∫–æ–ª—ñ—Ä –¥–ª—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Ñ–æ–∫—É—Å—É */
    outline: 2px solid var(--color-main);
    outline-offset: 2px;
}
/* styles/components/lines/_search.css (M3 Update) */

/* Main search bar container */
.search-bar {
    display: flex;
    position: relative;
    width: 360px;
    max-width: 720px;
    height: 56px; /* Standard M3 height */
    /* M3: Background color for Search Bar is Surface Container */
    background: var(--color-surface-c);
    /* M3: Full border radius */
    border-radius: var(--radius-full);
}

/* State-layer for alignment and padding */
.search-bar .state-layer {
    display: flex;
    flex-direction: row;
    align-items: center;
    width: 100%;
    height: 100%;
    /* Padding adjusted for standard M3 layout (icons are 48x48 targets) */
    padding: 0 4px;
    box-sizing: border-box;
}

/* Hidden leading icon */
.leading-icon {
    display: none;
}

/* Content area that holds the input field */
.content {
    flex-grow: 1;
    height: 100%;
    display: flex;
    align-items: center;
    padding: 0 12px;
}

/* Styling for the search input field */
.search-input {
    width: 100%;
    height: 24px;
    border: none;
    background: transparent;
    outline: none;

    /* Font styles (M3 Body Large) */
    font-family: 'Roboto', sans-serif;
    font-style: normal;
    font-weight: 400;
    font-size: 16px;
    line-height: 24px;
    letter-spacing: 0.5px;
    /* M3: Input text color is On Surface */
    color: var(--color-on-surface);
}

/* Styling for the input's placeholder text */
.search-input::placeholder {
    /* M3: Placeholder text color is On Surface Variant */
    color: var(--color-on-surface-v);
    opacity: 1;
}

/* Container for trailing elements */
.trailing-elements {
    display: flex;
    justify-content: flex-end;
    align-items: center;

    /* –í–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ state-layer */
    height: 48px;
    margin-left: auto;
}

/* Styling for the search icon button (M3 Icon Button) */
.trailing-icon {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 48px;
    height: 48px;

    background: none;
    border: none;
    padding: 0;
    cursor: pointer;
    border-radius: var(--radius-full);
    color: var(--color-on-surface-v);
    transition: background-color 0.2s ease;
}

/* M3 State Layer visualization on hover */
.trailing-icon:hover {
    /* 8% On Surface Variant overlay (color-mix –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∞–¥–∞–ø—Ç—É—î—Ç—å—Å—è –¥–æ —Ç–µ–º–∏) */
    background-color: color-mix(in srgb, transparent, var(--color-on-surface-v) 8%);
}
