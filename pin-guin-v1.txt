<!DOCTYPE html>
<html>

<head>

    <title>Допоміжний сайт</title>

    <link rel="shortcut icon" href="LOGO/dy_Dark_Pinguin.png">

    <link rel="stylesheet" type="text/css" href="styles.css">

    <link rel="stylesheet"
        href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20,300,0,-25" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link
        href="https://fonts.googleapis.com/css2?family=Roboto+Flex:opsz@8..144&family=Roboto+Mono&family=Yanone+Kaffeesatz&display=swap"
        rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js"></script>
    <link rel="manifest" href="/manifest.json">
    <script>
        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.register('/service-worker.js');
        }
    </script>

    <style></style>

</head>

<body>

    <nav>
        <div class="nav-btn-container">
            <!--КНОПКА-->
            <div class="dropdown-btn">
                <a class="big-linl-btn" href="#table">
                    <div>
                        <span class="material-symbols-outlined">table_rows</span>
                        <span class="nav-btn-name">Склад</span>
                    </div>
                </a>
                <!--<a class="lil-linl-btn" href="/1.html"><span class="material-symbols-outlined">open_in_new</span></a>-->
                <div class="nav-back-label"></div>
            </div>

            <!--КНОПКА-->
            <div class="dropdown-btn">
                <a class="big-linl-btn" href="#text">
                    <div>
                        <span class="material-symbols-outlined">edit_note</span>
                        <span class="nav-btn-name">Текст</span>
                    </div>
                </a>
                <a class="lil-linl-btn" href="p_text.html"> <span class="material-symbols-outlined">open_in_new</span>
                </a>
                <div class="nav-back-label"></div>
            </div>

            <!--КНОПКА-->
            <div class="dropdown-btn">
                <a class="big-linl-btn" href="#seo">
                    <div>
                        <span class="material-symbols-outlined">language</span>
                        <span class="nav-btn-name">SEO</span>
                    </div>
                </a>
                <!--<a class="lil-linl-btn" href="/1.html"><span class="material-symbols-outlined">open_in_new</span></a>-->
                <div class="nav-back-label"></div>
            </div>

            <!--КНОПКА-->
            <div class="dropdown-btn">
                <a class="big-linl-btn" href="#trans">
                    <div>
                        <span class="material-symbols-outlined">translate</span>
                        <span class="nav-btn-name">Переклад</span>
                    </div>
                </a>
                <a class="lil-linl-btn" target="_blank" href="https://semi-shop.com.ua/5tLKV0FnOo.php?all"><span
                        class="material-symbols-outlined">open_in_new</span></a>
                <div class="nav-back-label"></div>
            </div>

            <!--КНОПКА-->
            <div class="dropdown-btn">
                <a class="big-linl-btn" href="#links">
                    <div>
                        <span class="material-symbols-outlined">task_alt</span>
                        <span class="nav-btn-name">Офіційні сайти</span>
                    </div>
                </a>
                <!--<a class="lil-linl-btn" href="/1.html"><span class="material-symbols-outlined">open_in_new</span></a>-->
                <div class="nav-back-label"></div>
            </div>

            <div class="line"></div>

            <!--КНОПКА-->
            <div class="dropdown-btn">
                <a class="big-linl-btn" href="/shablon-hrafic/index.html">
                    <div>
                        <span class="material-symbols-outlined">print</span>
                        <span class="nav-btn-name">Графік</span>
                    </div>
                </a>
                <!--<a class="lil-linl-btn"><span class="material-symbols-outlined">open_in_new</span></a>-->
                <div class="nav-back-label"></div>
            </div>

            <!--КНОПКА-->
            <div class="dropdown-btn">
                <a class="big-linl-btn" href="p_glossary.html">
                    <div>
                        <span class="material-symbols-outlined">import_contacts</span>
                        <span class="nav-btn-name">Глосарій</span>
                    </div>
                </a>
                <!--<a class="lil-linl-btn"><span class="material-symbols-outlined">open_in_new</span></a>-->
                <div class="nav-back-label"></div>
            </div>

            <!--КНОПКА-->
            <div class="dropdown-btn">
                <a class="big-linl-btn" href="#inform">
                    <div>
                        <span class="material-symbols-outlined">info</span>
                        <span class="nav-btn-name">Додаткова інформація</span>
                    </div>
                </a>
                <!--<a class="lil-linl-btn"><span class="material-symbols-outlined">open_in_new</span></a>-->
                <div class="nav-back-label"></div>
            </div>

            <!--КНОПКА-->
            <div class="dropdown-btn">
                <a class="big-linl-btn" target="_blank"
                    href="https://docs.google.com/spreadsheets/d/1JFICWpsPnZWOS1HcdUYEP-FLUFw1gf8aDEd47aFcEeo/edit?gid=1217844155#gid=1217844155/">
                    <div>
                        <span class="material-symbols-outlined">account_tree</span>
                        <span class="nav-btn-name">База данних</span>
                    </div>
                </a>
                <!--<span class="material-symbols-outlined">open_in_new</span>-->
                <div class="nav-back-label"></div>
            </div>

            <!--КНОПКА-->
            <div class="dropdown-btn">
                <a class="big-linl-btn" target="_blank"
                    href="https://docs.google.com/spreadsheets/d/1kDpQ6FoSsEsA7dc36MKYA97j6lTmLZ_de11o83CZGXU/edit?gid=0#gid=0/">
                    <div>
                        <span class="material-symbols-outlined">account_tree</span>
                        <span class="nav-btn-name">База брендів</span>
                    </div>
                </a>
                <!--<span class="material-symbols-outlined">open_in_new</span>-->
                <div class="nav-back-label"></div>
            </div>


        </div>

        <div class="nav-btn-container">



            <!--КНОПКА-->
            <div class="dropdown-btn">
                <a class="big-linl-btn" target="_blank" href="https://testpinguin.netlify.app/">
                    <div>
                        <span class="material-symbols-outlined">stairs_2</span>
                        <span class="nav-btn-name">Tестовий сайт</span>
                    </div>
                </a>
                <!--<span class="material-symbols-outlined">open_in_new</span>-->
                <div class="nav-back-label"></div>
            </div>
        </div>
    </nav>

    <main>
        <div id="table" class="block-1">
            <div class="block-2">
                <h1>Таблиці</h1><!--назва блок-->
                <h2>Генерація складу і вмісту елементів на 1 порцію</h2><!--назва блок-->
            </div>
            <div class="block"> <!--блок-->
                <div class="flex-5"><!--перший блок-->
                    <div>
                        <div id="inputs-container" class="white-box">
                            <div id="rows-container">
                            </div>
                        </div>
                    </div>

                </div>

                <div class="flex-2"><!--другий блок-->
                    <div class="stiky">
                        <div class="mode-toggle-container white-box">
                            <div class="mode-toggle-options">
                                <input type="radio" id="modeBasic1" name="modeToggle1" value="basic" checked>
                                <label for="modeBasic1" class="mode-toggle-label">Основне</label>

                                <input type="radio" id="modeMagic1" name="modeToggle1" value="magic">
                                <label for="modeMagic1" class="mode-toggle-label">Магія</label>
                            </div>
                            <!--перший блок-->
                            <div class="mode-toggle-content" data-for="basic">
                                <div class="table-btns-container">
                                    <span class="context-span">Додати</span>
                                    <div class="tbc-second">
                                        <button id="add-input" class="secondary-btn">Новий</button>
                                        <button id="add-ampty-line" class="secondary-btn">Порожній</button>
                                    </div>
                                </div>

                                <div class="line"></div>

                                <button id="tables-btn" class="importatn-btn">Створити таблиці</button>

                                <div class="code-text-container">
                                    <span class="seed-span">Склад</span>
                                    <textarea class="result-output" id="table-html" readonly></textarea>
                                </div>

                                <div class="code-text-container">
                                    <span class="seed-span">1 порція</span>
                                    <textarea class="result-output" id="table-html-br" readonly></textarea>
                                </div>

                                <div class="line"></div>

                                <div class="table-btns-container">
                                    <div class="tbc-second">
                                        <button id="ingredients" class="pill-btn">Інгредієнти</button>
                                        <button id="warning-text" class="pill-btn">Попередження</button>
                                        <button id="different_product_composition" class="pill-btn">Різний
                                            склад</button>
                                    </div>
                                </div>

                                <div class="line"></div>

                                <div class="table-btns-container">
                                    <div class="tbc-second">
                                        <button id="add-nutrition-facts-sample" class="pill-btn">Nutrition
                                            Facts</button>
                                        <button id="add-vitamins-sample" class="pill-btn">Додати вітаміни</button>
                                        <button id="add-amino-acids-sample" class="pill-btn">Додати
                                            амінокислоти</button>
                                    </div>
                                </div>

                            </div>
                            <!--другий блок-->
                            <div class="mode-toggle-content" data-for="magic" style="display: none;">
                                <textarea id="magic-text" class="code-text"></textarea>
                                <button id="magic-button" class="importatn-btn">Зробити магію </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>




        </div>

        <div id="text" class="block-1">
            <div class="block-2">
                <h1>Текст</h1><!--назва блок-->
                <h2>Формування і очищення коду тексту</h2><!--назва блок-->
            </div>
            <div class="block"> <!--блок-->
                <div class="flex-5"><!--перший блок-->
                    <div class="text-box white-box">
                        <div>

                            <div id="text-btns" class="stiky">
                                <button class="option-btn-sm" id="boldBtn"> <span
                                        class="material-symbols-outlined">format_bold</span> </button>
                                <button class="option-btn-sm" id="lowercaseBtn"> <span
                                        class="material-symbols-outlined">text_rotate_vertical</span></button>
                                <button class="option-btn-sm" id="h1Btn"> <span
                                        class="material-symbols-outlined">format_h1</span></button>
                                <button class="option-btn-sm" id="h2Btn"> <span
                                        class="material-symbols-outlined">format_h2</span></button>
                                <button class="option-btn-sm" id="h3Btn"> <span
                                        class="material-symbols-outlined">format_h3</span></button>
                            </div>
                        </div>

                        <textarea id="input-text-markup" class="text"></textarea>

                    </div>
                </div>


                <div class="flex-2"><!--другий блок-->
                    <div class="stiky">
                        <div class="mode-toggle-container white-box">
                            <div class="mode-toggle-options">
                                <input type="radio" id="modeBasic2" name="modeToggle2" value="basic" checked>
                                <label for="modeBasic2" class="mode-toggle-label">Основне</label>

                                <a class="mode-toggle-label" target="_blank"
                                    href="https://chatgpt.com/g/g-wTxhkdE8O-opis-tekstu">Написати</a>
                            </div>
                            <!--перший блок-->
                            <div class="mode-toggle-content" data-for="basic">

                                <div class="table-btns-container">
                                    <span class="context-span">Очистка</span>
                                    <div class="tbc-second">
                                        <button class="secondary-btn" id="clean-btn"> Стилі</button>
                                        <button class="secondary-btn" id="clean-btn-tag"> Теги</button>
                                        <button class="secondary-btn" id="brization-button"> br/ізація</button>
                                    </div>
                                </div>

                                <div class="line"></div>

                                <button class="importatn-btn" id="process-btn">Автоматична розмітка</button>

                                <textarea class="code-text" id="result" style="height: 68px;" readonly></textarea>
                                <button class="lil-btn" id="clean-text-markup"><span
                                        class="material-symbols-outlined">close</span></button>

                            </div>

                            <!--другий блок-->

                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div id="seo" class="block-1">
            <div class="block-2">
                <h1>SEO</h1><!--назва блок-->
                <h2>Генерація SEo Titel Keywords і Discription на основі введеного тексту</h2><!--назва блок-->
            </div>
            <div class="block"> <!--блок-->
                <div class="flex-1"><!--перший блок-->
                    <div class="white-box">
                        <div class="line-container">
                            <input id="brand-name" class="text-line" placeholder="Назва бренду:" value=""
                                autocomplete="off">
                            <div id="country-name"></div>
                        </div>
                        <div class="line-container">
                            <input id="product-name" class="text-line" placeholder="Назва товару:" value=""
                                autocomplete="off">
                        </div>
                        <div class="line-container">
                            <input id="product-packaging" class="text-line" placeholder="Фасування товару:" value=""
                                autocomplete="off">
                        </div>
                    </div>

                </div>

                <div class="flex-4"><!--середній блок-->
                    <div class="white-box">
                        <div class="line-container">
                            <span class="context-span">Title:</span>
                            <input class="text-line" id="seo-title" readonly="">
                            <span class="counter" id="seo-title-counter"></span>
                        </div>

                        <div class="line-container">
                            <span class="context-span">Keywords: </span>
                            <input class="text-line" id="seo-keywords" readonly="">
                            <span class="counter" id="seo-keywords-counter"></span>
                        </div>

                        <div class="line-container">
                            <span class="context-span">Description: </span>
                            <input class="text-line" id="seo-description" readonly="">
                            <span class="counter" id="seo-description-counter"></span>
                        </div>
                    </div>

                    <div class="tooltip-box">
                        <div id="trigger-titles-container"></div>
                        <div id="common-warning"></div>
                    </div>
                </div>

                <div class="flex-2"><!--другий блок-->


                    <div class="mode-toggle-container white-box">
                        <div class="mode-toggle-options">
                            <input type="radio" id="modeBasic3" name="modeToggle3" value="basic" checked="">
                            <label for="modeBasic3" class="mode-toggle-label">Пошук</label>


                            <a class="mode-toggle-label" target="_blank"
                                href="https://docs.google.com/spreadsheets/d/1JFICWpsPnZWOS1HcdUYEP-FLUFw1gf8aDEd47aFcEeo/edit?gid=1217844155#gid=1217844155">Створення</a>
                        </div>

                        <!--перший блок-->
                        <div class="mode-toggle-content" data-for="basic" style="display: flex;">
                            <div class="line-container">
                                <span class="material-symbols-outlined">search</span>
                                <input id="search-triger" class="text-line" placeholder=" Пошут виробника..."
                                    autocomplete="off">
                            </div>
                            <div class="flex-wrap-container" id="triger-buttons-container" style="height: 150px;">
                            </div>
                        </div>

                        <!--другий блок-->

                    </div>


                </div>


            </div>
        </div>

        <div id="trans" class="block-1">
            <div class="block-2">
                <h1>Переклад</h1><!--назва блок-->
                <h2>Перевірка наявності перекладу на сайті і можливих проблем з ним</h2><!--назва блок-->
            </div>
            <div class="block"> <!--блок-->
                <div class="flex-1 white-box"><!--перший блок-->
                    <iframe style="border: none; height: 560px; background-color: transparent; width: var(--wfa);"
                        src="https://semi-shop.com.ua/5tLKV0FnOo.php?all"></iframe>
                </div>
            </div>


            <div id="links" class="block-1">
                <div class="block-2">
                    <h1>Офіційні сайти</h1><!--назва блок-->
                    <h2>Посилання на офіційні сайти</h2>
                </div>
                <div class="block">
                    <div class="flex-1 white-box"><!--перший блок-->
                        <div class="line-container">
                            <span class="material-symbols-outlined">search</span>
                            <input id="search-link" class="text-line" placeholder=" Пошут виробника..."
                                autocomplete="off">
                            <div id="country-name-2" style="white-space: nowrap;"></div>
                        </div>

                        <div id="buttons-container">
                            <!--<button class="of-link-btn"><a href="https://www.californiagoldnutrition.com/" target="_blank">CaliforniaGold Nutrition</a></button>           -->
                        </div>
                    </div>

                </div>
            </div>


            <div id="inform" class="block-1">
                <div class="block-2">
                    <h1>Додаткова інформація</h1><!--назва блок-->
                    <h2>Різні інформаційні блоки</h2>
                </div>
                <div class="block">

                    <div class="flex-1"><!--1 блок-->
                        <div class="white-box">
                            <div class="context-span" style="margin-bottom: 8px;">Значення характеристик</div>
                            <div class="line"></div>
                            <div style="display: flex; flex-direction: column; gap: 8px;">

                                <div class="box-container">
                                    <span class="">List </span>
                                    <span class="context-span">список з <span style="color: var(--splash);">декількох</span> значень</span>
                                </div>
                                <div class="box-container">
                                    <span class="">List Values</span>
                                    <span class="context-span">вибір <span style="color: var(--splash);">декількох</span> значень зі списку</span>
                                </div>
                                <div class="box-container">
                                    <span class="">ComboBox </span>
                                    <span class="context-span">вибір зі списку. Можна вказати <span style="color: var(--splash);">лише 1 значення</span></span>
                                </div>
                                <div class="box-container">
                                    <span class="">Checkbox </span>
                                    <span class="context-span">(галочка) значення в прайс-листі: так / ні; є /
                                        немає</span>
                                </div>
                                <div class="box-container">
                                    <span class="">CheckBoxGroup </span>
                                    <span class="context-span">вибір <span style="color: var(--splash);">декількох</span> значень з набору</span>
                                </div>
                                <div class="box-container">
                                    <span class="">CheckBoxGroupValues </span>
                                    <span class="context-span">вибір <span style="color: var(--splash);">декількох</span> значень з набору</span>
                                </div>
                                <div class="box-container">
                                    <span class="">Integer </span>
                                    <span class="context-span">ціле число</span>
                                </div>
                                <div class="box-container">
                                    <span class="">Decimal </span>
                                    <span class="context-span">десяткове число</span>
                                </div>
                                <div class="box-container">
                                    <span class="">TexInput </span>
                                    <span class="context-span">текстове поле</span>
                                </div>
                                <div class="box-container">
                                    <span class="">TextArea </span>
                                    <span class="context-span">текстовий блок</span>
                                </div>

                            </div>
                        </div>
                    </div>

                <!--<div class="flex-1">
                        <div class="white-box">
                            <div class="table-btns-container">
                                <span class="context-span">Проблеми Etalon</span>
                                <div class="tbc-second">
                                    <button class="secondary-btn">
                                        <a href="https://etalon.sport-atlet.ua/adminer/?server=localhost&username=mykyta&db=etalon&select=translate&columns%5B0%5D%5Bfun%5D=&columns%5B0%5D%5Bcol%5D=parent&columns%5B1%5D%5Bfun%5D=&columns%5B1%5D%5Bcol%5D=&where%5B0%5D%5Bcol%5D=&where%5B0%5D%5Bop%5D=LIKE+%25%25&where%5B0%5D%5Bval%5D=%D0%A1%D0%BA%D0%BB%D0%B0%D0%B4+%D0%BC%D0%BE+%D0%B6%D0%B5%D1%82+%D1%82%D1%80%D0%BE%D1%85%D0%B8+%D0%B2%D1%96%D0%B4%D1%80%D1%96%D0%B7%D0%BD%D1%8F%D1%82%D0%B8%D1%81%D1%8F+%D0%B7%D0%B0%D0%BB%D0%B5%D0%B6%D0%BD%D0%BE+%D0%B2%D1%96%D0%B4+%D1%81%D0%BC%D0%B0%D0%BA%D1%83&where%5B1%5D%5Bcol%5D=field&where%5B1%5D%5Bop%5D=IN&where%5B1%5D%5Bval%5D=7%2C8&where%5B2%5D%5Bcol%5D=table&where%5B2%5D%5Bop%5D=%3D&where%5B2%5D%5Bval%5D=2&where%5B4%5D%5Bcol%5D=&where%5B4%5D%5Bop%5D=%3D&where%5B4%5D%5Bval%5D=&order%5B0%5D=&limit=100&text_length=100"
                                            target="_blank">
                                            Вирізна фраза Складів
                                        </a>
                                    </button>

                                    <div class="tbc-second">
                                        <button class="secondary-btn">
                                            <a href="https://etalon.sport-atlet.ua/p/run/h=table&amp;a%5Bname%5D=propertyList&amp;a%5Baction%5D=view&amp;a%5Bfilter%5D%5Bparent%5D=13&amp;a%5Bsort%5D%5BfakeFieldName%5D=ASC"
                                                target="_blank">
                                                Смаки
                                            </a>
                                        </button>
                                        <button class="secondary-btn">
                                            <a href="https://etalon.sport-atlet.ua/p/run/h=table&amp;a%5Bname%5D=article&amp;a%5Bconfig%5D=article-item-sm"
                                                target="_blank" style="color: var(--main-45);">
                                                Unic SM
                                            </a>
                                        </button>
                                        <button class="secondary-btn">
                                            <a href="https://etalon.sport-atlet.ua/p/run/h=table&amp;a%5Bname%5D=article&amp;a%5Bconfig%5D=article-item-fs"
                                                target="_blank" style="color: var(--main-45);">
                                                Unic FS
                                            </a>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>-->

                    <div class="flex-1"><!--1 блок-->
                        <div class="white-box">
                            <div class="context-span" style="margin-bottom: 8px;">Незамінні амінокислоти</div>
                            <div class="line"></div>
                            <div style="display: flex; flex-direction: column; gap: 8px;">
                                <span class="line-container">Валін</span>
                                <span class="line-container">Ізолейцин</span>
                                <span class="line-container">Лейцин</span>
                                <span class="line-container">Лізин</span>
                                <span class="line-container">Метіонін</span>
                                <span class="line-container">Треонін</span>
                                <span class="line-container">Триптофан</span>
                                <span class="line-container">Фенілаланін</span>
                            </div>
                        </div>
                    </div>

                    <div class="flex-1"><!--2 блок-->
                        <div class="white-box">
                            <div class="context-span" style="margin-bottom: 8px;">Форми випуску</div>
                            <div class="line"></div>
                            <div style="display: flex; flex-direction: column; gap: 8px;">

                                <div class="line-container">
                                    <span class="context-span">Capsules</span>
                                    <span class="tbc-second tend">Капсули</span>
                                </div>
                                <div class="line-container">
                                    <span class="context-span">Softgel</span>
                                    <span class="tbc-second tend">Капсули</span>
                                </div>
                                <div class="line-container">
                                    <span class="context-span">Tablets</span>
                                    <span class="tbc-second tend">Таблетки</span>
                                </div>
                                <div class="line-container">
                                    <span class="context-span">Caplets</span>
                                    <span class="tbc-second tend">Каплети</span>
                                </div>
                                <div class="line-container">
                                    <span class="context-span">Chewables</span>
                                    <span class="tbc-second tend">Жувальні таблетки</span>
                                </div>
                                <div class="line-container">
                                    <span class="context-span">Effervescent</span>
                                    <span class="tbc-second tend">Шипучі таблетки</span>
                                </div>
                                <div class="line-container">
                                    <span class="context-span">Gummies</span>
                                    <span class="tbc-second tend">Желейки</span>
                                </div>
                                <div class="line-container">
                                    <span class="context-span">Lozenges</span>
                                    <span class="tbc-second tend">Пастилки</span>
                                </div>
                                <div class="line-container">
                                    <span class="context-span">Pastilles</span>
                                    <span class="tbc-second tend">Пастилки</span>
                                </div>
                                <div class="line-container">
                                    <span class="context-span">Wafer</span>
                                    <span class="tbc-second tend">Пастилки</span>
                                </div>

                            </div>
                        </div>
                    </div>

                    <div class="flex-1"><!--3 блок-->
                        <div class="white-box" style="margin-bottom: 12px;">
                            <div class="context-span" style="margin-bottom: 8px;">Макроси</div>
                            <div class="line"></div>
                            <div class="line-container">
                                <span class="context-span" for="macroType" style=" min-width: 80px;">Тип
                                    макросу:</span>
                                <select class="tbc-second" id="macroType">
                                    <option value="a">a</option>
                                    <option value="link">link</option>
                                </select>
                            </div>
                            <div class="line-container">
                                <span class="context-span" for="macroType">Таблиця:</span>
                                <select class="tbc-second" id="tableType">
                                    <option value="article">article</option>
                                    <option value="brand">brand</option>
                                    <option value="category">category</option>
                                    <option value="optionSEO">optionSEO</option>
                                </select>
                            </div>
                            <div class="line-container">
                                <span class="context-span" for="macroID">ID:</span>
                                <input class="tbc tend text-line" type="text" id="macroID"
                                    style="padding-right: 36px;color: var(--splash);">
                            </div>
                            <div class="line-container">
                                <span class="context-span" for="macroText">Текст:</span>
                                <input class="tbc tend text-line" type="text" id="macroText"
                                    style="padding-right: 36px;color: var(--splash);">
                            </div>

                            <div class="line"></div>

                            <button class="importatn-btn" id="generateMacroBtn">Згенерувати Макрос</button>

                            <div class="code-text-container">
                                <span class="seed-span" for="output" style="top: 7px;">Результат</span>
                                <input class="result-output text-line" type="text" id="output" readonly=""
                                    style="padding: 4px; text-indent: 52px;">
                            </div>

                            <div class="line"></div>

                            <div class="table-btns-container">
                                <div class="tbc-second">
                                    <button class="pill-btn copy">article</button>
                                    <button class="pill-btn copy">category</button>
                                    <button class="pill-btn copy">brand</button>
                                    <button class="pill-btn copy">optionSEO</button>
                                </div>
                            </div>
                        </div>

                        <div class="white-box">
                            <div class="table-btns-container">
                                <span class="context-span">Проблеми Etalon</span>
                                <div class="tbc-second">
                                    <button class="secondary-btn">
                                        <a href="https://etalon.sport-atlet.ua/adminer/?server=localhost&username=mykyta&db=etalon&select=translate&columns%5B0%5D%5Bfun%5D=&columns%5B0%5D%5Bcol%5D=parent&columns%5B1%5D%5Bfun%5D=&columns%5B1%5D%5Bcol%5D=&where%5B0%5D%5Bcol%5D=&where%5B0%5D%5Bop%5D=LIKE+%25%25&where%5B0%5D%5Bval%5D=%D0%A1%D0%BA%D0%BB%D0%B0%D0%B4+%D0%BC%D0%BE+%D0%B6%D0%B5%D1%82+%D1%82%D1%80%D0%BE%D1%85%D0%B8+%D0%B2%D1%96%D0%B4%D1%80%D1%96%D0%B7%D0%BD%D1%8F%D1%82%D0%B8%D1%81%D1%8F+%D0%B7%D0%B0%D0%BB%D0%B5%D0%B6%D0%BD%D0%BE+%D0%B2%D1%96%D0%B4+%D1%81%D0%BC%D0%B0%D0%BA%D1%83&where%5B1%5D%5Bcol%5D=field&where%5B1%5D%5Bop%5D=IN&where%5B1%5D%5Bval%5D=7%2C8&where%5B2%5D%5Bcol%5D=table&where%5B2%5D%5Bop%5D=%3D&where%5B2%5D%5Bval%5D=2&where%5B4%5D%5Bcol%5D=&where%5B4%5D%5Bop%5D=%3D&where%5B4%5D%5Bval%5D=&order%5B0%5D=&limit=100&text_length=100"
                                            target="_blank">
                                            Вирізна фраза Складів
                                        </a>
                                    </button>

                                    <div class="tbc-second">
                                        <button class="secondary-btn">
                                            <a href="https://etalon.sport-atlet.ua/p/run/h=table&amp;a%5Bname%5D=propertyList&amp;a%5Baction%5D=view&amp;a%5Bfilter%5D%5Bparent%5D=13&amp;a%5Bsort%5D%5BfakeFieldName%5D=ASC"
                                                target="_blank">
                                                Смаки
                                            </a>
                                        </button>
                                        <button class="secondary-btn">
                                            <a href="https://etalon.sport-atlet.ua/p/run/h=table&amp;a%5Bname%5D=article&amp;a%5Bconfig%5D=article-item-sm"
                                                target="_blank" style="color: var(--main-45);">
                                                Unic SM
                                            </a>
                                        </button>
                                        <button class="secondary-btn">
                                            <a href="https://etalon.sport-atlet.ua/p/run/h=table&amp;a%5Bname%5D=article&amp;a%5Bconfig%5D=article-item-fs"
                                                target="_blank" style="color: var(--main-45);">
                                                Unic FS
                                            </a>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>



                </div>
            </div>




    </main>

    <script src="script_spoiler.js"></script> <!--спойлери-->
    <script src="script_switcher.js"></script> <!--свічер-->
    <script src="script_modal.js"></script> <!--модальні вікна-->

    <script src="script_table_move.js"></script> <!--Рухати рядки-->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.10.2/Sortable.min.js"></script>

    <script src="script_table_code_generator.js"></script> <!--Генерація таблиці-->

    <script src="script_text.js"></script> <!--текст-->
    <script src="script_text_makros.js"></script> <!--створення макросів-->

    <script src="script_SEO_new.js"></script> <!--SEO-->
    <script src="script_SEO_triger_generator.js"></script> <!--генерація тригерів-->

    <script src="script_copy_inpoot_text.js"></script> <!--Копіювання по кліку-->

    <script src="script_links.js"></script> <!--Посилання-->

    <script src="script_bannedt.js"></script> <!--Заборони-->

</body>

</html>
<!DOCTYPE html>
<html>

<head>

    <title>Глосарій</title>

    <link rel="shortcut icon" href="LOGO/dy_Dark_Pinguin.png">

    <link rel="stylesheet" type="text/css" href="styles.css">
    
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20,300,0,-25" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto+Flex:opsz@8..144&family=Roboto+Mono&family=Yanone+Kaffeesatz&display=swap" rel="stylesheet">


    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js"></script>

    <style></style>
    <style>

        
    </style>

</head>

<body>

    <div class="glos-tree">
        <div class="nav-btn-container">
            <!--КНОПКА-->
            <div class="dropdown-btn"  style="width: max-content; padding-right: 32px;">
                <a class="big-linl-btn" href="index.html">
                    <div>
                        <span class="material-symbols-outlined">arrow_back</span>
                        <span class="nav-btn-name">Назад</span>
                    </div>
                </a>
                 <!--<a class="lil-linl-btn" href="/1.html"><span class="material-symbols-outlined">open_in_new</span></a>-->
                <div class="nav-back-label"></div>
            </div>
        </div>
        
        <div class="nav-btn-container">
            <div class="line-container">
                <span class="material-symbols-outlined">search</span>
                <input id="search-glos" class="text-line" placeholder=" Пошут..." autocomplete="off">
            </div>
        </div>

        <div class="nav-btn-container" id="glossary-list" style="overflow-y: scroll;height: 100%;">
            
        </div>
        <div class="nav-btn-container" id="glossary-controls">

        <div id="custom-tooltip" class="custom-tooltip"></div>
        </div>
    </div>



    <div class="glos-page">
        <div class="glos-main" id="glos-main"></div>
    </div>

    <script src="script_spoiler.js"></script> <!--спойлери-->
    <script src="script_switcher.js"></script> <!--свічер-->
    <script src="script_modal.js"></script> <!--модальні вікна-->
    <script src="script_copy_inpoot_text.js"></script> <!--Копіювання по кліку-->

    <script src="script_glossary_csv.js"></script> <!--перетворює CSV з Google Drive в HTML-->
    <script src="script_glossary_menu_generator.js"></script><!--перетворює CSV з Google Drive в Список навігацію-->
    <script src="script_glossary_search.js"></script> <!--пошук-->
    
    <script src="script_glossary_toggle.js" defer></script> <!--відкриття закриття списку-->
   

</body>

</html>
<!DOCTYPE html>
<html>

<head>

    <title>Допоміжний сайт</title>

    <link rel="shortcut icon" href="LOGO/dy_Dark_Pinguin.png">

    <link rel="stylesheet" type="text/css" href="styles.css">

    <link rel="stylesheet"
        href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20,300,0,-25" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link
        href="https://fonts.googleapis.com/css2?family=Roboto+Flex:opsz@8..144&family=Roboto+Mono&family=Yanone+Kaffeesatz&display=swap"
        rel="stylesheet">

    <style></style>

</head>

<body>

    <nav>
        <div class="nav-btn-container">
            <!--КНОПКА-->
            <div class="dropdown-btn">
                <a class="big-linl-btn" href="index.html#table">
                    <div>
                        <span class="material-symbols-outlined">table_rows</span>
                        <span class="nav-btn-name">Склад</span>
                    </div>
                </a>
                <!--<a class="lil-linl-btn" href="/1.html"><span class="material-symbols-outlined">open_in_new</span></a>-->
                <div class="nav-back-label"></div>
            </div>

            <!--КНОПКА-->
            <div class="dropdown-btn" style="background-color: var(--splash-15);">
                <a class="big-linl-btn" href="#text">
                    <div style="color: var(--splash);">
                        <span class="material-symbols-outlined">edit_note</span>
                        <span class="nav-btn-name">Текст</span>
                    </div>
                </a>
                <!--<a class="lil-linl-btn" href="p_text.html"> <span class="material-symbols-outlined">open_in_new</span>-->
                </a>
                <div class="nav-back-label"></div>
            </div>

            <!--КНОПКА-->
            <div class="dropdown-btn">
                <a class="big-linl-btn" href="index.html#seo">
                    <div>
                        <span class="material-symbols-outlined">language</span>
                        <span class="nav-btn-name">SEO</span>
                    </div>
                </a>
                <!--<a class="lil-linl-btn" href="/1.html"><span class="material-symbols-outlined">open_in_new</span></a>-->
                <div class="nav-back-label"></div>
            </div>

            <!--КНОПКА-->
            <div class="dropdown-btn">
                <a class="big-linl-btn" href="index.html#trans">
                    <div>
                        <span class="material-symbols-outlined">translate</span>
                        <span class="nav-btn-name">Переклад</span>
                    </div>
                </a>
                <a class="lil-linl-btn" target="_blank" href="https://fitness-shop.ua/5tLKV0FnOo.php?all"><span
                        class="material-symbols-outlined">open_in_new</span></a>
                <div class="nav-back-label"></div>
            </div>

            <!--КНОПКА-->
            <div class="dropdown-btn">
                <a class="big-linl-btn" href="index.html#links">
                    <div>
                        <span class="material-symbols-outlined">task_alt</span>
                        <span class="nav-btn-name">Офіційні сайти</span>
                    </div>
                </a>
                <!--<a class="lil-linl-btn" href="/1.html"><span class="material-symbols-outlined">open_in_new</span></a>-->
                <div class="nav-back-label"></div>
            </div>

            <div class="line"></div>

            <!--КНОПКА-->
            <div class="dropdown-btn">
                <a class="big-linl-btn" href="p_glossary.html">
                    <div>
                        <span class="material-symbols-outlined">import_contacts</span>
                        <span class="nav-btn-name">Глосарій</span>
                    </div>
                </a>
                <!--<a class="lil-linl-btn"><span class="material-symbols-outlined">open_in_new</span></a>-->
                <div class="nav-back-label"></div>
            </div>

            <!--КНОПКА-->
            <div class="dropdown-btn">
                <a class="big-linl-btn" href="#inform">
                    <div>
                        <span class="material-symbols-outlined">info</span>
                        <span class="nav-btn-name">Додаткова інформація</span>
                    </div>
                </a>
                <!--<a class="lil-linl-btn"><span class="material-symbols-outlined">open_in_new</span></a>-->
                <div class="nav-back-label"></div>
            </div>

        </div>

        <div class="nav-btn-container">
            <!--КНОПКА-->
            <div class="dropdown-btn">
                <a class="big-linl-btn" target="_blank" href="https://testpinguin.netlify.app/">
                    <div>
                        <span class="material-symbols-outlined">stairs_2</span>
                        <span class="nav-btn-name">Tестовий сайт</span>
                    </div>
                </a>
                <!--<span class="material-symbols-outlined">open_in_new</span>-->
                <div class="nav-back-label"></div>
            </div>
        </div>
    </nav>

    <main>
        <div id="text" class="block-1">
            <div class="block-2">
                
            </div>
            <div class="block"> <!--блок-->
                <div class="flex-5"><!--перший блок-->
                    <div class="text-box white-box">
                        <div>

                            <div id="text-btns" class="stiky">
                                <button class="option-btn-sm" id="boldBtn"> <span
                                        class="material-symbols-outlined">format_bold</span> </button>
                                <button class="option-btn-sm" id="lowercaseBtn"> <span
                                        class="material-symbols-outlined">text_rotate_vertical</span></button>
                                <button class="option-btn-sm" id="h1Btn"> <span
                                        class="material-symbols-outlined">format_h1</span></button>
                                <button class="option-btn-sm" id="h2Btn"> <span
                                        class="material-symbols-outlined">format_h2</span></button>
                                <button class="option-btn-sm" id="h3Btn"> <span
                                        class="material-symbols-outlined">format_h3</span></button>
                            </div>
                        </div>

                        <textarea id="input-text-markup" class="text"></textarea>

                    </div>
                </div>


                <div class="flex-2"><!--другий блок-->
                    <div class="stiky">
                        <div class="mode-toggle-container white-box">
                            <div class="mode-toggle-options">
                                <input type="radio" id="modeBasic2" name="modeToggle2" value="basic" checked>
                                <label for="modeBasic2" class="mode-toggle-label">Основне</label>

                            </div>
                            <!--перший блок-->
                            <div class="mode-toggle-content" data-for="basic">

                                <div class="table-btns-container">
                                    <span class="context-span">Очистка</span>
                                    <div class="tbc-second">
                                        <button class="secondary-btn" id="clean-btn"> Стилі</button>
                                        <button class="secondary-btn" id="clean-btn-tag"> Теги</button>
                                        <button class="secondary-btn" id="brization-button"> br/ізація</button>
                                    </div>
                                </div>

                                <div class="line"></div>

                                <button class="importatn-btn" id="process-btn">Автоматична розмітка</button>

                                <textarea class="code-text" id="result" style="height: 68px;" readonly></textarea>
                                <button class="lil-btn" id="clean-text-markup"><span class="material-symbols-outlined">close</span></button>

                            </div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div id="inform" class="block-1">
            <div class="block-2">
                <h1>Додаткова інформація</h1><!--назва блок-->
                <h2>Різні інформаційні блоки</h2>
            </div>
            <div class="block"> <!--блок-->
                <div class="flex-1"><!--1 блок-->
                    <div class="white-box">
                        <div class="context-span" style="margin-bottom: 8px;">Створення макросів посилань</div>
                        <div class="line"></div>
                        <div>
                            <div>
                                <div class="line-container">
                                    <span class="context-span" for="macroType" style=" min-width: 80px;">Тип макросу:</span>
                                    <select class="tbc-second" id="macroType">
                                        <option value="a">a</option>
                                        <option value="link">link</option>
                                    </select>
                                </div>
                                <div class="line-container">
                                    <span class="context-span" for="macroType">Таблиця:</span>
                                    <select class="tbc-second" id="tableType">
                                        <option value="article">article</option>
                                        <option value="brand">brand</option>
                                        <option value="category">category</option>
                                        <option value="optionSEO">optionSEO</option>
                                    </select>
                                </div>
                                <div class="line-container">
                                    <span class="context-span" for="macroID">ID:</span>
                                    <input class="tbc tend text-line" type="text" id="macroID" style="padding-right: 36px;color: var(--splash);">
                                </div>
                                <div class="line-container">
                                    <span class="context-span" for="macroText">Текст:</span>
                                    <input class="tbc tend text-line" type="text" id="macroText" style="padding-right: 36px;color: var(--splash);">
                                </div>

                                <div class="line"></div>

                                <button class="importatn-btn" id="generateMacroBtn">Згенерувати Макрос</button>

                                <div class="code-text-container">
                                    <span class="seed-span" for="output" style="top: 7px;">Результат</span>
                                    <input class="result-output text-line" type="text" id="output" readonly="" style="padding: 4px; text-indent: 52px;">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="flex-1"><!--2 блок-->
                    <div class="white-box">
                        <div class="context-span" style="margin-bottom: 8px;">Типи макросів для посилань</div>
                        <div class="line"></div>
                        <div class="table-btns-container">
                            <div class="tbc-second">
                                <button class="pill-btn copy">article</button>
                                <button class="pill-btn copy">category</button>
                                <button class="pill-btn copy">brand</button>
                                <button class="pill-btn copy">optionSEO</button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="flex-1"><!--3 блок-->
                    <div class="white-box">
                        <div class="context-span" style="margin-bottom: 8px;">Тригернві слова які видаляють абзац</div>
                        <div class="line"></div>
                        <div class="table-btns-container">
                            <div>                   
                                <div class="line-container">
                                    <span class="context-span">купити/купить</span>
                                </div>
                                <div class="line-container">
                                    <span class="context-span">замов/заказ</span>
                                </div>
                                <div class="line-container">
                                    <span class="context-span">оформити/оформить</span>
                                </div>
                                <div class="line-container">
                                    <span class="context-span">телефонуйте/звоните</span>
                                </div>
                                <div class="line-container">
                                    <span class="context-span">придбати/приобрести</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="flex-1"><!--4 блок-->
                    <div class="white-box">
                        <div class="context-span" style="margin-bottom: 8px;">блок 4</div>
                        <div class="line"></div>
                        <div style="display: flex; flex-direction: column; gap: 8px;">

                        </div>
                    </div>
                </div>

                <div class="flex-1"><!--5 блок-->
                    <div class="white-box">
                        <div class="context-span" style="margin-bottom: 8px;">блок 5</div>
                        <div class="line"></div>
                        <div style="display: flex; flex-direction: column; gap: 8px;">

                        </div>
                    </div>
                </div>
            </div>
        </div>


    </main>

    <script src="script_spoiler.js"></script> <!--спойлери-->
    <script src="script_switcher.js"></script> <!--свічер-->
    <script src="script_modal.js"></script> <!--модальні вікна-->

    <script src="script_table_move.js"></script> <!--Рухати рядки-->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.10.2/Sortable.min.js"></script>

    <script src="script_table_code_generator.js"></script> <!--Генерація таблиці-->

    <script src="script_text.js"></script> <!--текст-->
    <script src="script_text_makros.js"></script> <!--створення макросів-->

    <script src="script_SEO_new.js"></script> <!--SEO-->
    <script src="script_SEO_triger_generator.js"></script> <!--генерація тригерів-->

    <script src="script_copy_inpoot_text.js"></script> <!--Копіювання по кліку-->

    <script src="script_links.js"></script> <!--Посилання-->

</body>

</html>
function autoTag(text) {
  const lines = text.split('\n');
  let result = '';
  let isList = false;
  let isParagraph = false;

  for (let i = 0; i < lines.length; i++) {
    const line = lines[i].trim();

    if (line.length === 0) {
      if (isList) {
        result += '</ul>';
        isList = false;
      }
      if (isParagraph) {
        result += '</p>';
        isParagraph = false;
      }
      continue;
    }

    if (line.endsWith(':')) {
      if (isList) {
        result += '</ul>';
        isList = false;
      }
      if (isParagraph) {
        result += '</p>';
        isParagraph = false;
      }
      result += `<h3>${line}</h3>`;
      continue;
    }

    if (i < lines.length - 1 && lines[i + 1].trim().length > 0) {
      if (!isList) {
        result += '<ul>';
        isList = true;
      }
      result += `<li>${line}</li>`;
    } else {
      if (isList) {
        result += `<li>${line}</li></ul>`;
        isList = false;
      } else {
        if (isParagraph && !line.startsWith('<h1') && !line.startsWith('<h2') && !line.startsWith('<h3')) {
          result += `${line}</p>`;
          isParagraph = false;
        } else {
          if (!line.startsWith('<h1') && !line.startsWith('<h2') && !line.startsWith('<h3')) {
            result += `<p>${line}`;
            isParagraph = true;
          } else {
            result += `${line}`;
          }
        }
      }
    }
  }

  if (isList) {
    result += '</ul>';
  }
  if (isParagraph) {
    result += '</p>';
  }

  return result;
}

function showCopyStatus(visible) {
  const copyStatus = document.getElementById('copy-status');
  copyStatus.style.display = visible ? 'inline' : 'none';
}


function makeTextBold() {
  const selectedText = inputText.value.substring(inputText.selectionStart, inputText.selectionEnd);
  const boldText = `<strong>${selectedText}</strong>`;
  const newText = inputText.value.substring(0, inputText.selectionStart) + boldText + inputText.value.substring(inputText.selectionEnd);
  inputText.value = newText;
}

function makeTextH1() {
  const selectedText = inputText.value.substring(inputText.selectionStart, inputText.selectionEnd);
  const h1Text = `<h1>${selectedText}</h1>`;
  const newText = inputText.value.substring(0, inputText.selectionStart) + h1Text + inputText.value.substring(inputText.selectionEnd);
  inputText.value = newText;
}

function makeTextH2() {
  const selectedText = inputText.value.substring(inputText.selectionStart, inputText.selectionEnd);
  const h1Text = `<h2>${selectedText}</h2>`;
  const newText = inputText.value.substring(0, inputText.selectionStart) + h1Text + inputText.value.substring(inputText.selectionEnd);
  inputText.value = newText;
}

function makeTextH3() {
  const selectedText = inputText.value.substring(inputText.selectionStart, inputText.selectionEnd);
  const h1Text = `<h3>${selectedText}</h3>`;
  const newText = inputText.value.substring(0, inputText.selectionStart) + h1Text + inputText.value.substring(inputText.selectionEnd);
  inputText.value = newText;
}


function makeTextLowercase() {
  const selectedText = inputText.value.substring(inputText.selectionStart, inputText.selectionEnd);
  const lowercaseText = selectedText.toLowerCase();
  const newText = inputText.value.substring(0, inputText.selectionStart) + lowercaseText + inputText.value.substring(inputText.selectionEnd);
  inputText.value = newText;
}

const form = document.getElementById('markup-form');
const inputText = document.getElementById('input-text-markup');
const result = document.getElementById('result');
const boldBtn = document.getElementById('boldBtn');
const h1Btn = document.getElementById('h1Btn');
const h2Btn = document.getElementById('h2Btn');
const h3Btn = document.getElementById('h3Btn');
const processBtn = document.getElementById('process-btn');
const lowercaseBtn = document.getElementById('lowercaseBtn');
lowercaseBtn.addEventListener('click', makeTextLowercase);
h1Btn.addEventListener('click', makeTextH1);
h2Btn.addEventListener('click', makeTextH2);
h3Btn.addEventListener('click', makeTextH3);

processBtn.addEventListener('click', async (e) => {
  e.preventDefault();
  const text = inputText.value;
  let markedText = autoTag(text);
  markedText = markedText
    .replace(/<\/strong><strong>/g, '')
    .replace(/<\/strong> <strong>/g, '')
    .replace(/<p><p>/g, '<p>')
    .replace(/<\/p><\/p>/g, '<\/p>')
    .replace(/<p><\/p>/g, '')
    .replace(/<\/p>/g, '<\/p>\n\n')
    .replace(/<h3><h3>/g, '<h3>')
    .replace(/<\/h3><\/h3>/g, '<\/h3>')
    .replace(/<\/li>/g, '<\/li>\n')
    .replace(/<ul>/g, '<ul>\n')
    .replace(/<ol>/g, '<ol>\n')
    .replace(/<\/ul>/g, '<\/ul>\n\n')
    .replace(/<\/ol>/g, '<\/ol>\n\n')
    .replace(/<\/h3>/g, '<\/h3>\n\n')
    .replace(/<\/h2>/g, '<\/h2>\n\n')
    .replace(/<\/h1>/g, '<\/h1>\n\n');
  result.value = markedText;

  // Copy to clipboard
  result.select();
  document.execCommand('copy');

  result.focus();
  result.setSelectionRange(0, result.value.length);
});



boldBtn.addEventListener('click', makeTextBold);

 const inputTextarea = document.getElementById('input-text-markup');
    const codeTextarea = document.querySelector('text-code');

    inputTextarea.addEventListener('input', function() {
      const text = inputTextarea.value;
      const parsedText = parseTags(text);
      
      codeTextarea.value = parsedText;
    });


    
  

// очищення   
const needCleanText = document.getElementById('input-text-markup');
const cleningButton = document.getElementById('clean-btn');
const cleanOutputText = document.getElementById('result');

cleningButton.addEventListener('click', () => {
    let generatedCleanrText = needCleanText.value
        .replace(/<table(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '<table>')
        .replace(/<tbody(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '<tbody>')
        .replace(/<thead(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '<thead>')
        .replace(/<tr(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '<tr>')
        .replace(/<th(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '<th>')
        .replace(/<td(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '<td>')
        .replace(/<h1(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '<h1>')
        .replace(/<h2(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '<h2>')
        .replace(/<h3(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '<h3>')
        .replace(/<p(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '<p>')
        .replace(/<pre(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '<pre>')
        .replace(/<pre>/g, '<p>')
        .replace(/<\/pre>/g, '</p>')
        .replace(/<a\s+(?:[^>]*?\s+)?href=(["'])(.*?)\1[^>]*>(.*?)<\/a>/gi, '$3')
        .replace(/&nbsp;/gi, ' ')
        .replace(/<br>/gi, '</p><p>')
        .replace(/<br><br>/gi, '</p><p>')
        .replace(/<br\/>/gi, '</p><p>')
        .replace(/<br \/>/gi, '</p><p>')
        .replace(/<\/br>/gi, '</p><p>')
        .replace(/<br><br>/gi, '</p><p>')
        .replace(/<br\/><br\/>/gi, '</p><p>')
        .replace(/<br \/><br \/>/gi, '</p><p>')
        .replace(/<p>&nbsp;<\/p>/gi, '')
        .replace(/<p>\s*<\/p>/gi, '')
        .replace(/<p><\/p>/gi, '')
        .replace(/<\/p><p><\/p><p>/gi, '</p><p>')
        .replace(/<\/p><p> <\/p><p>/gi, '</p><p>')
        .replace(/<\/p><p>\s*<\/p><p>/gi, '<p>')
        .replace(/<h3>особливості:<\/h3>/gi, '<h3>Особливості:</h3>')
        .replace(/<h3>особливості:<\/h3>/gi, '<h3>Особливості:</h3>')
        .replace(/<img[^>]+>/gi, '')
        .replace(/• /gi, '')
        .replace(/· /gi, '')
        .replace(/● /gi, '')
        .replace(/<span\s+style="[^"]*">(.*?)<\/span>/gi, '$1')
        .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '')
        .replace(/<[\w\s="'-]+style="[^"]*"[^>]*>(.*?)<\/[\w\s="'-]+>/gi, '$1')      
        .replace(/\n/gi, '')
        .replace(//gi, '');

    cleanOutputText.value = generatedCleanrText;
    cleanOutputText.select();
    document.execCommand('copy');
});


//Повне очищення
const needCleanTagText = document.getElementById('input-text-markup');
const cleningagButton = document.getElementById('clean-btn-tag');
const cleanagOutputText = document.getElementById('result');
    
cleningagButton.addEventListener('click', () => {
    let generatedCleanrText = needCleanText.value
        .replace(/<table(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '')
        .replace(/<tbody(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '')
        .replace(/<thead(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '')
        .replace(/<tr(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '')
        .replace(/<th(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '')
        .replace(/<td(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '')
        .replace(/<\/table(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '\n\n')
        .replace(/<\/tbody(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '\n\n')
        .replace(/<\/thead(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '\n\n')
        .replace(/<\/tr(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '\n\n')
        .replace(/<\/th(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '\n\n')
        .replace(/<\/td(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '\n\n')
        .replace(/<h1(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '')
        .replace(/<\/h1(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '\n\n')
        .replace(/<h2(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '')
        .replace(/<\/h2(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '\n\n')
        .replace(/<h3(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '')
        .replace(/<\/h3(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '\n\n')
        .replace(/<u>/g, '')
        .replace(/<\/u>/g, '')
        .replace(/<\/strong>/g, '')
        .replace(/<em>/g, '')
        .replace(/<\/font>/g, '')
        .replace(/<font>/g, '')
        .replace(/<\/em>/g, '')
        .replace(/<hr>/g, '')
        .replace(/<\/hr>/g, '')
        .replace(/<hr\/>/g, '')
        .replace(/<\/ hr>/g, '')
        .replace(/<hr \/>/g, '')
        .replace(/<p(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '')
        .replace(/<\/p(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '\n\n')
        .replace(/<em(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '')
        .replace(/<\/em(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '')
        .replace(/<ul(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '')
        .replace(/<\/ul(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '')
        .replace(/<li(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '')
        .replace(/<\/li(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '\n\n')
        .replace(/<lo(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '')
        .replace(/<\/lo(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '\n\n')
        .replace(/<pre(\s+\w+\s*=\s*("|')[^"']*("|'))*\s*>/g, '')
        .replace(/<pre>/g, '')
        .replace(/<\/pre>/g, '')
        .replace(/<a\s+(?:[^>]*?\s+)?href=(["'])(.*?)\1[^>]*>(.*?)<\/a>/gi, '$3')
        .replace(/&nbsp;/gi, ' ')            
        .replace(/<br>/gi, '\n\n')
        .replace(/<br><br>/gi, '\n\n')
        .replace(/<b>/gi, '<strong>')
        .replace(/<\/b>/gi, '<\/strong>')
        .replace(/<br\/>/gi, '\n\n')
        .replace(/<br \/>/gi, '\n\n')
        .replace(/<\/br>/gi, '\n\n')
        .replace(/<br><br>/gi, '\n\n')
        .replace(/<br\/><br\/>/gi, '\n\n')
        .replace(/<br \/><br \/>/gi, '\n\n')
        .replace(/<p>&nbsp;<\/p>/gi, '\n\n')
        .replace(/<p>\s*<\/p>/gi, '\n\n')
        .replace(/<p><\/p>/gi, '\n\n')
        .replace(/<\/p><p><\/p><p>/gi, '\n\n')
        .replace(/<\/p><p> <\/p><p>/gi, '\n\n')
        .replace(/<\/p><p>\s*<\/p><p>/gi, '\n\n')
        .replace(/<h3>особливості:<\/h3>/gi, '<h3>Особливості:<\/h3>')
        .replace(/<h3>особливості:<\/h3>/gi, '<h3>Особливості:<\/h3>')
        .replace(/<img[^>]+>/gi, '')
        .replace(/<span[^>]*>/g, '')
        .replace(/<span\s+style="[^"]*">(.*?)/gi, '')
        .replace(/<span[^>]*>(.*?)/gs, '$1')
        .replace(/<\/span>/gi, '')
        .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '')
        .replace(/<[\w\s="'-]+style="[^"]*"[^>]*>.*?<\/[\w\s="'-]+>/gi, '')
        .replace(/<[^>]*style="[^"]*"[^>]*>/gi, '')
        .replace(/\n\n\n\n/gi, '\n')
        .replace(/\n\n\n/gi, '\n')
        .replace(//gi, '')
        .replace(/\n\n\n/gi, '\n');
        

        cleanagOutputText.value = generatedCleanrText;
        cleanagOutputText.select();
           document.execCommand('copy');
});



// бр ізація
const needBrizationText = document.getElementById('input-text-markup');
const brizationButton = document.getElementById('brization-button');
const brizationOutputText = document.getElementById('result');

brizationButton.addEventListener('click', () => {
  let generatedBrText = needBrizationText.value
    .replace(/<\/th><th>/g, "")
    .replace(/<\/th><th>/g, "")
    .replace(/<\/td><td>/g, "")
    .replace(/<\/td><td>/g, "")
    .replace(/<\/strong><strong>/g, "")
    .replace(/<strong><\/strong>/g, "")
    .replace(/<th><strong>/g, "")
    .replace(/<em>/g, "")
    .replace(/<\/em>/g, "")
    .replace(/<table>/g, "")
    .replace(/<thead>/g, "")
    .replace(/<\/thead>/g, "")
    .replace(/<tbody>/g, "")
    .replace(/<\/tbody>/g, "")
    .replace(/<td>/g, "")
    .replace(/<td colspan="2">/g, "")
    .replace(/<\/td>/g, "")
    .replace(/<tr>/g, "")
    .replace(/<\/strong>/g, "")
    .replace(/<strong>/g, "")
    .replace(/<\/strong>/g, "")

    
    .replace(/&nbsp;/g, "")
    .replace(/Харчова цінність/g, "")
    .replace(/Пищевая ценность/g, "")

    .replace(/<h2>/g, "<strong>")
    .replace(/<\/h2>/g, "<\/strong>")
    .replace(/<h2>/g, "<strong>")
    .replace(/<\/h2>/g, "<\/strong>")
    .replace(/<th>/g, "<strong>")
    .replace(/<th colspan="2">/g, "<strong>")
    .replace(/<\/th>/g, "<\/strong>")
    .replace(/<b>/g, "<strong>")
    .replace(/<\/b>/g, "<\/strong>")

    .replace(/<\/tr>/g, "<br/>")
    .replace(/<\/table>/g, "<br/>")

    .replace(/Состав может незначительно отличаться в зависимости от вкуса/g, "<strong>Состав может незначительно отличаться в зависимости от вкуса</strong>")
    .replace(/\n/g, " ")
    .replace(/\r/g, " ")
    .replace(/\t/g, " ")
    .replace(/ +/g, " ")
    .replace(/> </g, "><")
    .replace(/ </g, "<")
    .replace(/> /g, ">")
 
   generatedBrText = generatedBrText.trim().replace(/(<br\/>)+$/, "");
   brizationOutputText.value = generatedBrText;
   brizationOutputText.select();
  document.execCommand('copy');
});













// Знайти кнопку за ідентифікатором
var cleanButton = document.getElementById("clean-text-markup");

// Знайти поля вводу за ідентифікаторами
var inputField = document.getElementById("input-text-markup");
var outputField = document.getElementById("result");

// Додати обробник події "click" до кнопки
cleanButton.addEventListener("click", function() {
  // Очистити значення полів вводу
  inputField.value = "";
  outputField.value = "";
});


    
/* ============================================================
   script_bannedt.js
   ------------------------------------------------------------
   Один файл – три універсальні функції для:
   1.  Перевірки заборонених речовин (hasBannedIngredient)
   2.  Виявлення порушень маркування ДД (getLabelViolations)
   3.  Підключення live-валидації до UI (attachBannedGuard)
   ───────────────────────────────────────────────────────────*/

/* ---------- 1. СЛОВНИКИ (можна доповнювати) ---------- */
const BANNED_WORDS = [
  'alpha gpc','alpha-gpc','gpc',
  'aloe emodin','aloe-emodin','aloin','barbaloin',
  'hydroxyanthracene','anthraquinone',
  'dantron','danthron',
  'emodin',
  'ephedra','ma huang','ephedrine','pseudoephedrine','norephedrine','phenylpropanolamine',
  'yohimbe','yohimbine','α-yohimbine','rauwolscine','quebrachine',
  'dmaa','1,3-dimethylamylamine','methylhexanamine',
  'geranamine','4-methyl-2-hexanamine','2-amino-4-methylhexane','dmha'
];

const HEALTH_ROOTS   = ['сприя','поддерж','support','maintain','улуч','improv','повыш',
                        'increase','нормал','normaliz','стимуля','stimulat','уменьш',
                        'reduce','захищ','protect','состояни','эластичн','регенерац',
                        'подвижн','смазк','оздоров','биодоступ'];
const THERAPY_ROOTS  = ['леч','исцел','совет','cure','heal','устран','eliminat','reliev',
                        'снима','prevent','профилак','save','уменьшен','снижени','оздоровле'];
const DISEASE_ROOTS  = ['рак','онк','cancer','диабет','diabet','гипертон','pressure',
                        'инфаркт','stroke','гепатит','arthrit','остеопор','depress',
                        'воспал','inflamm','joint','сустав','кожа','skin','wrinkl','морщ'];
const MISLEAD_ROOTS  = ['100%','без побоч','no side','натурал','natural','miracle','magic',
                        'уникальн','unique','гарантир','guaranteed','clinically proven',
                        'клинически доказ','доказан','биодоступ','реально помогает'];
const QTY_INGR       = ['vitamin','витамин','вітамін','omega','омега','iron','залізо','железо',
                        'calcium','кальций','кальцій','magnesium','магний','магній','zinc','цинк',
                        'selen','селен','coenzyme q10','коензим q10'];

/* ---------- 2. ДОПОМІЖНІ ---------- */
const norm = s => s.toLowerCase()
                  .replace(/[\u00a0-\u200f]/g,' ')
                  .replace(/[-_]/g,' ')
                  .replace(/\s+/g,' ')
                  .trim();
const hasRoot = (roots, txt) => roots.some(r => txt.includes(r));
const hasPair = (a,b,txt)=>a.some(x=>txt.includes(x))&&b.some(y=>txt.includes(y));

/* =====================================================
   ❶ hasBannedIngredient(text)
   -----------------------------------------------------
   → true / false
===================================================== */
function hasBannedIngredient(text){
  const t = norm(text);
  return BANNED_WORDS.some(w=>t.includes(norm(w)));
}

/* =====================================================
   ❷ getLabelViolations(text)
   -----------------------------------------------------
   → масив кодів ['01','02',…] або []
===================================================== */
function getLabelViolations(text){
  const t = norm(text);
  const v = [];
  if (hasRoot(HEALTH_ROOTS, t))      v.push('01');            // health-claim
  if (hasPair(THERAPY_ROOTS, DISEASE_ROOTS, t)) v.push('02'); // лікування
  if (hasRoot(MISLEAD_ROOTS, t))     v.push('03');            // маркетинг
  if (QTY_INGR.some(k=>new RegExp(`${k}\\s*(?![0-9])`,`i`).test(t))) v.push('04'); // без доз
  return v;
}

/* =====================================================
   ❸ attachBannedGuard({input,result,buttons})
   -----------------------------------------------------
   • input   : <textarea|input>      – де користувач вводить текст
   • result  : <textarea|input|div>  – куди будемо писати попередження
   • buttons : Array<HTMLButton>     – кнопки, що запускають обробку
===================================================== */
function attachBannedGuard({input,result,buttons=[]}){
  const showBan      = ()=>{ result.value='Заборонено до продажу в Україні'; };
  const showViol     = codes=>{
    const map={'01':'Твердження про користь (перевірте).',
               '02':'Лікувальні властивості – заборонено.',
               '03':'Маркетинг без доказів / вводить в оману.',
               '04':'Інгредієнт без дозування.'};
    result.value = 'Порушення:\n• '+codes.map(c=>map[c]).join('\n• ');
  };

  /* live */
  input.addEventListener('input',()=>{
    if (hasBannedIngredient(input.value)) return showBan();
    const v=getLabelViolations(input.value);
    if (v.length) showViol(v);
  });

  /* buttons */
  const handler=e=>{
    if (hasBannedIngredient(input.value)){ e.preventDefault(); e.stopImmediatePropagation(); return showBan(); }
    const v=getLabelViolations(input.value);
    if (v.length){ e.preventDefault(); e.stopImmediatePropagation(); showViol(v); }
  };
  buttons.forEach(btn=>btn.addEventListener('click',handler,true));
}

/* =========== Глобальний експорт (browser) =========== */
window.hasBannedIngredient = hasBannedIngredient;
window.getLabelViolations  = getLabelViolations;
window.attachBannedGuard   = attachBannedGuard;

/*=====================================================
  ПРИКЛАД ПІДКЛЮЧЕННЯ У HTML
  ----------------------------------------------------
  <script src="script_bannedt.js"></script>
  <script>
    attachBannedGuard({
       input   : document.getElementById('input-text-markup'),
       result  : document.getElementById('result'),
       buttons : [
         document.getElementById('process-btn'),
         document.getElementById('clean-btn'),
         document.getElementById('clean-btn-tag'),
         document.getElementById('brization-button')
       ]
    });
  </script>
=====================================================*/
function copyText() {
  const activeElement = document.activeElement;
  let textToCopy;

  if (activeElement.tagName === 'INPUT') {
    textToCopy = activeElement.value;
  } else if (activeElement.tagName === 'BUTTON') {
    textToCopy = activeElement.innerText;
  }

  navigator.clipboard.writeText(textToCopy);
}

const elements = document.querySelectorAll('.copy');
elements.forEach(element => {
  if (element.tagName === 'INPUT') {
  }
  element.addEventListener('click', copyText);
});
document.addEventListener('DOMContentLoaded', () => {
    const spans = document.querySelectorAll('span[for]'); // Знаходимо всі span з атрибутом for

    spans.forEach(span => {
        const selectId = span.getAttribute('for'); // Отримуємо id select з атрибута for
        const selectElement = document.getElementById(selectId); // Знаходимо select за id

        if (selectElement) {
            span.parentNode.addEventListener('click', () => { // Додаємо обробник до батьківського div
                selectElement.focus();
            });
        }
    });
});
document.addEventListener('DOMContentLoaded', function () {
    fetch('https://docs.google.com/spreadsheets/d/1JFICWpsPnZWOS1HcdUYEP-FLUFw1gf8aDEd47aFcEeo/export?format=csv')
        .then(response => response.text())
        .then(data => {
            Papa.parse(data, {
                header: true,
                skipEmptyLines: true,
                complete: function(results) {
                    let htmlContent = '';
                    results.data.forEach((row, index) => {
                        const no = row.No || '';
                        const id = row.ID || '';
                        const titleua = row.TitleUA || '';
                        const titleru = row.TitleRU || '';
                        const titleen = row.TitleEN || '';
                        const titlealt = row.TitleALT || '';
                        const icon = row.Icon || '';
                        const iconTitle = row.IconTitle || '';
                        const content = row.Content || '';
                        const type = row.Type ? row.Type.trim() : '';
                        const triggers = row.Triggers || '';
                        const keywordsua = row.KeywordsUA || '';

                        // Пропустити рядки з типом "target" та "other"
                        if (type === 'target' || type === 'other' || type === 'main') {
                            return;
                        }

                        htmlContent += `
<div class="glos" id="${id}">
    <div class="glos-block">
        <div class="line-v"></div>
        <dl>
            <div class="stiky">
                <h3>${titleua}</h3>
                <span class="text-xs">${type}</span>
                <div class="name-sub">
                    <!--<p>${titleru}</p>-->
                    <p>${titleen}</p>                           
                </div>
                <div class="cat-items">
                    <!--<span title="${iconTitle}" class="material-symbols-outlined">${icon}</span>-->
                </div>
            </div>
        </dl>
        <div class="glos-content">
            <div>                                        
                <h3>${titleua} <span class="titlealt">${titlealt}</span></h3>
                <span class="text-xs"></span>
                <div>
                    ${content}
                </div>
            </div>
            <div class="keywords-content">
                <h2>${triggers}</h2>
                <p>${keywordsua}</p>
            </div>
        </div>
    </div>
</div>
                        `;
                    });
                    document.getElementById('glos-main').innerHTML = htmlContent;

                    // Виклик події після завантаження статей
                    const event = new Event('articlesLoaded');
                    document.dispatchEvent(event);
                },
                error: function(error) {
                    console.error('Error parsing CSV:', error);
                }
            });
        })
        .catch(error => console.error('Error fetching CSV:', error));
});
document.addEventListener('DOMContentLoaded', function () {
    fetch('https://docs.google.com/spreadsheets/d/1JFICWpsPnZWOS1HcdUYEP-FLUFw1gf8aDEd47aFcEeo/export?format=csv')
        .then(response => response.text())
        .then(data => {
            Papa.parse(data, {
                header: true,
                skipEmptyLines: true,
                complete: function(results) {
                    let navigationContent = '';
                    const items = results.data.filter(row => {
                        const type = row.Type ? row.Type.trim() : '';
                        return type !== 'target' && type !== 'other';
                    });

                    // Створення вкладеної структури
                    const nestedItems = {};
                    items.forEach(item => {
                        const itemId = item.ID ? item.ID.trim() : '';
                        const itemParent = item.Parent ? item.Parent.trim() : 'main';

                        if (!nestedItems[itemParent]) {
                            nestedItems[itemParent] = { children: [] };
                        }
                        if (!nestedItems[itemId]) {
                            nestedItems[itemId] = { ...item, children: [] };
                        } else {
                            nestedItems[itemId] = { ...nestedItems[itemId], ...item };
                        }
                        nestedItems[itemParent].children.push(nestedItems[itemId]);
                    });

function buildList(items, level = 0) {
                        let list = '';
                        items.forEach(item => {
                            if (item.TitleUA) {
                                const toggleButton = item.children && item.children.length > 0
                                    ? `<span class="material-symbols-outlined toggle-btn" data-state="open">keyboard_arrow_up</span>`
                                    : '';
                                
                                // Додати клас залежно від значення Type
                                const typeClass = item.Type ? `type-${item.Type.trim().toLowerCase()}` : '';
                                
                                list += `<div class="item level-${level} ${typeClass}"><a href="#${item.ID}">${item.TitleUA}</a>${toggleButton}</div>`;
                                if (item.children && item.children.length > 0) {
                                    list += `<div class="nested" style="max-height: none;">${buildList(item.children, level + 1)}</div>`;
                                }
                            }
                        });
                        return list;
                    }


                    if (nestedItems['main'] && nestedItems['main'].children) {
                        navigationContent = buildList(nestedItems['main'].children);
                    }
                    document.getElementById('glossary-list').innerHTML = navigationContent;

                    // Виклик події після завантаження меню
                    const event = new Event('menuLoaded');
                    document.dispatchEvent(event);
                },
                error: function(error) {
                    console.error('Error parsing CSV:', error);
                }
            });
        })
        .catch(error => console.error('Error fetching CSV:', error));
});
document.addEventListener('DOMContentLoaded', function () {
    const searchInput = document.getElementById('search-glos');
    const glossaryMain = document.getElementById('glos-main');

    searchInput.addEventListener('input', function () {
        const query = searchInput.value.toLowerCase();
        const items = glossaryMain.querySelectorAll('.glos');

        items.forEach(item => {
            const titleua = item.querySelector('h3') ? item.querySelector('h3').innerText.toLowerCase() : '';
            const titleru = item.querySelector('.name-sub p:nth-child(1)') ? item.querySelector('.name-sub p:nth-child(1)').innerText.toLowerCase() : '';
            const titleen = item.querySelector('.name-sub p:nth-child(2)') ? item.querySelector('.name-sub p:nth-child(2)').innerText.toLowerCase() : '';
            const titlealt = item.querySelector('.titlealt') ? item.querySelector('.titlealt').innerText.toLowerCase() : '';

            if (titleua.includes(query) || titleru.includes(query) || titleen.includes(query) || titlealt.includes(query)) {
                item.style.display = '';
            } else {
                item.style.display = 'none';
            }
        });
    });
});
document.addEventListener('DOMContentLoaded', function () {
    document.addEventListener('menuLoaded', function () {
        document.querySelectorAll('.toggle-btn').forEach(btn => {
            btn.addEventListener('click', function (event) {
                event.stopPropagation(); // Запобігає подвійному кліку
                const parentItem = this.closest('.item');
                const nested = parentItem.nextElementSibling;
                if (nested && nested.classList.contains('nested')) {
                    const isExpanded = this.getAttribute('data-state') === 'open';
                    if (isExpanded) {
                        nested.style.display = 'none';
                    } else {
                        nested.style.display = 'block';
                    }
                    this.textContent = isExpanded ? 'keyboard_arrow_down' : 'keyboard_arrow_up';
                    this.setAttribute('data-state', isExpanded ? 'closed' : 'open');
                }
            });
        });
    });
});
document.addEventListener("DOMContentLoaded", function() {
  const brandNameInput = document.getElementById('brandName');
  const brandWebsiteInput = document.getElementById('brandWebsite');
  const resultTextarea = document.getElementById('result-link-gen');
  const clearBtn = document.getElementById('clear-link-gen');
  const csvUrlLinks = 'https://docs.google.com/spreadsheets/d/1kDpQ6FoSsEsA7dc36MKYA97j6lTmLZ_de11o83CZGXU/export?format=csv';

  // Ініціалізуємо контейнер для кнопок
  const buttonsContainer = document.getElementById("buttons-container");

  if (!buttonsContainer) {
    console.error('Container for buttons not found.');
    return;
  }

  Papa.parse(csvUrlLinks, {
    download: true,
    header: true,
    complete: function(results) {
      const data = results.data;
      
      // Проходимо по всім елементам з CSV
      data.forEach(link => {
        // Створюємо кнопку
        var button = document.createElement("button");
        button.className = "of-link-btn";

        // Створюємо елемент посилання
        var linkElement = document.createElement("a");
        linkElement.href = link.Link;  // Використовуємо колонку "Link" з CSV
        linkElement.target = "_blank";
        linkElement.textContent = link.BrandName; // Використовуємо колонку "BrandName" з CSV

        // Додаємо елемент посилання до кнопки
        button.appendChild(linkElement);

        // Додаємо кнопку до контейнера
        buttonsContainer.appendChild(button);
      });
    },
    error: function(err) {
      console.error('Error loading CSV data:', err);
    }
  });

  // Пошук
  document.getElementById("search-link").addEventListener("input", function (e) {
    const searchTerm = e.target.value.toLowerCase();
    const buttons = document.getElementsByClassName("of-link-btn");

    for (let i = 0; i < buttons.length; i++) {
      const buttonText = buttons[i].textContent.toLowerCase();
      if (buttonText.includes(searchTerm)) {
        buttons[i].style.display = "inline-block";
      } else {
        buttons[i].style.display = "none";
      }
    }
  });
});
document.addEventListener('DOMContentLoaded', () => {
    const openModalBtns = document.querySelectorAll(".openModalBtn");
    const closeBtns = document.querySelectorAll(".closeBtn");
  
    openModalBtns.forEach(btn => {
      btn.addEventListener("click", () => {
        const modal = btn.nextElementSibling; 
        modal.style.display = "block";
      });
    });
  
    closeBtns.forEach(btn => {
      btn.addEventListener("click", () => {
        btn.parentElement.parentElement.style.display = "none";
      });
    });
  
    window.onclick = function(event) {
      if (event.target.classList.contains("modal")) {
        event.target.style.display = "none";
      }
    };
  });
  
  
document.addEventListener('click', function (event) {
  var dropdown = document.getElementById('dropdown');
  var selected = document.getElementById('selected');

  if (!dropdown.contains(event.target) && event.target !== selected) {
    dropdown.style.display = 'none';
  }
});
// 1. Оголошення змінних для зберігання даних
let countriesData = {};
let triggersData = [];

// 4. Завантаження елементів DOM після завантаження сторінки
document.addEventListener('DOMContentLoaded', function() {
  // Завантаження елементів DOM
  const inputTextMarkup = document.getElementById('input-text-markup');
  const brandNameInput = document.getElementById('brand-name');
  const countryNameDiv = document.getElementById('country-name');
  const countryName2Div = document.getElementById('country-name-2');
  const productNameInput = document.getElementById('product-name');
  const productPackagingInput = document.getElementById('product-packaging');
  const seoTitleInput = document.getElementById('seo-title');
  const seoTitleCounterSpan = document.getElementById('seo-title-counter');
  const seoKeywordsInput = document.getElementById('seo-keywords');
  const seoKeywordsCounterSpan = document.getElementById('seo-keywords-counter');
  const seoDescriptionInput = document.getElementById('seo-description');
  const seoDescriptionCounterSpan = document.getElementById('seo-description-counter');
  const triggerTitlesContainer = document.getElementById('trigger-titles-container');
  const trigerButtonsContainer = document.getElementById('triger-buttons-container');
  const searchLinkInput = document.getElementById('search-link'); // Assuming you have an input with id "search-link"
  const commonWarning = document.getElementById('common-warning');
  const csvUrl = 'https://docs.google.com/spreadsheets/d/1JFICWpsPnZWOS1HcdUYEP-FLUFw1gf8aDEd47aFcEeo/export?format=csv';
  const csvUrlBrandsCountries = 'https://docs.google.com/spreadsheets/d/1kDpQ6FoSsEsA7dc36MKYA97j6lTmLZ_de11o83CZGXU/export?format=csv';

// 2. Завантаження даних з файлу brands_countries.csv
Papa.parse(csvUrlBrandsCountries, {
  download: true,
  header: true,
  complete: function(results) {
    countriesData = results.data.reduce((acc, row) => {
      const brand = row.BrandName ? row.BrandName.toLowerCase().trim() : ''; // Перевіряємо, чи є BrandName
      const country = row.CountryName ? row.CountryName.trim() : ''; // Перевіряємо, чи є CountryName

      if (brand && country) { // Додаємо тільки, якщо є і бренд, і країна
        acc[brand] = country;
      }
      return acc;
    }, {});

    console.log('Countries and Brands data loaded:', countriesData);
    updateCountry();  // Оновлюємо країну після завантаження даних
  }
});

// 3. Завантаження даних з файлу cvs
Papa.parse(csvUrl, {
  download: true,
  header: true,
  complete: function(results) {
    triggersData = results.data.map(row => ({
      title: row.TitleUA.trim(),
      triggers: row.Triggers ? row.Triggers.split(',').map(trigger => trigger.trim()).filter(trigger => trigger) : [],
      keywords: row.KeywordsRU ? row.KeywordsRU.split(',').map(keyword => keyword.trim()).filter(keyword => keyword) : []
    })).filter(trigger => trigger.triggers.length > 0 || trigger.keywords.length > 0);
    console.log('Triggers data loaded:', triggersData); // Для перевірки
    renderTriggerTitles(); // Викликаємо функцію після завантаження даних
  }
});

/* --- blacklist --- */
const BANNED_BRANDS = [
  'clomapharm',
  'cloma pharm'
];

const BANNED_PRODUCTS = [
  'alpha gpc',

  /* Aloe-emodin і споріднені */
  'aloe-emodin', 'aloe emodin', 'aloin', 'barbaloin',
  'hydroxyanthracene', 'anthraquinone',

  /* Dantron */
  'dantron', 'danthron',

  /* Emodin */
  'emodin',

  /* Ephedra */
  'ephedra', 'ma huang',
  'ephedrine', 'pseudoephedrine', 'norephedrine', 'phenylpropanolamine',

  /* Yohimbe */
  'yohimbe', 'yohimbine', 'α-yohimbine', 'rauwolscine', 'quebrachine',

  /* DMAA */
  'dmaa', '1,3-dimethylamylamine', 'methylhexanamine',
  'geranamine', '4-methyl-2-hexanamine', '2-amino-4-methylhexane',

  /* часті плутанини */
  'dmha'
];
  
function checkIronInInput() {
  const brandValue   = brandNameInput.value.toLowerCase();
  const productValue = productNameInput.value.toLowerCase();

  const brandIsBanned   = BANNED_BRANDS.some(k   => brandValue.includes(k));
  const productIsBanned = BANNED_PRODUCTS.some(
    k => productValue.includes(k) || brandValue.includes(k)
  );


  commonWarning.textContent =
    (brandIsBanned || productIsBanned)
      ? 'Заборонено до продажу в Україні'
      : '';
}

  

  // 5. Логіка для заповнення назви бренду і продукту з input-text-markup
  function updateBrandAndProductName() {
    const text = inputTextMarkup.value.replace(/<\/?[^>]+(>|$)/g, ''); // Видаляємо всі HTML-теги
    const words = text.split(' ');

    // Назва бренду: перше слово
    const brandName = words[0];
    brandNameInput.value = brandName;

    // Назва продукту: слова між першим і " - "
    const dashIndex = words.findIndex(word => word === '-' || word === '–');
    const productName = dashIndex !== -1 ? words.slice(1, dashIndex).join(' ') : words.slice(1).join(' ');
    productNameInput.value = productName;

    // Оновлюємо країну після зміни бренду
    updateCountry();
    generateSeoTitle(); // Оновлюємо SEO Title після автозаповнення
    generateSeoDescription(); // Оновлюємо SEO Description після автозаповнення
    generateSeoKeywords(); // Оновлюємо SEO Keywords після автозаповнення
    updateTriggerTitles(); // Оновлюємо тюліпи після автозаповнення

    // Перевірка на заборонені назви
    checkIronInInput();
  }

  // 6. Логіка для виведення країни
  function updateCountry() {
    const brandName = brandNameInput.value.trim().toLowerCase();
    const country = countriesData[brandName] || '';

    // Оновлюємо тільки countryNameDiv
    countryNameDiv.innerText = country; 
  }

  // 7. Функція для оновлення країни на основі пошуку виробника в search-link
  function updateCountryFromSearchLink() {
    const brandName = searchLinkInput.value.trim().toLowerCase();
    const country = countriesData[brandName] || '';

    // Оновлюємо тільки countryName2Div
    countryName2Div.innerText = country; 
  }

  // 8. Логіка для формування SEO Title
  function generateSeoTitle() {
    const brandName = brandNameInput.value.trim();
    const packaging = productPackagingInput.value.trim();
    const productName = productNameInput.value.trim();

    // Формуємо SEO Title за шаблоном
    const seoTitle = `Купить ${brandName} ${productName}${packaging ? ' ' + packaging : ''} в Украине. Низкие цены!`;

    // Оновлюємо поле SEO Title
    seoTitleInput.value = seoTitle;

    // Оновлюємо лічильник символів SEO Title
    seoTitleCounterSpan.innerText = `${seoTitle.length}/65`;
  }

  // 9. Логіка для формування SEO Description
  function generateSeoDescription() {
    const text = inputTextMarkup.value.replace(/<\/?[^>]+(>|$)/g, '').trim();// Видаляємо всі HTML-теги
    const firstSentence = text.match(/[^\.!\?]+[\.!\?]+/g)?.[0] || text;
    const phoneNumbers = ["(096)519-78-22", "(073)475-67-07", "(099)237-90-38"]; // Приклад телефонів
    const randomPhone = phoneNumbers[Math.floor(Math.random() * phoneNumbers.length)];

    // Формуємо SEO Description за шаблоном
    const seoDescription = `${firstSentence} Для заказа звоните по номеру: ${randomPhone}`;

    // Оновлюємо лічильник символів SEO Keywords
    seoDescriptionCounterSpan.innerText = `${seoDescription.length}/200`;

    // Оновлюємо поле SEO Description
    seoDescriptionInput.value = seoDescription;
  }

  // 10. Логіка для формування SEO Keywords
  function generateSeoKeywords() {
    const brandName = brandNameInput.value.trim();
    const packaging = productPackagingInput.value.trim();
    const productName = productNameInput.value.trim();

    // Основні ключові слова
    let keywords = [
      `купить ${brandName} ${productName}${packaging ? ' ' + packaging : ''}`,
      `${brandName} ${productName}`,
      `${brandName}`,
      `${productName}`
    ];

    // Додаємо ключові слова з тригерів з product-name
    triggersData.forEach(trigger => {
      const triggerWords = trigger.triggers;
      triggerWords.forEach(triggerWord => {
        if (productName.toLowerCase().includes(triggerWord.toLowerCase())) {
          keywords = keywords.concat(trigger.keywords);
        }
      });
    });

    // Видаляємо порожні значення і дублікати
    keywords = [...new Set(keywords.filter(keyword => keyword))];

    // Формуємо ключові слова в один рядок, розділені комами
    const seoKeywords = keywords.join(', ');

    // Оновлюємо поле SEO Keywords
    seoKeywordsInput.value = seoKeywords;

    // Оновлюємо лічильник символів SEO Keywords
    seoKeywordsCounterSpan.innerText = `${seoKeywords.length}/250`;
  }

  // 11. Логіка для виведення тюліпів у trigger-titles-container
  function updateTriggerTitles() {
    // Очищуємо контейнер перед додаванням нових тюліпів
    triggerTitlesContainer.innerHTML = '';

    // Проходимо по всіх тригерах
    triggersData.forEach(trigger => {
      const triggerWords = trigger.triggers;

      // Перевіряємо, чи тригери є в product-name
      let triggerFound = triggerWords.some(triggerWord =>
        productNameInput.value.toLowerCase().includes(triggerWord.toLowerCase())
      );

      if (triggerFound) {
        // Додаємо активний тюліп
        const tulip = document.createElement('div');
        tulip.className = 'trigger-title-active';
        tulip.innerText = trigger.title;

        // Додаємо tooltip
        const tooltip = document.createElement('div');
        tooltip.className = 'tooltip';
        tooltip.innerText = trigger.keywords.join(', ');

        // Включаємо tooltip як дочірній елемент тюліпа
        tulip.appendChild(tooltip);

        tulip.addEventListener('click', () => toggleTulipState(tulip, trigger.keywords));

        // Додаємо обробники подій для наведення і відведення
        tulip.addEventListener('mouseover', () => {
          tooltip.style.visibility = 'visible';
          tooltip.style.opacity = '1';
        });
        tulip.addEventListener('mouseout', () => {
          tooltip.style.visibility = 'hidden';
          tooltip.style.opacity = '0';
        });

        // Додаємо тюліп у контейнер
        triggerTitlesContainer.appendChild(tulip);
      }
    });

    // Оновлення SEO Keywords після додавання/оновлення тюліпів
    generateSeoKeywords();
  }

// Функція для перемикання стану тюліпа і додавання/видалення ключових слів
function toggleTulipState(tulip, keywords) {
    if (tulip.classList.contains('trigger-title-active')) {
      tulip.classList.remove('trigger-title-active');
      tulip.classList.add('trigger-title-inactive');
      // Видаляємо ключові слова з seo-keywords
      removeKeywordsFromSeo(keywords);
    } else {
      tulip.classList.remove('trigger-title-inactive');
      tulip.classList.add('trigger-title-active');
      // Додаємо ключові слова до seo-keywords
      addKeywordsToSeo(keywords);
    }
  }  

// Додаємо ключові слова до seo-keywords
function addKeywordsToSeo(keywords) {
    const currentKeywords = seoKeywordsInput.value.split(',').map(kw => kw.trim());
    const newKeywords = [...new Set([...currentKeywords, ...keywords])].filter(kw => kw);
    seoKeywordsInput.value = newKeywords.join(', ');
    seoKeywordsCounterSpan.innerText = `${seoKeywordsInput.value.length}/250`;
  }
  
  // Видаляємо ключові слова з seo-keywords
  function removeKeywordsFromSeo(keywords) {
    let currentKeywords = seoKeywordsInput.value.split(',').map(kw => kw.trim());
    currentKeywords = currentKeywords.filter(kw => !keywords.includes(kw));
    seoKeywordsInput.value = currentKeywords.join(', ');
    seoKeywordsCounterSpan.innerText = `${seoKeywordsInput.value.length}/250`;
  }
  
  // 12. Логіка для виведення всіх назв тригерів у triger-buttons-container
  function renderTriggerTitles() {
    if (!trigerButtonsContainer) return; // Перевірка, чи контейнер існує

    // Очищуємо контейнер перед додаванням нових тригерів
    trigerButtonsContainer.innerHTML = '';

    // Проходимо по всіх тригерах і додаємо їхні назви до контейнера
    triggersData.forEach(trigger => {
      const triggerButton = document.createElement('button'); // Створюємо кнопку
      triggerButton.className = 'trigger-button'; // Додаємо клас для стилізації
      triggerButton.innerText = trigger.title; // Встановлюємо текст кнопки

      // Додаємо обробник події натискання
      triggerButton.addEventListener('click', () => addTriggerToContainer(trigger));

      // Додаємо кнопку у контейнер
      trigerButtonsContainer.appendChild(triggerButton);
    });
  }

  // Функція для додавання тюліпа в trigger-titles-container і оновлення seo-keywords
function addTriggerToContainer(trigger) {
    if (!triggerTitlesContainer) return; // Перевірка, чи контейнер існує
  
    // Перевіряємо, чи тюліп вже існує в контейнері
    const existingTulip = Array.from(triggerTitlesContainer.children).find(child => child.innerText === trigger.title);
    if (existingTulip) return; // Якщо існує, не додаємо його знову
  
    // Додаємо активний тюліп
    const tulip = document.createElement('div');
    tulip.className = 'trigger-title-active'; // Додаємо клас для активного тюліпа
    tulip.innerText = trigger.title;
  
    // Додаємо tooltip
    const tooltip = document.createElement('div');
    tooltip.className = 'tooltip';
    tooltip.innerText = trigger.keywords.join(', ');
  
    // Включаємо tooltip як дочірній елемент тюліпа
    tulip.appendChild(tooltip);
  
    // Додаємо обробники подій для наведення і відведення
    tulip.addEventListener('mouseover', () => {
      tooltip.style.visibility = 'visible';
      tooltip.style.opacity = '1';
    });
    tulip.addEventListener('mouseout', () => {
      tooltip.style.visibility = 'hidden';
      tooltip.style.opacity = '0';
    });
  
    // Додаємо тюліп у контейнер
    triggerTitlesContainer.appendChild(tulip);
  
    // Оновлюємо SEO Keywords після додавання тюліпа
    addKeywordsToSeo(trigger.keywords);
  
    // Додаємо логіку перемикання стану і оновлення seo-keywords
    tulip.addEventListener('click', () => toggleTulipState(tulip, trigger.keywords));
  }
  

  // Пошук тригерів
document.getElementById("search-triger").addEventListener("input", function (e) {
  const searchTerm = e.target.value.toLowerCase();
  const buttons = document.getElementsByClassName("trigger-button"); // Зміна класу на 'trigger-button'

  for (let i = 0; i < buttons.length; i++) {
    const buttonText = buttons[i].textContent.toLowerCase();
    if (buttonText.includes(searchTerm)) {
      buttons[i].style.display = "inline-block";
    } else {
      buttons[i].style.display = "none";
    }
  }
});

  // Функція для копіювання тексту з інпуту
function copyToClipboard(inputElement) {
  inputElement.select(); // Виділяємо текст
  document.execCommand('copy'); // Копіюємо текст у буфер обміну
}

  // Додаємо обробники подій 'click' для інпутів
seoTitleInput.addEventListener('click', function() {
  copyToClipboard(seoTitleInput);
});

seoKeywordsInput.addEventListener('click', function() {
  copyToClipboard(seoKeywordsInput);
});

seoDescriptionInput.addEventListener('click', function() {
  copyToClipboard(seoDescriptionInput);
});



  brandNameInput.addEventListener('input', updateCountry);  // Прив'язка до події 'input' для автоматичного оновлення країни при зміні назви бренду
  brandNameInput.addEventListener('input', checkIronInInput);  // Прив'язка до події 'input' для автоматичного оновлення країни при зміні назви бренду
  brandNameInput.addEventListener('input', generateSeoTitle);    // Прив'язка до події 'input' для автоматичного формування SEO Title при зміні тексту
  brandNameInput.addEventListener('input', generateSeoKeywords);  // Прив'язка до події 'input' для автоматичного формування SEO Keywords при зміні тексту

  productNameInput.addEventListener('input', checkIronInInput);  // Прив'язка до події 'input' для автоматичного оновлення країни при зміні назви бренду
  productNameInput.addEventListener('input', generateSeoTitle);    // Прив'язка до події 'input' для автоматичного формування SEO Title при зміні тексту
  productNameInput.addEventListener('input', generateSeoKeywords);  // Прив'язка до події 'input' для автоматичного формування SEO Keywords при зміні тексту
  productNameInput.addEventListener('input', updateTriggerTitles);  // Прив'язка до події 'input' для автоматичного оновлення тригерів при зміні тексту

  searchLinkInput.addEventListener('input', updateCountryFromSearchLink);  // Прив'язка до події 'input' для автоматичного оновлення країни при зміні тексту
  
  countryNameDiv.addEventListener('input', generateSeoKeywords);  // Прив'язка до події 'input' для автоматичного формування SEO Keywords при зміні тексту
  
  productPackagingInput.addEventListener('input', generateSeoKeywords);  // Прив'язка до події 'input' для автоматичного формування SEO Keywords при зміні тексту
  productPackagingInput.addEventListener('input', generateSeoTitle);  // Прив'язка до події 'input' для автоматичного формування SEO Title при зміні тексту

  inputTextMarkup.addEventListener('input', updateBrandAndProductName); // Прив'язка до події 'input' для автоматичного оновлення при зміні тексту
  inputTextMarkup.addEventListener('input', generateSeoDescription);  // Прив'язка до події 'input' для автоматичного формування SEO Description при зміні тексту
  

  updateCountry();  // Початковий виклик для встановлення значення країни при завантаженні сторінки  
  updateCountryFromSearchLink();  // Початковий виклик для встановлення значення країни при завантаженні сторінки

  generateSeoTitle();  // Початковий виклик для формування SEO Title при завантаженні сторінки

  generateSeoDescription();  // Початковий виклик для формування SEO Description при завантаженні сторінки

  generateSeoKeywords();  // Початковий виклик для формування SEO Keywords при завантаженні сторінки

  updateTriggerTitles();  // Початковий виклик для встановлення тюліпів при завантаженні сторінки

  renderTriggerTitles();

});
document.addEventListener('DOMContentLoaded', function () {
    const titleInput = document.getElementById('keywords-title');
    const triggersInput = document.getElementById('triggers');
    const keywordsInput = document.getElementById('keywords');
    const outputArea = document.getElementById('triger-output');
    const clearButton = document.getElementById('clear-triger-gen');

    function generateJSON() {
        const title = titleInput.value.trim();
        const triggers = triggersInput.value.split(',').map(trigger => trigger.trim());
        const keywords = keywordsInput.value.split(',').map(keyword => keyword.trim());

        if (title && triggers.length && keywords.length) {
            const jsonData = {
                title: title,
                triggers: triggers.map(trigger => `"${trigger}"`),
                keywords: keywords.map(keyword => `"${keyword}"`)
            };
    
        // Форматування JSON вручну
        let outputString = `{\n  "title": "${jsonData.title}",\n  "triggers": [${jsonData.triggers.join(", ")}],\n  "keywords": [${jsonData.keywords.join(", ")}]\n}`;

        outputArea.value = outputString;
        } 
    }

    clearButton.addEventListener('click', function () {
        titleInput.value = '';
        triggersInput.value = '';
        keywordsInput.value = '';
        outputArea.value = '';
    });

    titleInput.addEventListener('input', generateJSON);
    triggersInput.addEventListener('input', generateJSON);
    keywordsInput.addEventListener('input', generateJSON);

    //Копіювання таблиці
    outputArea.addEventListener("click", function () {
            outputArea.select();
          document.execCommand("copy");
    });
});


document.querySelectorAll('main .spoiler-toggle').forEach(toggle => {
    toggle.addEventListener('click', () => {
        const content = toggle.closest('.spoiler').querySelector('.spoiler-content');
        const icon = toggle.querySelector('.material-symbols-outlined');

        // Перемикаємо спойлер без впливу на інші
        if (content.style.display === 'none' || content.style.display === '') {
            content.style.display = 'flex';
            icon.textContent = 'expand_less';
        } else {
            content.style.display = 'none';
            icon.textContent = 'expand_more';
        }
    });
});
document.addEventListener('DOMContentLoaded', () => {
    const modeToggleContainers = document.querySelectorAll('.mode-toggle-container'); // Змінили селектор

    modeToggleContainers.forEach(container => {
        const basicSwitch = container.querySelector('input[type="radio"][value="basic"]');
        const magicSwitch = container.querySelector('input[type="radio"][value="magic"]');
        const contents = container.querySelectorAll('.mode-toggle-content'); 

        // Оновлюємо обробники подій, щоб вони використовували dataset.for
        basicSwitch.addEventListener('change', () => toggleContent(container, 'basic'));
        magicSwitch.addEventListener('change', () => toggleContent(container, 'magic'));

        // Перевірка при завантаженні сторінки
        toggleContent(container, basicSwitch.checked ? 'basic' : 'magic');
    });
});

function toggleContent(container, targetValue) {
    const contents = container.querySelectorAll('.mode-toggle-content');
    contents.forEach(content => {
        content.style.display = (content.dataset.for === targetValue) ? 'flex' : 'none';
    });
}
// Розділ 1: Визначення DOM-елементів
// 1.1 Отримуємо посилання на елементи інтерфейсу
const addInputBtn = document.getElementById('add-input');               // Кнопка додавання нового рядка
const addEmptyLineButton = document.getElementById('add-ampty-line');   // Кнопка додавання порожнього рядка
const tablesBtn = document.getElementById('tables-btn');                // Кнопка генерації таблиці
const rowsContainer = document.getElementById('rows-container');        // Контейнер для рядків вводу
const ingredientsBtn = document.getElementById('ingredients');          // Кнопка додавання рядків для інгредієнтів
const warningTextBtn = document.getElementById('warning-text');         // Кнопка додавання рядка попередження
const compositionTextBtn = document.getElementById('different_product_composition');// Кнопка додавання рядка попередження
const magicBtn = document.getElementById('magic-button');               // Кнопка для магічної обробки тексту
const magicText = document.getElementById('magic-text');                // Поле вводу для магічного тексту
const tableHtml = document.getElementById("table-html");                // Поле виводу згенерованої таблиці
const tableHtmlBr = document.getElementById("table-html-br");           // Поле виводу тексту з <br>
const addAminoAcidsSampleBtn = document.getElementById('add-amino-acids-sample'); // Кнопка додавання амінокислот


let rowCounter = 1; // Лічильник рядків

// Розділ 2: Функції для роботи з рядками вводу
// 2.1 Додавання нового рядка вводу
addInputBtn.addEventListener('click', function() {
    const newRow = createNewRow();
    rowsContainer.appendChild(newRow);
    updateRowIdsAndEvents();
});

// 2.2 Додавання порожнього рядка
addEmptyLineButton.addEventListener('click', function() {
    initializeEmptyRow();
});

// 2.3 Ініціалізація першого рядка (заголовка)
function initializeFirstRow() {
    // Імітація натискання на кнопку додавання рядка
    document.getElementById('add-input').click();

    // Отримання новоствореного рядка
    const newRow = document.getElementById('inputs-bloc-' + (rowCounter - 1));

    // Вибір опції "Заголовок"
    const thStrongButton = newRow.querySelector('[data-class="th-strong"]');
    if (thStrongButton) {
        thStrongButton.click();
    }

    // Вставлення тексту в input-left
    const inputLeft = newRow.querySelector('.input-left');
    if (inputLeft) {
        inputLeft.value = 'Пищевая ценность';
    }
}

// 2.4 Ініціалізація порожнього рядка
function initializeEmptyRow() {
    // Імітація натискання на кнопку додавання рядка
    addInputBtn.click();

    // Отримання новоствореного рядка
    const lastBlock = document.querySelector('div[id^="inputs-bloc-"]:last-child');

    // Вибір опції "Нова таблиця"
    const newTableButton = lastBlock.querySelector('[data-class="new-table"]');
    if (newTableButton) {
        newTableButton.click();
    }
}

// 2.5 Функція для створення нового рядка
function createNewRow() {
    const newRow = document.createElement('div'); 
    newRow.classList.add('inputs-bloc', 'td'); 
    newRow.id = 'inputs-bloc-' + rowCounter; 
    newRow.setAttribute('draggable', 'false'); 

    const newMoveBtn = document.createElement('button'); 
    newMoveBtn.classList.add('move-btn'); 
    newMoveBtn.id = 'move-input-' + rowCounter; 
    newMoveBtn.innerHTML = '<span class="material-symbols-outlined">expand_all</span>'; 
    newRow.appendChild(newMoveBtn); 

    const inputsLineDiv = document.createElement('div');
    inputsLineDiv.classList.add('inputs-line');

    const newLeftDiv = document.createElement('div'); 
    newLeftDiv.classList.add('left'); 
    const newLeftSpan = document.createElement('span');
    newLeftSpan.classList.add('input-left-tool');
    newLeftSpan.id = 'input-left-tool-' + rowCounter;
    const newLeftInput = document.createElement('input'); 
    newLeftInput.id = 'input-left-' + rowCounter; 
    newLeftInput.classList.add('input-left'); 
    newLeftInput.placeholder = 'Введіть текст'; 
    newLeftInput.autocomplete = 'off'; 
    newLeftDiv.appendChild(newLeftSpan);
    newLeftDiv.appendChild(newLeftInput); 
    inputsLineDiv.appendChild(newLeftDiv); 

    const newRightDiv = document.createElement('div'); 
    newRightDiv.classList.add('right'); 
    const newRightInput = document.createElement('input'); 
    newRightInput.id = 'input-right-' + rowCounter; 
    newRightInput.classList.add('input-right'); 
    newRightInput.placeholder = 'Введіть текст'; 
    newRightInput.autocomplete = 'off'; 
    const newRightSpan = document.createElement('span');
    newRightSpan.classList.add('input-right-tool');
    newRightSpan.id = 'input-right-tool-' + rowCounter;
    newRightDiv.appendChild(newRightInput); 
    newRightDiv.appendChild(newRightSpan);
    inputsLineDiv.appendChild(newRightDiv); 

    newRow.appendChild(inputsLineDiv);

    const newSelectDiv = document.createElement('div'); 
    newSelectDiv.classList.add('select'); 
    const newUseAttributesBtn = document.createElement('button'); 
    newUseAttributesBtn.classList.add('use-attributes', 'lil-btn'); 
    newUseAttributesBtn.id = 'use-attributes-' + rowCounter; 
    newUseAttributesBtn.innerHTML = '<span class="material-symbols-outlined">tune</span>'; 
    newSelectDiv.appendChild(newUseAttributesBtn); 

    const newAttributesDropdown = document.createElement('div'); 
    newAttributesDropdown.classList.add('attributes-dropdown'); 
    newAttributesDropdown.id = 'attributes-dropdown-' + rowCounter; 
    newAttributesDropdown.style.display = 'none'; 

    // Create buttons manually with span elements

    // Звичайний
    const tdButton = document.createElement('button');
    tdButton.classList.add('option-btn', 'option-btn-l', 'active');
    tdButton.setAttribute('data-class', 'td');
    const tdButtonSpanName = document.createElement('span');
    tdButtonSpanName.classList.add('table-menu-name');
    tdButtonSpanName.textContent = 'Звичайний';
    const tdButtonSpanLabel = document.createElement('span');
    tdButtonSpanLabel.classList.add('table-menu-label');
    tdButtonSpanLabel.textContent = 'td';
    tdButton.appendChild(tdButtonSpanName);
    tdButton.appendChild(tdButtonSpanLabel);
    newAttributesDropdown.appendChild(tdButton);

    // Заголовок
    const thStrongButton = document.createElement('button');
    thStrongButton.classList.add('option-btn', 'option-btn-l');
    thStrongButton.setAttribute('data-class', 'th-strong');
    const thStrongButtonSpanName = document.createElement('span');
    thStrongButtonSpanName.classList.add('table-menu-name');
    thStrongButtonSpanName.textContent = 'Заголовок';
    const thStrongButtonSpanLabel = document.createElement('span');
    thStrongButtonSpanLabel.classList.add('table-menu-label');
    thStrongButtonSpanLabel.textContent = 'th-strong';
    thStrongButton.appendChild(thStrongButtonSpanName);
    thStrongButton.appendChild(thStrongButtonSpanLabel);
    newAttributesDropdown.appendChild(thStrongButton);

    // Підзаголовок
    const thButton = document.createElement('button');
    thButton.classList.add('option-btn', 'option-btn-l');
    thButton.setAttribute('data-class', 'th');
    const thButtonSpanName = document.createElement('span');
    thButtonSpanName.classList.add('table-menu-name');
    thButtonSpanName.textContent = 'Підзаголовок';
    const thButtonSpanLabel = document.createElement('span');
    thButtonSpanLabel.classList.add('table-menu-label');
    thButtonSpanLabel.textContent = 'th';
    thButton.appendChild(thButtonSpanName);
    thButton.appendChild(thButtonSpanLabel);
    newAttributesDropdown.appendChild(thButton);

    // Line separator
    const lineDiv1 = document.createElement('div');
    lineDiv1.classList.add('line');
    newAttributesDropdown.appendChild(lineDiv1);

    // Container for small buttons
    const containerOptionBtnSm = document.createElement('div');
    containerOptionBtnSm.classList.add('container-option-btn-sm');

    // Bold
    const boldButton = document.createElement('button');
    boldButton.classList.add('option-btn', 'option-btn-sm');
    boldButton.setAttribute('data-class', 'bold');
    const boldIcon = document.createElement('span');
    boldIcon.classList.add('material-symbols-outlined');
    boldIcon.textContent = 'format_bold';
    boldButton.appendChild(boldIcon);
    containerOptionBtnSm.appendChild(boldButton);

    // Italic
    const italicButton = document.createElement('button');
    italicButton.classList.add('option-btn', 'option-btn-sm');
    italicButton.setAttribute('data-class', 'italic');
    const italicIcon = document.createElement('span');
    italicIcon.classList.add('material-symbols-outlined');
    italicIcon.textContent = 'format_italic';
    italicButton.appendChild(italicIcon);
    containerOptionBtnSm.appendChild(italicButton);

    // Header 2
    const h2Button = document.createElement('button');
    h2Button.classList.add('option-btn', 'option-btn-sm');
    h2Button.setAttribute('data-class', 'h2');
    const h2Icon = document.createElement('span');
    h2Icon.classList.add('material-symbols-outlined');
    h2Icon.textContent = 'format_h2';
    h2Button.appendChild(h2Icon);
    containerOptionBtnSm.appendChild(h2Button);

    // Colspan 2
    const colspan2Button = document.createElement('button');
    colspan2Button.classList.add('option-btn', 'option-btn-sm');
    colspan2Button.setAttribute('data-class', 'colspan2');
    const colspan2Icon = document.createElement('span');
    colspan2Icon.classList.add('material-symbols-outlined');
    colspan2Icon.textContent = 'fit_page';
    colspan2Button.appendChild(colspan2Icon);
    containerOptionBtnSm.appendChild(colspan2Button);

    newAttributesDropdown.appendChild(containerOptionBtnSm);

    // Line separator
    const lineDiv2 = document.createElement('div');
    lineDiv2.classList.add('line');
    newAttributesDropdown.appendChild(lineDiv2);

    // Нова таблиця
    const newTableButton = document.createElement('button');
    newTableButton.classList.add('option-btn', 'option-btn-l');
    newTableButton.setAttribute('data-class', 'new-table');
    const newTableButtonSpanName = document.createElement('span');
    newTableButtonSpanName.classList.add('table-menu-name');
    newTableButtonSpanName.textContent = 'Нова таблиця';
    const newTableButtonSpanLabel = document.createElement('span');
    newTableButtonSpanLabel.classList.add('table-menu-label');
    newTableButtonSpanLabel.textContent = 'new-table';
    newTableButton.appendChild(newTableButtonSpanName);
    newTableButton.appendChild(newTableButtonSpanLabel);
    newAttributesDropdown.appendChild(newTableButton);

    // Line separator
    const lineDivInsert = document.createElement('div');
    lineDivInsert.classList.add('line');
    newAttributesDropdown.appendChild(lineDivInsert);

    // Кнопка "Створити вище"
    const insertAboveButton = document.createElement('button');
    insertAboveButton.classList.add('option-btn', 'option-btn-l');
    insertAboveButton.setAttribute('data-action', 'insert-above');
    const insertAboveButtonSpanName = document.createElement('span');
    insertAboveButtonSpanName.classList.add('table-menu-name');
    insertAboveButtonSpanName.textContent = 'Створити вище';
    insertAboveButton.appendChild(insertAboveButtonSpanName);
    newAttributesDropdown.appendChild(insertAboveButton);

    // Кнопка "Створити нижче"
    const insertBelowButton = document.createElement('button');
    insertBelowButton.classList.add('option-btn', 'option-btn-l');
    insertBelowButton.setAttribute('data-action', 'insert-below');
    const insertBelowButtonSpanName = document.createElement('span');
    insertBelowButtonSpanName.classList.add('table-menu-name');
    insertBelowButtonSpanName.textContent = 'Створити нижче';
    insertBelowButton.appendChild(insertBelowButtonSpanName);
    newAttributesDropdown.appendChild(insertBelowButton);

    newSelectDiv.appendChild(newAttributesDropdown);
    newRow.appendChild(newSelectDiv);

    // Line separator
    const lineDiv3 = document.createElement('div');
    lineDiv3.classList.add('line');
    newAttributesDropdown.appendChild(lineDiv3);

    const switchContainer = document.createElement('div');
    switchContainer.classList.add('switch-container');
    const switchRowInput = document.createElement('input');
    switchRowInput.type = 'radio';
    switchRowInput.id = 'row-' + rowCounter;
    switchRowInput.name = 'input-type-' + rowCounter;
    switchRowInput.value = 'row';
    switchRowInput.checked = true;
    const switchRowLabel = document.createElement('label');
    switchRowLabel.htmlFor = 'row-' + rowCounter;
    switchRowLabel.className = 'switch-label';
    switchRowLabel.textContent = 'Строка';
    const switchFieldInput = document.createElement('input');
    switchFieldInput.type = 'radio';
    switchFieldInput.id = 'field-' + rowCounter;
    switchFieldInput.name = 'input-type-' + rowCounter;
    switchFieldInput.value = 'field';
    const switchFieldLabel = document.createElement('label');
    switchFieldLabel.htmlFor = 'field-' + rowCounter;
    switchFieldLabel.className = 'switch-label';
    switchFieldLabel.textContent = 'Поле';
    switchContainer.appendChild(switchRowInput);
    switchContainer.appendChild(switchRowLabel);
    switchContainer.appendChild(switchFieldInput);
    switchContainer.appendChild(switchFieldLabel);
    newAttributesDropdown.appendChild(switchContainer);

    newSelectDiv.appendChild(newAttributesDropdown);
    newRow.appendChild(newSelectDiv);

    const newDelBtn = document.createElement('button'); 
    newDelBtn.classList.add('lil-btn'); 
    newDelBtn.id = 'del-input-' + rowCounter; 
    newDelBtn.innerHTML = '<span class="material-symbols-outlined">close</span>'; 
    newRow.appendChild(newDelBtn); 

    // Підключення обробників подій для нових кнопок
    newUseAttributesBtn.addEventListener('click', function(event) {
        closeAllDropdowns();
        var dropdown = this.nextElementSibling;
        dropdown.style.display = 'flex';
        event.stopPropagation();
    });

    newAttributesDropdown.addEventListener('mouseleave', function() {
        this.style.display = 'none';
    });

    // Event listeners for options in the current newRow
    newAttributesDropdown.querySelectorAll('.option-btn').forEach(button => {
        button.addEventListener('click', function(event) {
            event.stopPropagation();
            if (button.getAttribute('data-action') === 'insert-above') {
                const currentRow = button.closest('.inputs-bloc');
                insertRowAbove(currentRow);
                closeAllDropdowns();
            } else if (button.getAttribute('data-action') === 'insert-below') {
                const currentRow = button.closest('.inputs-bloc');
                insertRowBelow(currentRow);
                closeAllDropdowns();
            } else {
                handleOptionClick(this, newRow);
            }
        });
    });

    // Event listener for switch in the current newRow
    newAttributesDropdown.querySelectorAll('input[name="input-type-' + rowCounter + '"]').forEach(input => {
        input.addEventListener('change', function() {
            handleInputTypeSwitch(newRow, this.value);
        });
    });

    rowCounter++; 

    return newRow;
}

// 2.6 Функція для вставки рядка вище
function insertRowAbove(referenceRow) {
    const newRow = createNewRow();
    referenceRow.parentNode.insertBefore(newRow, referenceRow);
    updateRowIdsAndEvents();
}

// 2.7 Функція для вставки рядка нижче
function insertRowBelow(referenceRow) {
    const newRow = createNewRow();
    if (referenceRow.nextSibling) {
        referenceRow.parentNode.insertBefore(newRow, referenceRow.nextSibling);
    } else {
        referenceRow.parentNode.appendChild(newRow);
    }
    updateRowIdsAndEvents();
}

// 2.8 Оновлення ID та обробників подій
function updateRowIdsAndEvents() {
    const rows = document.querySelectorAll('#rows-container .inputs-bloc');
    let newRowCounter = 1;

    rows.forEach(function(row) {
        // Оновлюємо ID рядка
        row.id = 'inputs-bloc-' + newRowCounter;

        // Оновлюємо ID та атрибути внутрішніх елементів
        const moveBtn = row.querySelector('.move-btn');
        moveBtn.id = 'move-input-' + newRowCounter;

        const leftInput = row.querySelector('.input-left');
        leftInput.id = 'input-left-' + newRowCounter;

        const rightInput = row.querySelector('.input-right');
        rightInput.id = 'input-right-' + newRowCounter;

        const useAttributesBtn = row.querySelector('.use-attributes');
        useAttributesBtn.id = 'use-attributes-' + newRowCounter;

        const attributesDropdown = row.querySelector('.attributes-dropdown');
        attributesDropdown.id = 'attributes-dropdown-' + newRowCounter;

        const delBtn = row.querySelector('.lil-btn');
        delBtn.id = 'del-input-' + newRowCounter;

        // Оновлюємо name атрибут для перемикачів
        const switchInputs = row.querySelectorAll('input[name^="input-type-"]');
        switchInputs.forEach(function(input) {
            input.name = 'input-type-' + newRowCounter;
        });

        // Оновлюємо обробники подій, якщо потрібно (якщо використовуєте делегування, це не потрібно)

        newRowCounter++;
    });

    rowCounter = newRowCounter;
}

// 2.9 Обробка вибору опцій форматування рядка
function handleOptionClick(button, newRow) {
    const classList = ['td', 'th-strong', 'th', 'new-table', 'h2'];
    const isLargeButton = classList.includes(button.getAttribute('data-class'));

    // Remove all large button classes and toggle the current class
    if (isLargeButton) {
        if (newRow.classList.contains(button.getAttribute('data-class'))) {
            newRow.classList.remove(button.getAttribute('data-class'));
            newRow.classList.add('td');
            newRow.querySelector('[data-class="td"]').classList.add('active');
            button.classList.remove('active');
        } else {
            classList.forEach(cls => newRow.classList.remove(cls));
            newRow.classList.add(button.getAttribute('data-class'));
            newRow.querySelectorAll('.option-btn-l').forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
        }
    } else {
        newRow.classList.toggle(button.getAttribute('data-class'));
        button.classList.toggle('active');
    }

    // Special handling for new-table
    if (newRow.classList.contains('new-table')) {
        newRow.querySelectorAll('[data-class="bold"], [data-class="italic"], [data-class="colspan2"]').forEach(btn => {
            btn.classList.remove('active');
            newRow.classList.remove('bold', 'italic', 'colspan2');
        });
    }

    // Special handling for th
    if (button.getAttribute('data-class') === 'th') {
        newRow.querySelectorAll('[data-class="bold"]').forEach(btn => {
            btn.classList.remove('active');
            newRow.classList.remove('bold');
        });
    }

    // Special handling for bold and th
    if (button.getAttribute('data-class') === 'bold' && newRow.classList.contains('th')) {
        newRow.classList.remove('th');
        newRow.classList.add('th-strong');
        newRow.querySelector('[data-class="th"]').classList.remove('active');
        newRow.querySelector('[data-class="th-strong"]').classList.add('active');
        button.classList.remove('active');
    }

    // Special handling for th-strong and new-table
    if (newRow.classList.contains('th-strong') || newRow.classList.contains('new-table')) {
        newRow.querySelector('[data-class="bold"]').classList.remove('active');
        newRow.classList.remove('bold');
    }

    // Ensure h2 class is correctly handled
    if (!newRow.classList.contains('h2')) {
        newRow.querySelectorAll('[data-class="h2"]').forEach(btn => {
            btn.classList.remove('active');
        });
    }

    // Ensure colspan2 is correctly handled
    if (!newRow.classList.contains('colspan2')) {
        newRow.querySelectorAll('[data-class="colspan2"]').forEach(btn => {
            btn.classList.remove('active');
        });
    }
}

// 2.10 Перемикання типу вводу (рядок або поле)
function handleInputTypeSwitch(row, type) {
    const leftInput = row.querySelector('.input-left');
    const rightInput = row.querySelector('.input-right');

    if (type === 'field') {
        const newLeftTextArea = document.createElement('textarea');
        newLeftTextArea.id = leftInput.id;
        newLeftTextArea.className = leftInput.className;
        newLeftTextArea.placeholder = leftInput.placeholder;
        newLeftTextArea.value = leftInput.value;
        leftInput.parentNode.replaceChild(newLeftTextArea, leftInput);

        const newRightTextArea = document.createElement('textarea');
        newRightTextArea.id = rightInput.id;
        newRightTextArea.className = rightInput.className;
        newRightTextArea.placeholder = rightInput.placeholder;
        newRightTextArea.value = rightInput.value;
        rightInput.parentNode.replaceChild(newRightTextArea, rightInput);
    } else {
        const newLeftInput = document.createElement('input');
        newLeftInput.id = leftInput.id;
        newLeftInput.className = leftInput.className;
        newLeftInput.placeholder = leftInput.placeholder;
        newLeftInput.value = leftInput.value;
        newLeftInput.autocomplete = 'off';
        leftInput.parentNode.replaceChild(newLeftInput, leftInput);

        const newRightInput = document.createElement('input');
        newRightInput.id = rightInput.id;
        newRightInput.className = rightInput.className;
        newRightInput.placeholder = rightInput.placeholder;
        newRightInput.value = rightInput.value;
        newRightInput.autocomplete = 'off';
        rightInput.parentNode.replaceChild(newRightInput, rightInput);
    }
}

// 2.11 Закриття всіх випадаючих меню з опціями
function closeAllDropdowns() {
    document.querySelectorAll('.attributes-dropdown').forEach(function(dropdown) {
        dropdown.style.display = 'none';
    });
}

// 2.12 Обробник для кнопок видалення
rowsContainer.addEventListener('click', function(event) {
    if (event.target.closest('.lil-btn')) {
        const btn = event.target.closest('.lil-btn');
        if (btn.innerHTML.includes('close')) {
            btn.parentElement.remove();
            updateRowIdsAndEvents(); // Оновлюємо після видалення
        }
    }
});

// 2.13 Обробник для кнопок use-attributes
rowsContainer.addEventListener('click', function(event) {
    if (event.target.closest('.use-attributes')) {
        closeAllDropdowns();
        const dropdown = event.target.closest('.use-attributes').nextElementSibling;
        dropdown.style.display = 'flex';
        event.stopPropagation();
    }
});

// 2.14 Обробник для option-btn
rowsContainer.addEventListener('click', function(event) {
    if (event.target.closest('.option-btn')) {
        const button = event.target.closest('.option-btn');
        const row = button.closest('.inputs-bloc');
        if (button.getAttribute('data-action') === 'insert-above') {
            insertRowAbove(row);
            closeAllDropdowns();
        } else if (button.getAttribute('data-action') === 'insert-below') {
            insertRowBelow(row);
            closeAllDropdowns();
        } else {
            handleOptionClick(button, row);
        }
    }
});

// Розділ 3: Генерація таблиці та тексту
// 3.1 Генерація HTML-коду таблиці
tablesBtn.addEventListener('click', function() {
    let tableHTML = '';
    let isFirstRow = true;

    document.querySelectorAll('#rows-container .inputs-bloc').forEach(function(row) {
        let  leftInput = row.querySelector('.input-left').value.trim();
        let rightInput = row.querySelector('.input-right').value.trim(); // Оголошуємо rightInput тут

        // Заміна ком на крапки в rightInput
        leftInput = leftInput.replace(/\(/g, "<em>(");
        leftInput = leftInput.replace(/\)/g, ")</em>");
        rightInput = rightInput.replace(/\(/g, "<em>(");
        rightInput = rightInput.replace(/\)/g, ")</em>");
        rightInput = rightInput.replace(/\)<\/em> <em>\(/g, ") (");
        rightInput = rightInput.replace(/\)<\/em><em>\(/g, ")(");
        leftInput = leftInput.replace(/\)<\/em> <em>\(/g, ") (");
        leftInput = leftInput.replace(/\)<\/em><em>\(/g, ")(");
        rightInput = rightInput.replace(/МСМ/g, "MSM");
        leftInput = leftInput.replace(/МСМ/g, "MSM");
        rightInput = rightInput.replace(/(\d+),(\d+)/g, '$1.$2');

        // Пропуск порожніх рядків, які не є new-table, або рядків з класом added та порожнім input-right
        if ((!row.classList.contains('new-table') && !leftInput && !rightInput) ||
            (row.classList.contains('added') && !rightInput)) {
            return;
        }

        if (row.classList.contains('new-table')) {
            tableHTML += '</tbody></table><table><tbody>';
            isFirstRow = false;
        } else if (row.classList.contains('h2')) {
            if (!isFirstRow) {
                tableHTML += `</tbody></table>`;
            }
            tableHTML += `<h2>${leftInput}</h2><table><tbody>`;
            isFirstRow = false;
        } else {
            if (isFirstRow) {
                tableHTML += '<table><tbody>';
                isFirstRow = false;
            }
            let leftContent = leftInput;
            let rightContent = rightInput;

            if (row.classList.contains('italic')) {
                leftContent = `<em>${leftInput}</em>`;
                rightContent = `<em>${rightInput}</em>`;
            }
            if (row.classList.contains('bold')) {
                leftContent = `<strong>${leftInput}</strong>`;
                rightContent = `<strong>${rightInput}</strong>`;
            }

            if (row.classList.contains('colspan2')) {
                if (row.classList.contains('th-strong')) {
                    tableHTML += `<tr><th colspan="2"><strong>${leftContent}</strong></th></tr>`;
                } else if (row.classList.contains('th')) {
                    tableHTML += `<tr><th colspan="2">${leftContent}</th></tr>`;
                } else {
                    tableHTML += `<tr><td colspan="2">${leftContent}</td></tr>`;
                }
            } else if (row.classList.contains('single')) {
                // Обробка рядків з класом "single"
                if (row.classList.contains('th-strong')) {
                    tableHTML += `<tr><th><strong>${leftContent}</strong></th></tr>`;
                } else if (row.classList.contains('th')) {
                    tableHTML += `<tr><th>${leftContent}</th></tr>`;
                } else {
                    tableHTML += `<tr><td>${leftContent}</td></tr>`;
                }
            } else {
                if (row.classList.contains('th-strong')) {
                    tableHTML += `<tr><th><strong>${leftContent}</strong></th><th><strong>${rightContent}</strong></th></tr>`;
                } else if (row.classList.contains('th')) {
                    tableHTML += `<tr><th>${leftContent}</th><th>${rightContent}</th></tr>`;
                } else {
                    tableHTML += `<tr><td>${leftContent}</td><td>${rightContent}</td></tr>`;
                }
            }
        }
    });

    tableHTML += '</tbody></table>';

    document.getElementById('table-html').value = tableHTML;
});

// 3.2 Генерація тексту з <br> тегами
tablesBtn.addEventListener('click', function() {
    let textHTML = '';

    document.querySelectorAll('#rows-container .inputs-bloc').forEach(function(row) {
        let leftInput = row.querySelector('.input-left').value.trim();
        let rightInput = row.querySelector('.input-right').value.trim();

        // Заміна ком на крапки в rightInput
        rightInput = rightInput.replace(/МСМ/g, "MSM");
        leftInput = leftInput.replace(/МСМ/g, "MSM");
        rightInput = rightInput.replace(/(\d+),(\d+)/g, '$1.$2');

        // Перевіряємо лише leftInput на наявність "Харчова цінність" або "Пищевая ценность"
        if (leftInput.match(/Харчова цінність|Пищевая ценность/gi)) {
            leftInput = ''; // Очищаємо leftInput, якщо знайдено
        }

        // Пропуск порожніх рядків, які не є new-table, або рядків з класом added та порожнім input-right
        if ((!row.classList.contains('new-table') && !leftInput && !rightInput) ||
            (row.classList.contains('added') && !rightInput)) {
            return;
        }

        if (row.classList.contains('new-table')) {
            textHTML += '<br>';
        } else if (row.classList.contains('h2') || row.classList.contains('bold') ||
                   row.classList.contains('th-strong') || row.classList.contains('th')) {
            textHTML += `<strong>${leftInput} ${rightInput}</strong><br>`;
        } else if (row.classList.contains('italic') || row.classList.contains('td')) {
            textHTML += `${leftInput} ${rightInput}<br>`;
        }
    });

    document.getElementById('table-html-br').value = textHTML;
});

// Розділ 4: Додавання та обробка рядків харчової цінності
// 4.1 Додавання шаблону харчової цінності
document.getElementById('add-nutrition-facts-sample').addEventListener('click', addNutritionFactsSample);

// 4.2 Функція для додавання рядків харчової цінності
function addNutritionFactsSample() {
    const facts = ["Калории", " - от  жиров", "Жиры", " - насыщенные", " - транс-жиры", "Холестерин", "Углеводы", " - сахар", "Пищевые волокна", "Белок", "Соль"];
    const addButton = document.getElementById('add-input');

    facts.forEach(fact => {
        addButton.click(); // натискання кнопки додавання рядка

        let rowsContainer = document.getElementById('rows-container');
        let lastRow = rowsContainer.lastElementChild; // отримання останнього доданого рядка

        let inputsBloc = lastRow.closest('.inputs-bloc'); // Отримання батьківського елемента .inputs-bloc
        if (inputsBloc) {
            inputsBloc.classList.add('added'); // Додавання класу 'added' до .inputs-bloc
        }

        let inputLeft = lastRow.querySelector('.input-left');
        inputLeft.value = fact; // Встановлення тексту у input-left
    });
}

// 4.3 Перевірка заповнення обов'язкових полів харчової цінності
function checkForEmptyNutritionFacts() {
    let isEmpty = false; 

    document.querySelectorAll('#rows-container .inputs-bloc').forEach(function(row) {
        const leftInput = row.querySelector('.input-left').value.trim();
        const rightInput = row.querySelector('.input-right').value.trim();

        // Перевіряємо, чи leftInput містить "Харчова цінність" або "Пищевая ценность" 
        // та чи rightInput порожнє
        if ((leftInput.match(/Харчова цінність|Пищевая ценность/gi)) && rightInput === '') {
            tableHtmlBr.value = 'Обов\'язкове поле зі значенням харчової цінності не заповнено';
            tableHtml.value = 'Обов\'язкове поле зі значенням харчової цінності не заповнено';
            isEmpty = true; 
            return; // Зупиняємо поточний цикл forEach
        }
    });

    return isEmpty; // Повертаємо true, якщо знайдено порожні поля
}

// Розділ 5: Додавання рядків вітамінів
document.getElementById('add-vitamins-sample').addEventListener('click', addVitaminsSample);

function addVitaminsSample() {
    const vitamins = ["Витамин A", , "Витамин C", "Витамин D", "Витамин E", "Витамин K", "Витамин B1", "Витамин B2", "Витамин B3", "Витамин B5", "Витамин B6", "Витамин B7", "Витамин B9", "Витамин B12"];
    const addButton = document.getElementById('add-input');

    vitamins.forEach(vitamin => {
        addButton.click(); // Натискання кнопки додавання рядка

        let rowsContainer = document.getElementById('rows-container');
        let lastRow = rowsContainer.lastElementChild; // Отримання останнього доданого рядка

        let inputsBloc = lastRow.closest('.inputs-bloc'); // Отримання батьківського елемента .inputs-bloc
        if (inputsBloc) {
            inputsBloc.classList.add('added'); // Додавання класу 'added' до .inputs-bloc
        }

        let inputLeft = lastRow.querySelector('.input-left');
        inputLeft.value = vitamin; // Встановлення тексту у input-left
    });
}

// Розділ 5,1: Додавання рядків амінокислот
document.getElementById('add-amino-acids-sample').addEventListener('click', addAminoSample);

function addAminoSample() {
    const aminos = ["Аланин", "Аргинин", "Аспарагин", "Аспарагиновая кислота", "Цистеин", "Глутамин", "Глутаминовая кислота", "Глицин", "Гистидин", "Изолейцин", "Лейцин", "Лизин", "Метионин", "Фенилаланин", "Пролин", "Серин", "Треонин", "Триптофан", "Тирозин", "Валин"];
    const addButton = document.getElementById('add-input');

    aminos.forEach(amino => {
        addButton.click(); // Натискання кнопки додавання рядка

        let rowsContainer = document.getElementById('rows-container');
        let lastRow = rowsContainer.lastElementChild; // Отримання останнього доданого рядка

        let inputsBloc = lastRow.closest('.inputs-bloc'); // Отримання батьківського елемента .inputs-bloc
        if (inputsBloc) {
            inputsBloc.classList.add('added'); // Додавання класу 'added' до .inputs-bloc
        }

        let inputLeft = lastRow.querySelector('.input-left');
        inputLeft.value = amino; // Встановлення тексту у input-left
    });
}

// 6. Ініціалізація першого рядка (метод: виклик функції після завантаження DOM)
document.addEventListener('DOMContentLoaded', function() {
    initializeFirstRow();
});

// 7. Додавання рядків для інгредієнтів (метод: створення елементів та обробка подій)
ingredientsBtn.addEventListener('click', function() {
    // 7.1 Додаємо порожній рядок
    initializeEmptyRow(); // Використовуємо існуючу функцію
  
    // 7.2 Додаємо рядок з опцією "Заголовок" та текстом "Інгредієнти"
    addInputBtn.click();
    const newRowHeader = document.querySelector('div[id^="inputs-bloc-"]:last-child');
    const thStrongButton = newRowHeader.querySelector('[data-class="th-strong"]');
    thStrongButton.click();
    const leftInputHeader = newRowHeader.querySelector('.input-left');
    leftInputHeader.value = 'Ингредиенты';
  
    // 7.3 Додаємо рядок з вибраним полем та класом "ingredients"
    addInputBtn.click();
    const newRowField = document.querySelector('div[id^="inputs-bloc-"]:last-child');
    const switchFieldInput = newRowField.querySelector('input[value="field"]');
    switchFieldInput.checked = true;
    handleInputTypeSwitch(newRowField, 'field');
    newRowField.classList.add('ingredients', 'single');
  
    // 7.4 Додаємо клас "ingredients" до попереднього рядка (з заголовком)
    newRowHeader.classList.add('ingredients', 'single');
});

// 8. Додавання рядків для попередження (метод: створення елементів та обробка подій)
warningTextBtn.addEventListener('click', function() {
  // 8.1 Додаємо порожній рядок
  initializeEmptyRow();

  // 8.2 Додаємо рядок з вибраним полем, класами "td", "bold" та "single"
  addInputBtn.click();
  const newRowField = document.querySelector('div[id^="inputs-bloc-"]:last-child');
  const switchFieldInput = newRowField.querySelector('input[value="field"]');
  switchFieldInput.checked = true;
  handleInputTypeSwitch(newRowField, 'field');
  newRowField.classList.add('td', 'bold', 'single'); // Додаємо всі необхідні класи

  // 8.3 Встановлюємо текст у ліве поле вводу
  const leftInputWarning = newRowField.querySelector('.input-left');
  leftInputWarning.value = ''; // Або інший текст попередження
});

// 8/1. Додавання рядків для різних складів (метод: створення елементів та обробка подій)
compositionTextBtn.addEventListener('click', function() {
  // 8.1 Додаємо порожній рядок
  initializeEmptyRow();

  // 8.2 Додаємо рядок з вибраним полем, класами "td", "bold" та "single"
  addInputBtn.click();
  const newRowField = document.querySelector('div[id^="inputs-bloc-"]:last-child');
  const switchFieldInput = newRowField.querySelector('input[value="field"]');
  switchFieldInput.checked = true;
  handleInputTypeSwitch(newRowField, 'field');
  newRowField.classList.add('td', 'bold', 'single'); // Додаємо всі необхідні класи

  // 8.3 Встановлюємо текст у ліве поле вводу
  const leftInputWarning = newRowField.querySelector('.input-left');
  leftInputWarning.value = 'Состав может незначительно отличаться в зависимости от вкуса'; // Або інший текст попередження
});

//9 магія
// Функція для проставлення значення у поле вводу
function setInputValue(id, value) {
    let input = document.getElementById(id);
    if (input) {
      input.value = value;
    }
  }
  
// Функція для обробки тексту і заповнення полів вводу
magicBtn.addEventListener('click', processAndFillInputs);
  
  function processAndFillInputs() {
    let text = magicText.value;
    let lines = text.split('\n');
  
    lines.forEach(line => {
      line = line.replace(/\d+\s*%(\*\*)?|\d+\*\*+|\*+/g, '').trim();
  
      let parenthesesMatch = line.match(/\(([^)]+)\)$/);
      let rightCell = '';
      let leftCell = line;
  
      if (parenthesesMatch) {
        rightCell = '(' + parenthesesMatch[1].trim() + ')';
        rightCell = rightCell.replace(/,/g, '.');
        leftCell = line.slice(0, parenthesesMatch.index).trim();
        line = leftCell;
      }
  
      let valueMatch = line.match(/(<\s*)?(\d+\.\d+|\d+,\d+|\d+)(?!(.*\d))(\s+[а-яА-Яa-zA-Z]+\.*\s*(?!.*\))|(?=\n|$))/);
  
      if (line === '') {
        // Якщо рядок порожній, пропускаємо його
        return;
      } else if (valueMatch) {
        let newRightCell = valueMatch[0].trim();
        newRightCell = newRightCell.replace(/,/g, '.');
        leftCell = line.slice(0, valueMatch.index).trim();
        rightCell = newRightCell + ' ' + rightCell;
  
        if (leftCell !== '' || rightCell !== '') {
          // Імітуємо натискання на кнопку додавання рядка
          addInputBtn.click();
  
          let newRowNumber = rowCounter - 1; // Використовуємо rowCounter замість inputCount
          setInputValue(`input-left-${newRowNumber}`, leftCell);
          setInputValue(`input-right-${newRowNumber}`, rightCell);
  
          let selectedDiv = document.querySelector(`#use-attributes-${newRowNumber} .selected`);
          if (selectedDiv) {
            selectedDiv.textContent = 'td';
          }
        }
      } else {
        // Імітуємо натискання на кнопку додавання рядка
        addInputBtn.click();
  
        let newRowNumber = rowCounter - 1; // Використовуємо rowCounter замість inputCount
        setInputValue(`input-left-${newRowNumber}`, line);
  
        let selectedDiv = document.querySelector(`#use-attributes-${newRowNumber} .selected`);
        if (selectedDiv) {
          selectedDiv.textContent = 'td';
        }
      }
    });
  
    // Перевіряємо, чи останні input-right та input-left порожні
    let lastRowNumber = rowCounter - 1;
    let lastRightInput = document.getElementById(`input-right-${lastRowNumber}`);
    let lastLeftInput = document.getElementById(`input-left-${lastRowNumber}`);
  
    if (lastRightInput && lastRightInput.value === '' && lastLeftInput && lastLeftInput.value === '') {
      let lastRow = document.getElementById(`inputs-bloc-${lastRowNumber}`);
      if (lastRow) {
        lastRow.remove();
        rowCounter--;
        updateInputIndexes();
      }
    }
  }
  
  function setInputValue(inputId, value) {
    const inputElement = document.getElementById(inputId);
    if (inputElement) {
      inputElement.value = value;
    }
  }
  
  function updateInputIndexes() {
    const inputBlocks = document.querySelectorAll('[id^="inputs-bloc-"]');
    inputBlocks.forEach((inputBlock, index) => {
      inputBlock.id = `inputs-bloc-${index + 1}`;
  
      const leftInput = inputBlock.querySelector('.input-left');
      leftInput.id = `input-left-${index + 1}`;
  
      const rightInput = inputBlock.querySelector('.input-right');
      rightInput.id = `input-right-${index + 1}`;
  
      const useAttributesSelect = inputBlock.querySelector('.use-attributes');
      useAttributesSelect.id = `use-attributes-${index + 1}`;
  
      const delInputBtn = inputBlock.querySelector('.lil-btn');
      delInputBtn.id = `del-input-${index + 1}`;
    });
  }

//11
document.addEventListener('DOMContentLoaded', function () {
    const rowsContainer = document.getElementById('rows-container');

    rowsContainer.addEventListener('input', function () {
        let servingWeight = 0;
        let fats = 0, carbs = 0, proteins = 0;

        const inputs = document.querySelectorAll('.inputs-bloc');
        inputs.forEach((inputBloc) => {
            const inputLeft = inputBloc.querySelector('.input-left').value;
            const inputRight = inputBloc.querySelector('.input-right').value;
            const rightToolSpan = inputBloc.querySelector('.input-right-tool');

            if (inputLeft.includes("Пищевая ценность") || inputLeft.includes("Харчова цінність")) {
                const weightMatch = inputRight.match(/(\d+)/);
                if (weightMatch) {
                    servingWeight = parseInt(weightMatch[0], 10);
                }
            } else if (inputLeft.includes("Жиры") || inputLeft.includes("Жири")) {
                fats = parseFloat(inputRight) || 0; // Якщо значення не введено, встановлюємо 0
            } else if (inputLeft.includes("Углеводы") || inputLeft.includes("Вуглеводи")) {
                carbs = parseFloat(inputRight) || 0;
            } else if (inputLeft.includes("Белок") || inputLeft.includes("Білок")) {
                proteins = parseFloat(inputRight) || 0;
            }

            // Перевіряємо, чи введено значення нутрієнта і чи вказана вага порції
            if (rightToolSpan && servingWeight > 0) {
                if (inputLeft.includes("Жиры") || inputLeft.includes("Жири")) {
                    const fatsPercentage = fats > 0 ? `${Math.round((fats / servingWeight) * 100)}%` : '';
                    rightToolSpan.textContent = fatsPercentage;
                    rightToolSpan.classList.toggle('tooltip-sm', fatsPercentage !== ''); // Додаємо/видаляємо клас tooltip-sm
                } else if (inputLeft.includes("Углеводы") || inputLeft.includes("Вуглеводи")) {
                    const carbsPercentage = carbs > 0 ? `${Math.round((carbs / servingWeight) * 100)}%` : '';
                    rightToolSpan.textContent = carbsPercentage;
                    rightToolSpan.classList.toggle('tooltip-sm', carbsPercentage !== ''); // Додаємо/видаляємо клас tooltip-sm
                } else if (inputLeft.includes("Белок") || inputLeft.includes("Білок")) {
                    const proteinsPercentage = proteins > 0 ? `${Math.round((proteins / servingWeight) * 100)}%` : '';
                    rightToolSpan.textContent = proteinsPercentage;
                    rightToolSpan.classList.toggle('tooltip-sm', proteinsPercentage !== ''); // Додаємо/видаляємо клас tooltip-sm
                }
            } else if (rightToolSpan) {
                rightToolSpan.textContent = '';
                rightToolSpan.classList.remove('tooltip-sm'); // Видаляємо клас tooltip-sm
            }
        });
    });
});

// Додаємо обробник події на кнопку tablesBtn
tablesBtn.addEventListener('click', checkForEmptyNutritionFacts);

//Копіювання таблиці
tableHtml.addEventListener("click", function () {
    tableHtml.select();
  document.execCommand("copy");
});

tableHtmlBr.addEventListener("click", function () {
    tableHtmlBr.select();
    document.execCommand("copy");
}); 
window.onload = function() {
    new Sortable(document.getElementById('rows-container'), {
        handle: '.move-btn', // Клас для елементу, який використовується для перетягування
        animation: 150, // Швидкість анімації переміщення
        onEnd: function (evt) { // Функція, що виконується після закінчення перетягування
            var items = document.querySelectorAll('.inputs-bloc');
            items.forEach(function (item, index) {
                item.id = 'inputs-bloc-' + (index + 1);
                item.querySelector('.move-btn').id = 'move-input-' + (index + 1);
                item.querySelector('.left').id = 'input-left-' + (index + 1);
                item.querySelector('.right').id = 'input-right-' + (index + 1);
                item.querySelector('.use-attributes').id = 'use-attributes-' + (index + 1);
                item.querySelector('.attributes-dropdown').id = 'attributes-dropdown-' + (index + 1);
                item.querySelector('.lil-btn').id = 'del-input-' + (index + 1);
            });
        },
    });
  };
  
let group1 = 'div';
let group2 = '';
let group3 = '';

function updateHTMLCombination(value, group) {
    if (group === 1) {
        group1 = value;
    } else if (group === 2) {
        if (group2.includes(value)) {
            group2 = group2.replace(value, '').trim();
        } else {
            group2 += ' ' + value;
        }
    } else if (group === 3) {
        if (group3 === value) {
            group3 = '';
        } else {
            group3 = value;
        }
    }

    const classAttribute = (group2.trim() + ' ' + group3.trim()).trim();
    const result = '<' + group1 + (classAttribute ? ' class="' + classAttribute + '"' : '') + '>' + '</' + group1 + '>';
    document.getElementById('teg-combination').value = result;
}



function copyCombination() {
    const combinationField = document.getElementById('teg-combination');
    combinationField.select();
    document.execCommand('copy');
    combinationField.focus();
    combinationField.setSelectionRange(0, combinationField.value.length);
}

function clearCombination() {
    const combinationField = document.getElementById('teg-combination');
    combinationField.value = '';
}

document.addEventListener('DOMContentLoaded', (event) => {
    document.querySelectorAll('.group1').forEach(element => {
        element.addEventListener('click', () => {
            updateHTMLCombination(element.value, 1);
        });
    });

    document.querySelectorAll('.group2').forEach(element => {
        element.addEventListener('click', () => {
            updateHTMLCombination(element.value, 2);
        });
    });

    document.querySelectorAll('.group3').forEach(element => {
        element.addEventListener('click', () => {
            updateHTMLCombination(element.value, 3);
        });
    });
    
    const combinationField = document.getElementById('teg-combination');
    combinationField.addEventListener('click', copyCombination);
    
    const clearBtn = document.getElementById('clear-ct');
    clearBtn.addEventListener('click', clearCombination);
});



const clearBtn = document.getElementById('clear-ct');
clearBtn.addEventListener('click', clearCombination);
//1. // Оголошення змінних та отримання елементів DOM
const form = document.getElementById('markup-form');
const inputText = document.getElementById('input-text-markup');
const result = document.getElementById('result');
const boldBtn = document.getElementById('boldBtn');
const h1Btn = document.getElementById('h1Btn');
const h2Btn = document.getElementById('h2Btn');
const h3Btn = document.getElementById('h3Btn');
const processBtn = document.getElementById('process-btn');
const lowercaseBtn = document.getElementById('lowercaseBtn');
const cleanButton = document.getElementById("clean-text-markup");
const cleningButton = document.getElementById('clean-btn');
const cleningagButton = document.getElementById('clean-btn-tag');
const brizationButton = document.getElementById('brization-button');
// const codeTextarea = document.querySelector('text-code'); // Цей рядок, здається, не використовується, тому я його закоментував

// 2.1. Функція автоформатування тексту
function autoTag(text) {
  const lines = text.split('\n');
  let result = '';
  let isList = false;
  let isParagraph = false;

  for (let i = 0; i < lines.length; i++) {
    const line = lines[i].trim();

    if (line.length === 0) {
      if (isList) {
        result += '</ul>';
        isList = false;
      }
      if (isParagraph) {
        result += '</p>';
        isParagraph = false;
      }
      continue;
    }

    if (line.endsWith(':')) {
      if (isList) {
        result += '</ul>';
        isList = false;
      }
      if (isParagraph) {
        result += '</p>';
        isParagraph = false;
      }
      result += `<h3>${line}</h3>`;
      continue;
    }

    if (i < lines.length - 1 && lines[i + 1].trim().length > 0) {
      if (!isList) {
        result += '<ul>';
        isList = true;
      }
      result += `<li>${line}</li>`;
    } else {
      if (isList) {
        result += `<li>${line}</li></ul>`;
        isList = false;
      } else {
        if (isParagraph && !line.startsWith('<h1') && !line.startsWith('<h2') && !line.startsWith('<h3')) {
          result += `${line}</p>`;
          isParagraph = false;
        } else {
          if (!line.startsWith('<h1') && !line.startsWith('<h2') && !line.startsWith('<h3')) {
            result += `<p>${line}`;
            isParagraph = true;
          } else {
            result += `${line}`;
          }
        }
      }
    }
  }

  if (isList) {
    result += '</ul>';
  }
  if (isParagraph) {
    result += '</p>';
  }

  return result;
}

// 2.2. Функція відображення статусу копіювання
function showCopyStatus(visible) {
  const copyStatus = document.getElementById('copy-status');
  copyStatus.style.display = visible ? 'inline' : 'none';
}

// 2.3. Функції форматування виділеного тексту
function makeTextBold() {
  const selectedText = inputText.value.substring(inputText.selectionStart, inputText.selectionEnd);
  const boldText = `<strong>${selectedText}</strong>`;
  const newText = inputText.value.substring(0, inputText.selectionStart) + boldText + inputText.value.substring(inputText.selectionEnd);
  inputText.value = newText;
}
function makeTextH1() {
  const selectedText = inputText.value.substring(inputText.selectionStart, inputText.selectionEnd);
  const h1Text = `<h1>${selectedText}</h1>`;
  const newText = inputText.value.substring(0, inputText.selectionStart) + h1Text + inputText.value.substring(inputText.selectionEnd);
  inputText.value = newText;
}
function makeTextH2() {
  const selectedText = inputText.value.substring(inputText.selectionStart, inputText.selectionEnd);
  const h1Text = `<h2>${selectedText}</h2>`;
  const newText = inputText.value.substring(0, inputText.selectionStart) + h1Text + inputText.value.substring(inputText.selectionEnd);
  inputText.value = newText;
}
function makeTextH3() {
  const selectedText = inputText.value.substring(inputText.selectionStart, inputText.selectionEnd);
  const h1Text = `<h3>${selectedText}</h3>`;
  const newText = inputText.value.substring(0, inputText.selectionStart) + h1Text + inputText.value.substring(inputText.selectionEnd);
  inputText.value = newText;
}
function makeTextLowercase() {
  const selectedText = inputText.value.substring(inputText.selectionStart, inputText.selectionEnd);
  const lowercaseText = selectedText.toLowerCase();
  const newText = inputText.value.substring(0, inputText.selectionStart) + lowercaseText + inputText.value.substring(inputText.selectionEnd);
  inputText.value = newText;
}

// 3.1. Обробники подій кнопок форматування
lowercaseBtn.addEventListener('click', makeTextLowercase);
h1Btn.addEventListener('click', makeTextH1);
h2Btn.addEventListener('click', makeTextH2);
h3Btn.addEventListener('click', makeTextH3);
boldBtn.addEventListener('click', makeTextBold);


// 3.2. Обробник події кнопки "Очистити" (повністю)
cleningagButton.addEventListener('click', () => {
  let generatedCleanrText = inputText.value
      // Видалення тегів (включаючи таблиці), атрибутів та їх вмісту
      .replace(/<\/?(table|tbody|thead|tr|th|td|h1|h2|h3|p|em|ul|ol|li|b|pre|u|strong|hr|br|span|img|script)\b[^>]*>|\s*особливості:\s*|\n\n\n+|\n{3}|\r|\t|&nbsp;|/gi, (match) => {
          if (match.startsWith('<h') && match.endsWith('>')) {
              return '\n\n';
          } else if (match === 'особливості:') {
              return 'Особливості:';
          } else {
              return '';
          }
      })

      .replace(/<a\s+(?:[^>]*?\s+)?href=(["'])(.*?)\1[^>]*>(.*?)<\/a>/gi, '$3')
      .replace(/:contentReference\[oaicite:\d+\]\{index=\d+\}/g, '')
      .replace(/ +/g, ' ')
      .replace(/>\s+</g, '><')
      .trim();

  result.value = generatedCleanrText;
  result.select();
  document.execCommand('copy');
});

// 3.3. Обробник події кнопки "Очистити" (частково)
cleningButton.addEventListener('click', () => {
  let generatedCleanrText = inputText.value

      // Видалення атрибутів тегів
      .replace(/<([a-z0-9]+)\b[^>]*>/gi, '<$1>') 

      // Заміна тегів pre на p
      .replace(/<\/?pre>/gi, '<p>')

      // Видалення посилань, залишаючи тільки текст
      .replace(/<a\s+(?:[^>]*?\s+)?href=(["'])(.*?)\1[^>]*>(.*?)<\/a>/gi, '$3')

      // Видалення конструкцій :contentReference[oaicite:X]{index:X}
      .replace(/:contentReference\[oaicite:\d+\]\{index=\d+\}/g, '')

      // Заміна &nbsp; на пробіл, <br> та його варіацій на </p><p>
      .replace(/&nbsp;|<br\s*\/?>/gi, (match) => match === '&nbsp;' ? ' ' : '</p><p>')

      // Видалення порожніх абзаців та дублювання </p><p>
      .replace(/<p(?:>|\s[^>]*>)(\s|&nbsp;)*<\/p>/gi, '')      
      .replace(/(<\/p><p>)+/g, '</p><p>')

      // Заміна символів списку та зображень
      .replace(/[•·●]/g, '')
      .replace(/<img[^>]+>/gi, '')

      // Заміна <h3>особливості:</h3> (з або без нерозривного пробілу) на <h3>Особливості:</h3>
      .replace(/<h3>\s*особливості:<\/h3>/gi, '<h3>Особливості:</h3>')

      // Видалення тегів span та script
      .replace(/<\/?span[^>]*>|<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '')

      // Видалення нерозривних пробілів
      .replace(//g, '');
      
  // Копіювання результату до буфера обміну
  result.value = generatedCleanrText;
  result.select();
  document.execCommand('copy');
});


// 3.4. Обробник події кнопки "Брізація"
brizationButton.addEventListener('click', () => {
  let generatedBrText = inputText.value
    // Видалення тегів таблиць та їх вмісту
    .replace(/<\/?(table|thead|tbody|tr|th|td)\b[^>]*>/gi, '')

    // Видалення тегів форматування та їх вмісту
    .replace(/<\/?(strong|em|b|u|h2)\b[^>]*>/gi, '')

    // Видалення спеціальних символів та зайвих пробілів
    .replace(/&nbsp;|\n|\r|\t/g, ' ')

    // Заміна заголовків h2 на strong
    .replace(/<h2\b[^>]*>(.*?)<\/h2>/gi, '<strong>$1</strong>')

    // Заміна th на strong
    .replace(/<th\b[^>]*>(.*?)<\/th>/gi, '<strong>$1</strong>')

    // Заміна зайвих пробілів
    .replace(/ +/g, ' ')

    // Видалення зайвих пробілів навколо тегів
    .replace(/>\s+</g, '><')

    // Видалення тексту "Харчова цінність" та "Пищевая ценность"
    .replace(/Харчова цінність|Пищевая ценность/g, '')

    // Заміна тексту "Состав может незначительно отличаться в зависимости от вкуса" на жирний
    .replace(/Состав может незначительно отличаться в зависимости от вкуса/g, '<strong>Состав может незначительно отличаться в зависимости от вкуса</strong>')

    // Заміна </tr> та </table> на <br/>
    .replace(/<\/(tr|table)>/g, '<br/>')

    // Видалення зайвих <br/> наприкінці
    .trim().replace(/(<br\/>)+$/, "");

  result.value = generatedBrText;
  result.select();
  document.execCommand('copy');
});


//4. Обробник події кнопки "Process" (автоформатування)
processBtn.addEventListener('click', async (e) => {
  e.preventDefault();
  const text = inputText.value;
  let markedText = autoTag(text);
  markedText = markedText
    .replace(/<\/strong><strong>/g, '')
    .replace(/<\/strong> <strong>/g, '')
    .replace(/<p><p>/g, '<p>')
    .replace(/<\/p><\/p>/g, '<\/p>')
    .replace(/<p><\/p>/g, '')
    .replace(/<\/p>/g, '<\/p>\n\n')
    .replace(/<h3><h3>/g, '<h3>')
    .replace(/<\/h3><\/h3>/g, '<\/h3>')
    .replace(/<\/li>/g, '<\/li>\n')
    .replace(/<ul>/g, '<ul>\n')
    .replace(/<ol>/g, '<ol>\n')
    .replace(/<\/ul>/g, '<\/ul>\n\n')
    .replace(/<\/ol>/g, '<\/ol>\n\n')
    .replace(/<\/h3>/g, '<\/h3>\n\n')
    .replace(/<\/h2>/g, '<\/h2>\n\n')
    .replace(/<\/h1>/g, '<\/h1>\n\n');
  result.value = markedText;

  // Copy to clipboard
  result.select();
  document.execCommand('copy');
 
  result.focus();
  result.setSelectionRange(0, result.value.length);
 });
 
//5.Обробник події вводу в текстове поле
result.addEventListener('input', function() {
  const text = inputText.value;
  const parsedText = parseTags(text);
  
  codeTextarea.value = parsedText;
});

//6. Обробник події кнопки очищення полів
cleanButton.addEventListener("click", function() {
  // Очищуємо значення полів вводу та виводу
  inputText.value = "";
  result.value = "";
});
// 1. Оголошення елементів DOM
const macroTypeSelect = document.getElementById('macroType');
const tableTypeSelect = document.getElementById('tableType');
const macroIDInput = document.getElementById('macroID');
const macroTextInput = document.getElementById('macroText');
const outputTextArea = document.getElementById('output');
const generateMacroBtn = document.getElementById('generateMacroBtn'); // Залишаємо лише необхідні елементи

// 2. Таблиця опцій (видаляємо tooltips)
const tableOptions = {
    '-': ['-'],
    'a': ['article', 'brand', 'category', 'optionSEO'],
    'test': ['1', '2', '3', '4'],
    // Додайте інші опції для інших типів макросів тут
};

// 3. Функція оновлення опцій таблиці (без змін)
function updateTableOptions() {
    const macroType = macroTypeSelect.value;
    tableTypeSelect.innerHTML = '';

    tableOptions[macroType].forEach(option => {
        const opt = document.createElement('option');
        opt.value = option;
        opt.textContent = option;
        tableTypeSelect.appendChild(opt);
    });
}

// 4. Функція генерації макросу (без змін)
function generateMacro() {
    const macroType = macroTypeSelect.value;
    const tableType = tableTypeSelect.value;
    const macroID = macroIDInput.value;
    const macroText = macroTextInput.value;

    let result = `[${macroType} table="${tableType}"`;
    if (macroID) {
        result += ` ID="${macroID}"`;
    }
    result += `]${macroText}[/${macroType}]`;

    outputTextArea.value = result;
}

// 5. Функція обробки випадаючих списків (якщо вони присутні в HTML)
function handleDropdownLists() {
    const dlBtns = document.querySelectorAll('.DL-btn');

    dlBtns.forEach(dlBtn => {
        const dlList = dlBtn.nextElementSibling;
        
        function toggleList() {
            const displayStatus = window.getComputedStyle(dlList).display;
            dlList.style.display = (displayStatus === 'block') ? 'none' : 'block';
        }

        dlBtn.addEventListener('click', toggleList);
        dlList.addEventListener('mouseleave', () => dlList.style.display = 'none');
    });
}

// 6. Ініціалізація при завантаженні сторінки
document.addEventListener('DOMContentLoaded', () => {
    updateTableOptions(); // Початкове оновлення опцій таблиці
    handleDropdownLists(); // Ініціалізація обробки випадаючих списків
});

// 7. Додавання обробників подій
macroTypeSelect.addEventListener('change', updateTableOptions);
generateMacroBtn.addEventListener('click', generateMacro); 

// 8. Копіювання
outputTextArea.addEventListener("click", function () {
        outputTextArea.select();
    document.execCommand("copy");
    });
:root {
  /*Для тксту 100% 65% 45%*/
  /*Для фону 5% 10% 15% 20%*/

  --splash: rgb(211, 80, 39);
  --splash-5: rgb(211, 80, 39, 0.05);
  /* 5% прозорості */
  --splash-10: rgb(211, 80, 39, 0.1);
  /* 10% прозорості */
  --splash-15: rgb(211, 80, 39, 0.15);
  /* 15% прозорості */
  --splash-20: rgb(211, 80, 39, 0.2);
  /* 20% прозорості */
  --splash-45: rgb(211, 80, 39, 0.45);
  /* 45% прозорості */
  --splash-65: rgb(211, 80, 39, 0.65);
  /* 65% прозорості */
  --splash-90: rgb(211, 80, 39, 0.9);
  /* 80% прозорості */

  --main: rgb(46, 48, 56);
  --main-5: rgb(46, 48, 56, 0.05);
  /* 5% прозорості */
  --main-10: rgb(46, 48, 56, 0.1);
  /* 10% прозорості */
  --main-15: rgb(46, 48, 56, 0.15);
  /* 15% прозорості */
  --main-20: rgb(46, 48, 56, 0.2);
  /* 20% прозорості */
  --main-45: rgb(46, 48, 56, 0.45);
  /* 45% прозорості */
  --main-65: rgb(46, 48, 56, 0.65);
  /* 65% прозорості */

  --main-text: #374151;

  --main-border: #c7c9d1;

  --back: #f5f4f4;
  --white: #ffffff;
  --tran: transparent;

  --wfa: -webkit-fill-available;
}

html {
  scroll-behavior: smooth;
}

body {
  margin: 0;
  padding: 12px;
  width: var(--wfa);
  min-height: 100vh;

  display: block;
  position: relative;
  background-color: var(--back);
}

* {
  outline: none;
  font-size: 12px;
  font-family:
    DM Sans,
    system-ui,
    -apple-system,
    BlinkMacSystemFont,
    Segoe UI,
    Roboto,
    Helvetica Neue,
    Arial,
    Noto Sans,
    sans-serif,
    Apple Color Emoji,
    Segoe UI Emoji,
    Segoe UI Symbol,
    Noto Color Emoji;
}

h1 {
  font-size: 24px;
  font-weight: 700;
  margin: 0 0 8px 0;
}

h2 {
  font-size: 1rem;
  margin: 0;
  color: var(--main-45);
}

a:-webkit-any-link {
  cursor: default;
  text-decoration: none;
}

.ml12 {
  margin-left: 12px;
}

.mb4 {
  margin-bottom: 4px;
}

.material-symbols-outlined {
  cursor: default;
}

nav {
  height: 100vh;
  width: 160px;
  display: flex;
  flex-direction: column;
  justify-content: space-between;

  position: fixed;
  top: 0;
  left: 0;
}

.glos-tree {
  height: 100vh;
  width: 20%;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  background-color: var(--main-5);
  position: fixed;
  top: 0;
  left: 0;
}

.nav-btn-container ul {
  padding-left: 8px;
  list-style-type: none;
}

.nav-btn-container::marker {
  display: none;
}

main {
  width: var(--wfa);
  margin-left: 160px;
}

.block {
  display: flex;
  gap: 12px;
  margin: 12px 0;
}

.flex-1 {
  flex: 1;
}

.flex-2 {
  flex: 2;
}

.flex-3 {
  flex: 3;
}

.flex-4 {
  flex: 4;
}

.flex-5 {
  flex: 5;
}

.stiky {
  position: sticky;
  top: 8px;
}

/*СТИЛІ МЕНЮ НАВІГАЦІЇ*/
nav .material-symbols-outlined {
  font-size: 18px;
}

.nav-btn-container {
  display: flex;
  flex-direction: column;
  padding: 12px;
  position: relative;
}

.dropdown-btn {
  position: relative;
  overflow: hidden;
  display: flex;
  align-items: center;
  width: 100%;
  height: 32px;
  background-color: var(--tran);
  padding: 0 4px 0 12px;
  border-radius: 99px;
}

.big-linl-btn {
  width: 100%;
}

.big-linl-btn div {
  display: flex;
  align-items: center;
  gap: 8px;
  color: var(--main-45);
}

.dropdown-btn div:hover {
  color: var(--main);
}

.lil-linl-btn {
  visibility: hidden;
  display: flex;
  align-items: center;
  margin-left: auto;
  padding: 4px;
  border-radius: 99px;
  color: var(--main);
}

.dropdown-btn:hover .lil-linl-btn {
  visibility: visible;
}

.lil-linl-btn:hover {
  background-color: var(--splash-10);
  color: var(--splash);
}

.nav-back-label {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: -1;
}

.dropdown-btn:hover .nav-back-label {
  background-color: var(--main-5);
}

/*СТИЛІ Генератора таблиць*/

.white-box {
  padding: 20px;
  border: 1px solid var(--main-5);
  background-color: rgb(255, 255, 255);
  border-radius: 12px;
  position: relative;
  box-shadow:
    0 10px 15px -3px rgba(0, 0, 0, 0.102),
    0 4px 6px -4px rgba(0, 0, 0, 0.102);
}

#rows-container .inputs-bloc {
  display: flex;
  align-items: start;
  gap: 8px;
}

.inputs-bloc {
  position: relative;
}

.inputs-bloc .material-symbols-outlined {
  font-size: 20px;
}

.inputs-bloc input {
  height: 32px;
  border: none;
  padding: 0 4px;
}

.lil-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 32px;
  height: 32px;
  border: none;
  border-radius: 99px;
  background-color: var(--tran);
  color: var(--main-45);
}

.lil-btn:hover {
  background-color: var(--splash-20);
  color: var(--splash);
}

.move-btn {
  height: 32px;
  border: none;
  background-color: var(--tran);
  color: var(--main-20);
}

.move-btn:hover {
  color: var(--main);
}

.inputs-line {
  display: flex;
  width: 100%;
}

.inputs-line textarea {
  padding: 9px 8px 0 4px;
  height: 1.4375rem;
  min-height: 1.4375rem;
}

.right,
.left {
  display: flex;
  align-items: center;
  width: 100%;
  background-color: var(--tran);
}

.left {
  flex: 3;
}

.right {
  flex: 1;
  border-left: 1px solid var(--main-10);
}

.input-left,
.input-right {
  width: 100%;
  background-color: var(--tran);
  border: none;
  resize: vertical;
}

.tooltip-sm {
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 10px;
  color: var(--splash);
  background-color: var(--splash-5);
  padding: 4px 8px;
  border-radius: 99px;
  margin-right: 4px;
}

.option-btn-l {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 8px 12px;
  background-color: var(--tran);
  color: var(--main-45);
  border: none;
}

.option-btn-sm {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 32px;
  height: 32px;
  border: none;
  border-radius: 99px;
  background-color: var(--tran);
  color: var(--main-45);
}

.option-btn-l:hover,
.option-btn-sm:hover {
  background-color: var(--main-10);
  color: var(--main);
}

.option-btn-l:active,
.option-btn-sm:active {
  background-color: var(--splash-10);
  color: var(--splash);
}

.option-btn-l:hover .table-menu-label {
  visibility: visible;
}

.active {
  background-color: var(--splash-10);
  color: var(--splash);
}

.active:hover {
  background-color: var(--splash-20);
  color: var(--splash);
}

.table-menu-label {
  visibility: hidden;
  margin-left: 12px;
  padding: 4px 8px;
  background-color: var(--splash-20);
  color: var(--splash);
  border-radius: 99px;
}

.container-option-btn-sm {
  display: flex;
  justify-content: space-around;
  align-items: center;
}

.line {
  border-top: 1px solid var(--main-10);
  margin: 10px 0;
}

.attributes-dropdown {
  position: absolute;
  top: 100%;
  flex-direction: column;
  width: max-content;
  border: 1px solid var(--main-5);
  border-radius: 8px;
  padding: 8px 0;
  margin-top: 0.3125rem;
  background-color: rgb(255, 255, 255, 0.7);
  box-shadow:
    0 10px 15px -3px rgba(0, 0, 0, 0.102),
    0 4px 6px -4px rgba(0, 0, 0, 0.102);
  z-index: 1000;
}

.switch-container {
  display: flex;
  align-items: center;
  border-radius: 99px;
  overflow: hidden;
  height: 24px;
  position: relative;
  margin: 0 4px;
}

input[type="radio"] {
  display: none;
}

.switch-label {
  flex: 1;
  text-align: center;
  padding: 8px;
  cursor: pointer;
  transition:
    background-color 0.3s,
    color 0.3s;
  background-color: var(--main-5);
  color: var(--main-20);
}

.switch-label:hover {
  background-color: var(--main-45);
  color: var(--main);
}

.switch-container input[type="radio"]:checked + .switch-label:hover {
  background-color: var(--splash-45);
  color: var(--splash);
}

.switch-container input[type="radio"]:checked + .switch-label {
  background-color: var(--splash-10);
  color: var(--splash);
}

/*СВІЧЕР*/
.mode-toggle-container {
  display: flex;
  align-items: center;
  height: max-content;
  flex-direction: column;
}

.mode-toggle-options {
  display: flex;
  width: 60%;
  padding: 4px;
  margin-bottom: 12px;
  background: var(--main-5);
  border-radius: 99px;
  overflow: hidden;
}

.mode-toggle-label {
  flex: 1;
  text-align: center;
  padding: 4px;
  border-radius: 99px;
  cursor: pointer;
  transition:
    background-color 0.3s,
    color 0.3s;
  color: var(--main-45);
}

.mode-toggle-label:hover {
  color: var(--main-text);
}

.mode-toggle-options input[type="radio"]:checked + .mode-toggle-label {
  background-color: var(--main);
  color: var(--white);
}

.mode-toggle-content {
  position: relative;
  flex-direction: column;
  width: 100%;
}

.mode-toggle-content .serve-btns {
  width: 100%;
}

.table-btns-container {
  display: flex;
  align-items: flex-start;
  gap: 8px;
  padding: 8px;
}

.tbc-second {
  margin-left: auto;
  display: flex;
  gap: 4px;
  flex-wrap: wrap;
  justify-content: flex-end;
}

.line-container {
  position: relative;
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 8px 12px;
  border: none;
  border-radius: 8px;
}
.line-container:hover {
  background-color: var(--main-5);
}

.line-container .seed-span {
  top: 8px;
  left: 4px;
}

.box-container {
  position: relative;
  display: flex;
  flex-direction: column;
  gap: 8px;
  padding: 8px 12px;
  border: none;
  border-radius: 8px;
}

.box-container:hover {
  background-color: var(--main-5);
}

.text-line {
  width: var(--wfa);
  background-color: var(--tran);
  border: none;
  resize: vertical;
  min-width: 32px;
}

.context-span {
  width: 4.5rem;
  color: var(--main-65);
  user-select: none;
  white-space: nowrap;
}

.secondary-btn {
  height: 26px;
  padding: 4px 12px;
  color: var(--main-45);
  background-color: var(--main-10);
  border: 1px solid var(--tran);
  border-radius: 8px;
  white-space: nowrap;
}

.secondary-btn:hover {
  color: var(--main);
  background-color: var(--main-20);
}

.secondary-btn:active {
  color: var(--splash);
  background-color: var(--splash-65);
}

.secondary-btn:focus {
  border: 1px solid var(--splash-65);
}

.secondary-btn a {
  color: var(--main-45);
}

.secondary-btn:hover a {
  color: var(--main);
}

.secondary-btn:active a {
  color: var(--splash);
}

.importatn-btn {
  width: 100%;
  margin-bottom: 12px;
  background-color: var(--splash-20);
  color: var(--splash);
  border: 1px solid var(--splash-20);
  border-radius: 8px;
  font-weight: 500;
  padding: 10px 4px;
}

.importatn-btn:hover {
  background-color: transparent;
  color: var(--splash);
}

.importatn-btn:active {
  background-color: var(--splash-65);
  border: 1px solid var(--splash);
  color: var(--white);
}

.pill-container {
  padding: 12px 0;
  display: flex;
  align-items: center;
  justify-content: flex-start;
  gap: 8px;
}

.pill-btn {
  position: relative;
  width: auto;
  padding: 6px;
  color: var(--main);
  background-color: var(--tran);
  border: none;
  border-radius: 8px;
  font-size: 12px;
}

.pill-btn:hover {
  background-color: var(--main-10);
}

.code-text-container {
  display: flex;
  flex-direction: column;
  margin-bottom: 8px;
  position: relative;
}

.seed-span {
  position: absolute;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 12px;
  color: var(--splash-65);
  background-color: var(--splash-5);
  border-radius: 4px;
  margin-bottom: 4px;
  padding: 4px;
  height: 12px;
}

.code-text-container .seed-span {
  top: 4px;
  left: 4px;
}

.result-output {
  resize: none;
  overflow: hidden;
  padding: 0.125rem 8px;
  border: none;
  border-radius: 8px;
  text-indent: 44px;
}

.result-output:not(input) {
  height: 32px;
}

.tend {
  text-align: end;
}

.result-output:hover {
  background-color: var(--main-5);
}

.code-text {
  border: 1px dashed var(--main-20);
  border-radius: 12px;
  margin-bottom: 12px;
  resize: none;
  height: 12.25rem;
  width: var(--wfa);
  padding: 8px;
}

/*ВІЗУАЛІЗАЦІЯ ТЕКСТУ В ТАБЛИЦІ */
.inputs-bloc.td + .inputs-bloc.td .inputs-line {
  /* Вибираємо другий і наступні рядки */
  margin-top: -1px; /* Зсуваємо рядок вгору на 1 піксель, щоб перекрити верхню рамку попереднього рядка */
}

.td .inputs-line {
  border: 1px solid var(--main-10);
}

.th .inputs-line {
  background-color: var(--main-5);
}

.th-strong .inputs-line {
  background-color: var(--main-10);
}

.italic .input-left,
.italic .input-right {
  font-style: italic;
}

.bold .input-left,
.bold .input-right,
.th-strong .input-left,
.th-strong .input-right {
  font-weight: 700;
}

.added .input-left,
.added .input-right {
  color: var(--splash);
}

.h2 .input-left {
  font-size: 18px;
  font-weight: 600;
}

.h2 .right,
.single .right,
.colspan2 .right {
  display: none;
}

.new-table .inputs-line {
  visibility: hidden;
}

/* inputs-line ПІСЛЯ h2 */
.inputs-bloc.h2 + .inputs-bloc:not(.h2) .inputs-line,
.inputs-bloc.new-table + .inputs-bloc:not(.new-table) .inputs-line {
  border-radius: 8px 8px 0 0;
}

/* inputs-line ПЕРЕД h2 */
.inputs-bloc:has(+ .inputs-bloc.h2) .inputs-line,
.inputs-bloc:has(+ .inputs-bloc.new-table) .inputs-line {
  border-radius: 0 0 8px 8px;
}

.inputs-bloc:last-child .inputs-line {
  border-radius: 0 0 8px 8px;
}

.inputs-bloc:first-child .inputs-line {
  border-radius: 8px 8px 0 0;
}

.inputs-bloc:only-child .inputs-line {
  border-radius: 8px;
}

/*Стилі тексту*/
.text-box {
  display: flex;
  position: relative;
}

.text-box textarea {
  width: 100%;
  min-height: 12.5rem;
  border: none;
  resize: vertical;
  padding: 8px;
  border-bottom: 1px dashed var(--main-20);
}

#clean-text-markup {
  visibility: hidden;
  position: absolute;
  cursor: default;
  right: 0;
  bottom: 12px;
}

.white-box:hover #clean-text-markup {
  visibility: visible;
}

select {
  background-color: var(--tran);
  border: none;
  color: var(--splash);
  text-align: end;
  padding: 0 20px;
}

/*СТИЛІ ДЛЯ СЕО*/

.counter {
  font-size: 12px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--main-45);
  background-color: var(--main-5);
  padding: 4px 8px;
  border-radius: 99px;
  margin-right: 4px;
}

.flex-wrap-container {
  display: flex;
  flex-wrap: wrap;
  gap: 4px;
  overflow-y: scroll;
}

#trigger-titles-container {
  display: flex;
  flex-wrap: wrap;
  gap: 4px;
  padding: 12px 0;
}

.trigger-button,
.trigger-title-inactive {
  display: flex;
  align-items: center;
  height: 1.875rem;
  padding: 0 12px;
  color: var(--main-65);
  font-weight: 700;
  border: 1px solid var(--main-10);
  border-radius: 8px;
  background-color: var(--main-5);
  position: relative;
}

.trigger-button:hover,
.trigger-title-inactive:hover {
  color: var(--main);
  background-color: var(--main-10);
}

.trigger-title-active {
  display: flex;
  align-items: center;
  height: 1.875rem;
  padding: 0 12px;
  color: var(--white);
  font-weight: 700;
  border: 1px solid var(--splash);
  border-radius: 8px;
  background-color: var(--splash-90);
  position: relative;
}

.trigger-title-active:hover {
  background-color: var(--splash);
}

.tooltip {
  visibility: hidden;
  opacity: 0;
  transition: opacity 0.3s;
  position: absolute;
  top: 32px;
  left: 0;
  width: max-content;
  max-width: 15rem;
  background-color: var(--main);
  border: none;
  font-weight: 400;
  border-radius: 4px;
  padding: 0.3125rem;
  z-index: 1;
  color: var(--white);
}

div#country-name {
  position: absolute;
  right: 12px;
}

/*СТИЛІ ОФІЦІЙНИХ САЙТІВ*/

#buttons-container {
  height: 160px;
  overflow-y: scroll;
  display: flex;
  justify-content: flex-start;
  align-content: flex-start;
  flex-wrap: wrap;
  gap: 4px;
}

.of-link-btn {
  height: 26px;
  padding: 4px 12px;
  color: var(--main-45);
  background-color: var(--main-10);
  border: 1px solid var(--tran);
  border-radius: 8px;
  white-space: nowrap;
}

.of-link-btn:hover {
  background-color: var(--splash-20);
}

.of-link-btn:active {
  background-color: var(--splash-20);
  border: 1px solid var(--splash);
}

.of-link-btn a {
  color: var(--main);
}

.of-link-btn:hover a {
  color: var(--splash);
}

#result-link-gen {
  text-indent: 44px;
  height: 4rem;
}

/*ДОПОМІЖНІ СТИЛІ*/
::placeholder {
  color: var(--main-20);
}

::-webkit-scrollbar {
  background-color: var(--trans);
  width: 10px;
  height: 10px;
}

::-webkit-scrollbar-thumb {
  background-color: var(--main-10);
  border-radius: 99px;
}

::-webkit-scrollbar-thumb:hover {
  background-color: var(--main-45);
}

::selection {
  color: var(--splash);
  background-color: var(--splash-20);
}

.form-group {
  margin-bottom: 8px;
  width: -webkit-fill-available;
}

.form-group label {
  display: block;
  margin-bottom: 4px;
  color: var(--main-45);
}

.form-group input,
.form-group textarea {
  width: var(--wfa);
  padding: 8px 12px;
  background-color: var(--main-5);
  border-radius: 8px;
  resize: vertical;
  border: none;
}

.form-group input:hover,
.form-group textarea:hover {
  background-color: var(--main-10);
}

/*ГЛОСАРІЙ*/

.glos-block {
  display: flex;
  width: 100%;
}

.line-v {
  margin-top: 10px;
  display: block;
  border: 1px solid var(--main-5);
  margin-left: -1px;
  left: 25%;
  top: 0;
  bottom: 0;
  position: absolute;
}

.circle-for-line {
  top: 1.75rem;
  display: block;
  color: #f1f1f3;
  overflow: visible;
  width: calc(8px + 1px);
  left: calc(25% - 12px);
  position: absolute;
}

ul {
  margin: 0;
  padding: 0;

  margin-top: 0.5714286em;
  margin-bottom: 0.5714286em;
  padding-left: 1.5714286em;
}

li {
  padding-left: 0.4em;
  margin-top: 0.3em;
  margin-bottom: 0.3em;
  font-weight: 400;
}

p {
  margin-top: 0.5714286em;
  margin-bottom: 0.5714286em;
  font-weight: 400;
}

::marker {
  color: var(--main-45);
}

.glos-content a {
  text-underline-offset: 4px;
  text-decoration-line: underline;
  color: var(--splash);
  position: relative;
  z-index: 10;
  margin-bottom: 1.1428571em;
  text-decoration: underline;
  font-weight: 500;
}

code {
  font-weight: 400;
  padding-top: 1px;
  padding-bottom: 1px;
  padding-left: 4px;
  padding-right: 4px;
  background-color: var(--main-15);
  border-width: 1px;
  border-radius: 4px;
  color: var(--main);
  font-feature-settings: normal;
  font-variation-settings: normal;
}

dl {
  width: 25%;
  justify-content: space-between;
  align-items: baseline;
  flex-shrink: 0;
  display: flex;
  margin: 0;
}

h3 {
  font-weight: 600;
  font-size: 1.875rem;
}

.name-sub {
  display: flex;
  flex-wrap: wrap;
  font-size: 12px;
  gap: 8px;
  align-items: baseline;
  margin-top: 4px;
}

.name-sub p {
  width: max-content;
  margin: 0;
}

.cat-items {
  margin-top: 8px;
  gap: 8px;
  align-items: baseline;
  display: flex;
}

.cat-items span {
  color: var(--splash);
  filter: hue-rotate(90deg);
  letter-spacing: 0.025em;
  border-radius: 99px;
  padding-right: 12px;
  padding-top: 4px;
  padding-bottom: 4px;
  gap: 4px;
  max-width: fit-content;
  display: flex;
}

.glos-content {
  padding-bottom: 4rem;
  padding-left: 1rem;
  padding-right: 1rem;
  flex-direction: column;
  gap: 1rem;
  width: 100%;
  display: flex;
  position: relative;
}

.glos-main {
  display: flex;
  flex-direction: column;
}

.glos {
  margin-top: -10px;
  gap: 32px;
  flex-direction: row;
  display: flex;
  position: relative;
}

.glos-page {
  padding-left: 24px;
  padding-right: 24px;
  gap: 6rem;
  padding-top: 3rem;
  padding-bottom: 3rem;
  justify-content: flex-start;
  flex-direction: column;
  max-width: 101vh;
  width: 100%;
  min-height: 101vh;
  display: flex;
  margin-left: 20%;
}

figure {
  margin: 1.7rem 0;
  display: grid;
  gap: 4px;
  overflow: hidden;
  border-radius: 12px;
}

figure img {
  width: 100%;
  height: auto;
  max-width: 100%;
  border-radius: 12px;
}

figure:has(img:only-of-type) {
  grid-template-columns: 1fr;
}

figure:has(img:not(:only-of-type)) {
  grid-template-columns: repeat(2, 1fr);
}

.text-xs {
  color: var(--main-65);
  font-size: 12px;
}

.titlealt {
  color: var(--main-45);
  font-weight: 600;
  font-size: 1.875rem;
}

.important {
  margin: 1.7rem 0;
  padding: 0.7rem;
  background-color: var(--splash-10);
  border-radius: 12px;
}

.important h3 {
  margin: 0;
  color: var(--splash);
}

.highlight {
  background-color: var(--splash);
  filter: hue-rotate(90deg);
  color: var(--white);
  padding: 0.125rem;
  border-radius: 4px;
  font-size: inherit; /* Ensure the font size remains consistent */
}

.keywords-content {
  margin: 32px 0 0 0;
  padding: 8px;
  height: min-content;
  border: 1px dashed var(--main-15);
  border-radius: 4px;
}

.keywords-content h2 {
  text-transform: uppercase;
}

.toggle-btn {
  cursor: pointer;
  margin-left: auto;
  visibility: hidden;
  border-radius: 99px;
}

.toggle-btn[data-state="open"] {
  color: var(--splash-20);
}

.toggle-btn[data-state="closed"] {
  color: var(--splash-20);
  filter: hue-rotate(90deg);
}

.toggle-btn[data-state="open"]:hover {
  color: var(--splash);
}

.toggle-btn[data-state="closed"]:hover {
  color: var(--splash);
  filter: hue-rotate(90deg);
}

.nested {
  display: block;
  padding-left: 12px;
}

.item a {
  text-underline-offset: 4px;
  margin-bottom: 0.4em;
  width: 100%;
}

.item:hover > a {
  text-decoration: underline;
}

.item:hover > .toggle-btn {
  visibility: visible;
}

.item {
  display: flex;
  align-items: center;
}

.item.level-0 a {
  font-weight: 600;
  font-size: 1.4rem;
}

#common-warning {
    color: var(--splash);
    font-size: 32px;
}

@media (max-width: 74.9375rem) {
  nav {
    display: none;
  }

  main {
    margin-left: 0;
  }
}
<html>

<head>
    <title>Допоміжний сайт</title>
    <link rel="shortcut icon" href="LOGO/dy_Dark_Pinguin.png">
    <link rel="stylesheet" type="text/css" href="../styles.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20,300,0,-25">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin="">
    <link href="https://fonts.googleapis.com/css2?family=Roboto+Flex:opsz@8..144&amp;family=Roboto+Mono&amp;family=Yanone+Kaffeesatz&amp;display=swap" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js"></script>
    <link rel="manifest" href="/manifest.json">
    <style></style>
</head>

<body>
    <nav>
        <div class="nav-btn-container">
            <div class="dropdown-btn">
                <a class="big-linl-btn" href="../index.html#table">
                    <div>
                        <span class="material-symbols-outlined">table_rows</span>
                        <span class="nav-btn-name">Склад</span>
                    </div>
                </a>
                <div class="nav-back-label"></div>
            </div>
            <div class="dropdown-btn">
                <a class="big-linl-btn" href="../index.html#text">
                    <div>
                        <span class="material-symbols-outlined">edit_note</span>
                        <span class="nav-btn-name">Текст</span>
                    </div>
                </a>
                <a class="lil-linl-btn" href="../p_text.html"> <span
                        class="material-symbols-outlined">open_in_new</span></a>
                <div class="nav-back-label"></div>
            </div>
            <div class="dropdown-btn">
                <a class="big-linl-btn" href="../index.html#seo">
                    <div>
                        <span class="material-symbols-outlined">language</span>
                        <span class="nav-btn-name">SEO</span>
                    </div>
                </a>
                <div class="nav-back-label"></div>
            </div>
            <div class="dropdown-btn">
                <a class="big-linl-btn" href="../index.html#trans">
                    <div>
                        <span class="material-symbols-outlined">translate</span>
                        <span class="nav-btn-name">Переклад</span>
                    </div>
                </a>
                <a class="lil-linl-btn" target="_blank" href="https://semi-shop.com.ua/5tLKV0FnOo.php?all">open_in_new</span></a>
                <div class="nav-back-label"></div>
            </div>
            <div class="dropdown-btn">
                <a class="big-linl-btn" href="../index.html#links">
                    <div>
                        <span class="material-symbols-outlined">task_alt</span>
                        <span class="nav-btn-name">Офіційні сайти</span>
                    </div>
                </a>
                <div class="nav-back-label"></div>
            </div>

            <div class="line"></div>

            <div class="dropdown-btn">
                <a class="big-linl-btn" href="#">
                    <div>
                        <span class="material-symbols-outlined">print</span>
                        <span class="nav-btn-name">Графік</span>
                    </div>
                </a>
                <div class="nav-back-label"></div>
            </div>


            <div class="dropdown-btn">
                <a class="big-linl-btn" href="../p_glossary.html">
                    <div>
                        <span class="material-symbols-outlined">import_contacts</span>
                        <span class="nav-btn-name">Глосарій</span>
                    </div>
                </a>
                <div class="nav-back-label"></div>
            </div>
            <div class="dropdown-btn">
                <a class="big-linl-btn" href="../index.html#inform">
                    <div>
                        <span class="material-symbols-outlined">info</span>
                        <span class="nav-btn-name">Додаткова інформація</span>
                    </div>
                </a>
                <div class="nav-back-label"></div>
            </div>
            <div class="dropdown-btn">
                <a class="big-linl-btn" target="_blank"
                    href="https://docs.google.com/spreadsheets/d/1JFICWpsPnZWOS1HcdUYEP-FLUFw1gf8aDEd47aFcEeo/edit?gid=1217844155#gid=1217844155/">
                    <div>
                        <span class="material-symbols-outlined">account_tree</span>
                        <span class="nav-btn-name">База данних</span>
                    </div>
                </a>
                <div class="nav-back-label"></div>
            </div>
            <div class="dropdown-btn">
                <a class="big-linl-btn" target="_blank"
                    href="https://docs.google.com/spreadsheets/d/1kDpQ6FoSsEsA7dc36MKYA97j6lTmLZ_de11o83CZGXU/edit?gid=0#gid=0/">
                    <div>
                        <span class="material-symbols-outlined">account_tree</span>
                        <span class="nav-btn-name">База брендів</span>
                    </div>
                </a>
                <div class="nav-back-label"></div>
            </div>
        </div>
        <div class="nav-btn-container">
            <div class="dropdown-btn">
                <a class="big-linl-btn" target="_blank" href="https://testpinguin.netlify.app/">
                    <div>
                        <span class="material-symbols-outlined">stairs_2</span>
                        <span class="nav-btn-name">Tестовий сайт</span>
                    </div>
                </a>
                <div class="nav-back-label"></div>
            </div>
        </div>
    </nav>
    <main style="display: flex; gap: 12px;">
        <div class="form-container">
            <div class="form-group">
                <label>Заголовок</label>
                <input id="h1" class="text-line" placeholder="ГРАФІК МАГАЗИНУ" />
            </div>
            <div class="form-group">
                <label>Підзаголовок</label>
                <input id="sub" class="text-line" placeholder="на новорічні свята" />
            </div>
            <div class="line"></div>
            <div id="rows-container"></div>
            <div class="line"></div>
            
            <div class="table-btns-container" style="width: 100%;">
                <button class="importatn-btn dropdown-btn" style="justify-content: center;" onclick="addRow()"><span class="material-symbols-outlined">add</span>Додати рядок</button>
                <button class="importatn-btn dropdown-btn" style="justify-content: center;"><span class="material-symbols-outlined">download</span> Завантажити PDF</button>
                <button class="importatn-btn dropdown-btn" style="justify-content: center;" onclick="window.print()"><span class="material-symbols-outlined">print</span>Друк</button>
            </div>
        </div>
        <section class="preview" id="preview">
            <header class="header">
                <div class="line1" id="p-h1">ГРАФІК МАГАЗИНУ</div>
                <div class="sub" id="p-sub">на новорічні свята</div>
            </header>
            <section class="schedule" id="p-schedule"></section>
        </section>
    </main>
    <script src="script.js"></script>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'DM Sans', sans-serif;
        }

        .form-container {
            display: flex;
            gap: 8px;
            align-items: start;
            height: 350px;
            height: max-content;
            flex-direction: column;
            padding: 20px;
            border: 1px solid var(--main-5);
            background-color: rgb(255, 255, 255);
            border-radius: 12px;
            position: sticky;
            top: 12px;
            box-shadow: 0px 10px 15px -3px rgba(0, 0, 0, 0.102), 0px 4px 6px -4px rgba(0, 0, 0, 0.102);
        }

        .preview {
            width: 210mm;
            height: 297mm;
            padding: 10mm;
            background: #fff;
            box-shadow: 0 10px 15px -3px #0003, 0 4px 6px -4px #0003;
            display: flex;
            flex-direction: column;
        }

        .header {
            margin-bottom: 24mm;
        }

        .header .line1{
            font-weight: 900;
            line-height: 1;
        }

        .header .line1 {
            font-size: 96px;
        }

        .header .sub {
            font-size: 48px;
            margin-top: 4mm;
        }

        .schedule {
            flex: 1 1 auto;
            display: flex;
            flex-direction: column;
            gap: 18mm;
        }

        .row {
            display: flex;
            flex-direction: column;
        }

        .date {
            font-size: 48px;
            margin-bottom: 2mm;
        }

        .time {
            font-size: 96px;
            font-weight: 900;
            line-height: 1;
        }

        @page {
            size: A4 portrait;
            margin: 0;
        }

        @media print {
            body {
                background: #fff;
                padding: 0;
            }

            .form-container {
                display: none;
            }

            nav {
                display: none;
            }

            .preview {
                box-shadow: none;
                margin: 0 auto;
            }
        }
    </style>
    
</body>

</html>
// ------------- DOM -------------
const h1   = document.getElementById('h1');
// Видаляємо посилання на h2, оскільки елемент відсутній
const sub  = document.getElementById('sub');
const pH1  = document.getElementById('p-h1');
// Також прибираємо pH2
const pSub = document.getElementById('p-sub');
const rowsContainer = document.getElementById('rows-container');
const pSchedule     = document.getElementById('p-schedule');

// ------------- події -------------
// Додаємо слухачі тільки до існуючих елементів
[h1, sub].forEach(el => el.addEventListener('input', syncHeaders));

// додаємо стартовий рядок (якщо ще не доданий)
addRow();

// ------------- функції -------------
function syncHeaders() {
  pH1.textContent  = h1.value || 'ГРАФІК МАГАЗИНУ';
  pSub.textContent = sub.value || 'на свята';
}

function addRow(date = '', time = '') {
  const bloc = document.createElement('div');
  bloc.className = 'inputs-bloc';

  bloc.innerHTML = `
    <div class="inputs-line">
      <input class="input-left"  placeholder="25.12.24" value="${date}">
      <input class="input-right" placeholder="з 10 до 16" value="${time}">
    </div>
    <button class="lil-btn" title="Видалити">✕</button>
  `;

  bloc.querySelectorAll('input').forEach(i => i.addEventListener('input', renderSchedule));
  bloc.querySelector('.lil-btn').addEventListener('click', () => {
    bloc.remove();
    renderSchedule();
  });

  rowsContainer.appendChild(bloc);
  renderSchedule();
}

function renderSchedule() {
  pSchedule.innerHTML = '';

  rowsContainer.querySelectorAll('.inputs-bloc').forEach(bloc => {
    const [dateInp, timeInp] = bloc.querySelectorAll('input');
    const date = dateInp.value.trim();
    const time = timeInp.value.trim();

    if (!date && !time) return;

    const row = document.createElement('div');
    row.className = 'row' + (time.toLowerCase().includes('вихід') ? ' holiday' : '');

    row.innerHTML = `
      <div class="date">${date}</div>
      <div class="time">${time}</div>
    `;
    pSchedule.appendChild(row);
  });
}

// Функція для завантаження PDF
document.getElementById('download-pdf-btn').addEventListener('click', async () => {
  const { jsPDF } = window.jspdf;
  const doc = new jsPDF({
    orientation: 'portrait',
    unit: 'mm',
    format: 'a4'
  });

  const preview = document.querySelector('.preview');
  const canvas = await html2canvas(preview, {
    scale: 2,
    useCORS: true
  });

  const imgData = canvas.toDataURL('image/png');
  const imgProps = doc.getImageProperties(imgData);
  const pdfWidth = doc.internal.pageSize.getWidth();
  const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;

  doc.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);
  doc.save('schedule.pdf');
});
